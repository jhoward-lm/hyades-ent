// Code generated by ent, DO NOT EDIT.
// --------------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2025 The DependencyTrack Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// --------------------------------------------------------------------
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// --------------------------------------------------------------------

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"dependencytrack.io/hyades/ent/manageduser"
	"dependencytrack.io/hyades/ent/permission"
	"dependencytrack.io/hyades/ent/team"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ManagedUserCreate is the builder for creating a ManagedUser entity.
type ManagedUserCreate struct {
	config
	mutation *ManagedUserMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEmail sets the "email" field.
func (muc *ManagedUserCreate) SetEmail(s string) *ManagedUserCreate {
	muc.mutation.SetEmail(s)
	return muc
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (muc *ManagedUserCreate) SetNillableEmail(s *string) *ManagedUserCreate {
	if s != nil {
		muc.SetEmail(*s)
	}
	return muc
}

// SetForcePasswordChange sets the "force_password_change" field.
func (muc *ManagedUserCreate) SetForcePasswordChange(b bool) *ManagedUserCreate {
	muc.mutation.SetForcePasswordChange(b)
	return muc
}

// SetFullname sets the "fullname" field.
func (muc *ManagedUserCreate) SetFullname(s string) *ManagedUserCreate {
	muc.mutation.SetFullname(s)
	return muc
}

// SetNillableFullname sets the "fullname" field if the given value is not nil.
func (muc *ManagedUserCreate) SetNillableFullname(s *string) *ManagedUserCreate {
	if s != nil {
		muc.SetFullname(*s)
	}
	return muc
}

// SetLastPasswordChange sets the "last_password_change" field.
func (muc *ManagedUserCreate) SetLastPasswordChange(t time.Time) *ManagedUserCreate {
	muc.mutation.SetLastPasswordChange(t)
	return muc
}

// SetNonExpiryPassword sets the "non_expiry_password" field.
func (muc *ManagedUserCreate) SetNonExpiryPassword(b bool) *ManagedUserCreate {
	muc.mutation.SetNonExpiryPassword(b)
	return muc
}

// SetPassword sets the "password" field.
func (muc *ManagedUserCreate) SetPassword(s string) *ManagedUserCreate {
	muc.mutation.SetPassword(s)
	return muc
}

// SetSuspended sets the "suspended" field.
func (muc *ManagedUserCreate) SetSuspended(b bool) *ManagedUserCreate {
	muc.mutation.SetSuspended(b)
	return muc
}

// SetUsername sets the "username" field.
func (muc *ManagedUserCreate) SetUsername(s string) *ManagedUserCreate {
	muc.mutation.SetUsername(s)
	return muc
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (muc *ManagedUserCreate) SetNillableUsername(s *string) *ManagedUserCreate {
	if s != nil {
		muc.SetUsername(*s)
	}
	return muc
}

// AddPermissionIDs adds the "permissions" edge to the Permission entity by IDs.
func (muc *ManagedUserCreate) AddPermissionIDs(ids ...int) *ManagedUserCreate {
	muc.mutation.AddPermissionIDs(ids...)
	return muc
}

// AddPermissions adds the "permissions" edges to the Permission entity.
func (muc *ManagedUserCreate) AddPermissions(p ...*Permission) *ManagedUserCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return muc.AddPermissionIDs(ids...)
}

// AddTeamIDs adds the "teams" edge to the Team entity by IDs.
func (muc *ManagedUserCreate) AddTeamIDs(ids ...int) *ManagedUserCreate {
	muc.mutation.AddTeamIDs(ids...)
	return muc
}

// AddTeams adds the "teams" edges to the Team entity.
func (muc *ManagedUserCreate) AddTeams(t ...*Team) *ManagedUserCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return muc.AddTeamIDs(ids...)
}

// Mutation returns the ManagedUserMutation object of the builder.
func (muc *ManagedUserCreate) Mutation() *ManagedUserMutation {
	return muc.mutation
}

// Save creates the ManagedUser in the database.
func (muc *ManagedUserCreate) Save(ctx context.Context) (*ManagedUser, error) {
	return withHooks(ctx, muc.sqlSave, muc.mutation, muc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (muc *ManagedUserCreate) SaveX(ctx context.Context) *ManagedUser {
	v, err := muc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (muc *ManagedUserCreate) Exec(ctx context.Context) error {
	_, err := muc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muc *ManagedUserCreate) ExecX(ctx context.Context) {
	if err := muc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muc *ManagedUserCreate) check() error {
	if _, ok := muc.mutation.ForcePasswordChange(); !ok {
		return &ValidationError{Name: "force_password_change", err: errors.New(`ent: missing required field "ManagedUser.force_password_change"`)}
	}
	if _, ok := muc.mutation.LastPasswordChange(); !ok {
		return &ValidationError{Name: "last_password_change", err: errors.New(`ent: missing required field "ManagedUser.last_password_change"`)}
	}
	if _, ok := muc.mutation.NonExpiryPassword(); !ok {
		return &ValidationError{Name: "non_expiry_password", err: errors.New(`ent: missing required field "ManagedUser.non_expiry_password"`)}
	}
	if _, ok := muc.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`ent: missing required field "ManagedUser.password"`)}
	}
	if _, ok := muc.mutation.Suspended(); !ok {
		return &ValidationError{Name: "suspended", err: errors.New(`ent: missing required field "ManagedUser.suspended"`)}
	}
	return nil
}

func (muc *ManagedUserCreate) sqlSave(ctx context.Context) (*ManagedUser, error) {
	if err := muc.check(); err != nil {
		return nil, err
	}
	_node, _spec := muc.createSpec()
	if err := sqlgraph.CreateNode(ctx, muc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	muc.mutation.id = &_node.ID
	muc.mutation.done = true
	return _node, nil
}

func (muc *ManagedUserCreate) createSpec() (*ManagedUser, *sqlgraph.CreateSpec) {
	var (
		_node = &ManagedUser{config: muc.config}
		_spec = sqlgraph.NewCreateSpec(manageduser.Table, sqlgraph.NewFieldSpec(manageduser.FieldID, field.TypeInt))
	)
	_spec.OnConflict = muc.conflict
	if value, ok := muc.mutation.Email(); ok {
		_spec.SetField(manageduser.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := muc.mutation.ForcePasswordChange(); ok {
		_spec.SetField(manageduser.FieldForcePasswordChange, field.TypeBool, value)
		_node.ForcePasswordChange = value
	}
	if value, ok := muc.mutation.Fullname(); ok {
		_spec.SetField(manageduser.FieldFullname, field.TypeString, value)
		_node.Fullname = value
	}
	if value, ok := muc.mutation.LastPasswordChange(); ok {
		_spec.SetField(manageduser.FieldLastPasswordChange, field.TypeTime, value)
		_node.LastPasswordChange = value
	}
	if value, ok := muc.mutation.NonExpiryPassword(); ok {
		_spec.SetField(manageduser.FieldNonExpiryPassword, field.TypeBool, value)
		_node.NonExpiryPassword = value
	}
	if value, ok := muc.mutation.Password(); ok {
		_spec.SetField(manageduser.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := muc.mutation.Suspended(); ok {
		_spec.SetField(manageduser.FieldSuspended, field.TypeBool, value)
		_node.Suspended = value
	}
	if value, ok := muc.mutation.Username(); ok {
		_spec.SetField(manageduser.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if nodes := muc.mutation.PermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   manageduser.PermissionsTable,
			Columns: manageduser.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := muc.mutation.TeamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   manageduser.TeamsTable,
			Columns: manageduser.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ManagedUser.Create().
//		SetEmail(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ManagedUserUpsert) {
//			SetEmail(v+v).
//		}).
//		Exec(ctx)
func (muc *ManagedUserCreate) OnConflict(opts ...sql.ConflictOption) *ManagedUserUpsertOne {
	muc.conflict = opts
	return &ManagedUserUpsertOne{
		create: muc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ManagedUser.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (muc *ManagedUserCreate) OnConflictColumns(columns ...string) *ManagedUserUpsertOne {
	muc.conflict = append(muc.conflict, sql.ConflictColumns(columns...))
	return &ManagedUserUpsertOne{
		create: muc,
	}
}

type (
	// ManagedUserUpsertOne is the builder for "upsert"-ing
	//  one ManagedUser node.
	ManagedUserUpsertOne struct {
		create *ManagedUserCreate
	}

	// ManagedUserUpsert is the "OnConflict" setter.
	ManagedUserUpsert struct {
		*sql.UpdateSet
	}
)

// SetEmail sets the "email" field.
func (u *ManagedUserUpsert) SetEmail(v string) *ManagedUserUpsert {
	u.Set(manageduser.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *ManagedUserUpsert) UpdateEmail() *ManagedUserUpsert {
	u.SetExcluded(manageduser.FieldEmail)
	return u
}

// ClearEmail clears the value of the "email" field.
func (u *ManagedUserUpsert) ClearEmail() *ManagedUserUpsert {
	u.SetNull(manageduser.FieldEmail)
	return u
}

// SetForcePasswordChange sets the "force_password_change" field.
func (u *ManagedUserUpsert) SetForcePasswordChange(v bool) *ManagedUserUpsert {
	u.Set(manageduser.FieldForcePasswordChange, v)
	return u
}

// UpdateForcePasswordChange sets the "force_password_change" field to the value that was provided on create.
func (u *ManagedUserUpsert) UpdateForcePasswordChange() *ManagedUserUpsert {
	u.SetExcluded(manageduser.FieldForcePasswordChange)
	return u
}

// SetFullname sets the "fullname" field.
func (u *ManagedUserUpsert) SetFullname(v string) *ManagedUserUpsert {
	u.Set(manageduser.FieldFullname, v)
	return u
}

// UpdateFullname sets the "fullname" field to the value that was provided on create.
func (u *ManagedUserUpsert) UpdateFullname() *ManagedUserUpsert {
	u.SetExcluded(manageduser.FieldFullname)
	return u
}

// ClearFullname clears the value of the "fullname" field.
func (u *ManagedUserUpsert) ClearFullname() *ManagedUserUpsert {
	u.SetNull(manageduser.FieldFullname)
	return u
}

// SetLastPasswordChange sets the "last_password_change" field.
func (u *ManagedUserUpsert) SetLastPasswordChange(v time.Time) *ManagedUserUpsert {
	u.Set(manageduser.FieldLastPasswordChange, v)
	return u
}

// UpdateLastPasswordChange sets the "last_password_change" field to the value that was provided on create.
func (u *ManagedUserUpsert) UpdateLastPasswordChange() *ManagedUserUpsert {
	u.SetExcluded(manageduser.FieldLastPasswordChange)
	return u
}

// SetNonExpiryPassword sets the "non_expiry_password" field.
func (u *ManagedUserUpsert) SetNonExpiryPassword(v bool) *ManagedUserUpsert {
	u.Set(manageduser.FieldNonExpiryPassword, v)
	return u
}

// UpdateNonExpiryPassword sets the "non_expiry_password" field to the value that was provided on create.
func (u *ManagedUserUpsert) UpdateNonExpiryPassword() *ManagedUserUpsert {
	u.SetExcluded(manageduser.FieldNonExpiryPassword)
	return u
}

// SetPassword sets the "password" field.
func (u *ManagedUserUpsert) SetPassword(v string) *ManagedUserUpsert {
	u.Set(manageduser.FieldPassword, v)
	return u
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *ManagedUserUpsert) UpdatePassword() *ManagedUserUpsert {
	u.SetExcluded(manageduser.FieldPassword)
	return u
}

// SetSuspended sets the "suspended" field.
func (u *ManagedUserUpsert) SetSuspended(v bool) *ManagedUserUpsert {
	u.Set(manageduser.FieldSuspended, v)
	return u
}

// UpdateSuspended sets the "suspended" field to the value that was provided on create.
func (u *ManagedUserUpsert) UpdateSuspended() *ManagedUserUpsert {
	u.SetExcluded(manageduser.FieldSuspended)
	return u
}

// SetUsername sets the "username" field.
func (u *ManagedUserUpsert) SetUsername(v string) *ManagedUserUpsert {
	u.Set(manageduser.FieldUsername, v)
	return u
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *ManagedUserUpsert) UpdateUsername() *ManagedUserUpsert {
	u.SetExcluded(manageduser.FieldUsername)
	return u
}

// ClearUsername clears the value of the "username" field.
func (u *ManagedUserUpsert) ClearUsername() *ManagedUserUpsert {
	u.SetNull(manageduser.FieldUsername)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.ManagedUser.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ManagedUserUpsertOne) UpdateNewValues() *ManagedUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ManagedUser.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ManagedUserUpsertOne) Ignore() *ManagedUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ManagedUserUpsertOne) DoNothing() *ManagedUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ManagedUserCreate.OnConflict
// documentation for more info.
func (u *ManagedUserUpsertOne) Update(set func(*ManagedUserUpsert)) *ManagedUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ManagedUserUpsert{UpdateSet: update})
	}))
	return u
}

// SetEmail sets the "email" field.
func (u *ManagedUserUpsertOne) SetEmail(v string) *ManagedUserUpsertOne {
	return u.Update(func(s *ManagedUserUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *ManagedUserUpsertOne) UpdateEmail() *ManagedUserUpsertOne {
	return u.Update(func(s *ManagedUserUpsert) {
		s.UpdateEmail()
	})
}

// ClearEmail clears the value of the "email" field.
func (u *ManagedUserUpsertOne) ClearEmail() *ManagedUserUpsertOne {
	return u.Update(func(s *ManagedUserUpsert) {
		s.ClearEmail()
	})
}

// SetForcePasswordChange sets the "force_password_change" field.
func (u *ManagedUserUpsertOne) SetForcePasswordChange(v bool) *ManagedUserUpsertOne {
	return u.Update(func(s *ManagedUserUpsert) {
		s.SetForcePasswordChange(v)
	})
}

// UpdateForcePasswordChange sets the "force_password_change" field to the value that was provided on create.
func (u *ManagedUserUpsertOne) UpdateForcePasswordChange() *ManagedUserUpsertOne {
	return u.Update(func(s *ManagedUserUpsert) {
		s.UpdateForcePasswordChange()
	})
}

// SetFullname sets the "fullname" field.
func (u *ManagedUserUpsertOne) SetFullname(v string) *ManagedUserUpsertOne {
	return u.Update(func(s *ManagedUserUpsert) {
		s.SetFullname(v)
	})
}

// UpdateFullname sets the "fullname" field to the value that was provided on create.
func (u *ManagedUserUpsertOne) UpdateFullname() *ManagedUserUpsertOne {
	return u.Update(func(s *ManagedUserUpsert) {
		s.UpdateFullname()
	})
}

// ClearFullname clears the value of the "fullname" field.
func (u *ManagedUserUpsertOne) ClearFullname() *ManagedUserUpsertOne {
	return u.Update(func(s *ManagedUserUpsert) {
		s.ClearFullname()
	})
}

// SetLastPasswordChange sets the "last_password_change" field.
func (u *ManagedUserUpsertOne) SetLastPasswordChange(v time.Time) *ManagedUserUpsertOne {
	return u.Update(func(s *ManagedUserUpsert) {
		s.SetLastPasswordChange(v)
	})
}

// UpdateLastPasswordChange sets the "last_password_change" field to the value that was provided on create.
func (u *ManagedUserUpsertOne) UpdateLastPasswordChange() *ManagedUserUpsertOne {
	return u.Update(func(s *ManagedUserUpsert) {
		s.UpdateLastPasswordChange()
	})
}

// SetNonExpiryPassword sets the "non_expiry_password" field.
func (u *ManagedUserUpsertOne) SetNonExpiryPassword(v bool) *ManagedUserUpsertOne {
	return u.Update(func(s *ManagedUserUpsert) {
		s.SetNonExpiryPassword(v)
	})
}

// UpdateNonExpiryPassword sets the "non_expiry_password" field to the value that was provided on create.
func (u *ManagedUserUpsertOne) UpdateNonExpiryPassword() *ManagedUserUpsertOne {
	return u.Update(func(s *ManagedUserUpsert) {
		s.UpdateNonExpiryPassword()
	})
}

// SetPassword sets the "password" field.
func (u *ManagedUserUpsertOne) SetPassword(v string) *ManagedUserUpsertOne {
	return u.Update(func(s *ManagedUserUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *ManagedUserUpsertOne) UpdatePassword() *ManagedUserUpsertOne {
	return u.Update(func(s *ManagedUserUpsert) {
		s.UpdatePassword()
	})
}

// SetSuspended sets the "suspended" field.
func (u *ManagedUserUpsertOne) SetSuspended(v bool) *ManagedUserUpsertOne {
	return u.Update(func(s *ManagedUserUpsert) {
		s.SetSuspended(v)
	})
}

// UpdateSuspended sets the "suspended" field to the value that was provided on create.
func (u *ManagedUserUpsertOne) UpdateSuspended() *ManagedUserUpsertOne {
	return u.Update(func(s *ManagedUserUpsert) {
		s.UpdateSuspended()
	})
}

// SetUsername sets the "username" field.
func (u *ManagedUserUpsertOne) SetUsername(v string) *ManagedUserUpsertOne {
	return u.Update(func(s *ManagedUserUpsert) {
		s.SetUsername(v)
	})
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *ManagedUserUpsertOne) UpdateUsername() *ManagedUserUpsertOne {
	return u.Update(func(s *ManagedUserUpsert) {
		s.UpdateUsername()
	})
}

// ClearUsername clears the value of the "username" field.
func (u *ManagedUserUpsertOne) ClearUsername() *ManagedUserUpsertOne {
	return u.Update(func(s *ManagedUserUpsert) {
		s.ClearUsername()
	})
}

// Exec executes the query.
func (u *ManagedUserUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ManagedUserCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ManagedUserUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ManagedUserUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ManagedUserUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ManagedUserCreateBulk is the builder for creating many ManagedUser entities in bulk.
type ManagedUserCreateBulk struct {
	config
	err      error
	builders []*ManagedUserCreate
	conflict []sql.ConflictOption
}

// Save creates the ManagedUser entities in the database.
func (mucb *ManagedUserCreateBulk) Save(ctx context.Context) ([]*ManagedUser, error) {
	if mucb.err != nil {
		return nil, mucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mucb.builders))
	nodes := make([]*ManagedUser, len(mucb.builders))
	mutators := make([]Mutator, len(mucb.builders))
	for i := range mucb.builders {
		func(i int, root context.Context) {
			builder := mucb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ManagedUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mucb *ManagedUserCreateBulk) SaveX(ctx context.Context) []*ManagedUser {
	v, err := mucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mucb *ManagedUserCreateBulk) Exec(ctx context.Context) error {
	_, err := mucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mucb *ManagedUserCreateBulk) ExecX(ctx context.Context) {
	if err := mucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ManagedUser.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ManagedUserUpsert) {
//			SetEmail(v+v).
//		}).
//		Exec(ctx)
func (mucb *ManagedUserCreateBulk) OnConflict(opts ...sql.ConflictOption) *ManagedUserUpsertBulk {
	mucb.conflict = opts
	return &ManagedUserUpsertBulk{
		create: mucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ManagedUser.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mucb *ManagedUserCreateBulk) OnConflictColumns(columns ...string) *ManagedUserUpsertBulk {
	mucb.conflict = append(mucb.conflict, sql.ConflictColumns(columns...))
	return &ManagedUserUpsertBulk{
		create: mucb,
	}
}

// ManagedUserUpsertBulk is the builder for "upsert"-ing
// a bulk of ManagedUser nodes.
type ManagedUserUpsertBulk struct {
	create *ManagedUserCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ManagedUser.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ManagedUserUpsertBulk) UpdateNewValues() *ManagedUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ManagedUser.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ManagedUserUpsertBulk) Ignore() *ManagedUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ManagedUserUpsertBulk) DoNothing() *ManagedUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ManagedUserCreateBulk.OnConflict
// documentation for more info.
func (u *ManagedUserUpsertBulk) Update(set func(*ManagedUserUpsert)) *ManagedUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ManagedUserUpsert{UpdateSet: update})
	}))
	return u
}

// SetEmail sets the "email" field.
func (u *ManagedUserUpsertBulk) SetEmail(v string) *ManagedUserUpsertBulk {
	return u.Update(func(s *ManagedUserUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *ManagedUserUpsertBulk) UpdateEmail() *ManagedUserUpsertBulk {
	return u.Update(func(s *ManagedUserUpsert) {
		s.UpdateEmail()
	})
}

// ClearEmail clears the value of the "email" field.
func (u *ManagedUserUpsertBulk) ClearEmail() *ManagedUserUpsertBulk {
	return u.Update(func(s *ManagedUserUpsert) {
		s.ClearEmail()
	})
}

// SetForcePasswordChange sets the "force_password_change" field.
func (u *ManagedUserUpsertBulk) SetForcePasswordChange(v bool) *ManagedUserUpsertBulk {
	return u.Update(func(s *ManagedUserUpsert) {
		s.SetForcePasswordChange(v)
	})
}

// UpdateForcePasswordChange sets the "force_password_change" field to the value that was provided on create.
func (u *ManagedUserUpsertBulk) UpdateForcePasswordChange() *ManagedUserUpsertBulk {
	return u.Update(func(s *ManagedUserUpsert) {
		s.UpdateForcePasswordChange()
	})
}

// SetFullname sets the "fullname" field.
func (u *ManagedUserUpsertBulk) SetFullname(v string) *ManagedUserUpsertBulk {
	return u.Update(func(s *ManagedUserUpsert) {
		s.SetFullname(v)
	})
}

// UpdateFullname sets the "fullname" field to the value that was provided on create.
func (u *ManagedUserUpsertBulk) UpdateFullname() *ManagedUserUpsertBulk {
	return u.Update(func(s *ManagedUserUpsert) {
		s.UpdateFullname()
	})
}

// ClearFullname clears the value of the "fullname" field.
func (u *ManagedUserUpsertBulk) ClearFullname() *ManagedUserUpsertBulk {
	return u.Update(func(s *ManagedUserUpsert) {
		s.ClearFullname()
	})
}

// SetLastPasswordChange sets the "last_password_change" field.
func (u *ManagedUserUpsertBulk) SetLastPasswordChange(v time.Time) *ManagedUserUpsertBulk {
	return u.Update(func(s *ManagedUserUpsert) {
		s.SetLastPasswordChange(v)
	})
}

// UpdateLastPasswordChange sets the "last_password_change" field to the value that was provided on create.
func (u *ManagedUserUpsertBulk) UpdateLastPasswordChange() *ManagedUserUpsertBulk {
	return u.Update(func(s *ManagedUserUpsert) {
		s.UpdateLastPasswordChange()
	})
}

// SetNonExpiryPassword sets the "non_expiry_password" field.
func (u *ManagedUserUpsertBulk) SetNonExpiryPassword(v bool) *ManagedUserUpsertBulk {
	return u.Update(func(s *ManagedUserUpsert) {
		s.SetNonExpiryPassword(v)
	})
}

// UpdateNonExpiryPassword sets the "non_expiry_password" field to the value that was provided on create.
func (u *ManagedUserUpsertBulk) UpdateNonExpiryPassword() *ManagedUserUpsertBulk {
	return u.Update(func(s *ManagedUserUpsert) {
		s.UpdateNonExpiryPassword()
	})
}

// SetPassword sets the "password" field.
func (u *ManagedUserUpsertBulk) SetPassword(v string) *ManagedUserUpsertBulk {
	return u.Update(func(s *ManagedUserUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *ManagedUserUpsertBulk) UpdatePassword() *ManagedUserUpsertBulk {
	return u.Update(func(s *ManagedUserUpsert) {
		s.UpdatePassword()
	})
}

// SetSuspended sets the "suspended" field.
func (u *ManagedUserUpsertBulk) SetSuspended(v bool) *ManagedUserUpsertBulk {
	return u.Update(func(s *ManagedUserUpsert) {
		s.SetSuspended(v)
	})
}

// UpdateSuspended sets the "suspended" field to the value that was provided on create.
func (u *ManagedUserUpsertBulk) UpdateSuspended() *ManagedUserUpsertBulk {
	return u.Update(func(s *ManagedUserUpsert) {
		s.UpdateSuspended()
	})
}

// SetUsername sets the "username" field.
func (u *ManagedUserUpsertBulk) SetUsername(v string) *ManagedUserUpsertBulk {
	return u.Update(func(s *ManagedUserUpsert) {
		s.SetUsername(v)
	})
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *ManagedUserUpsertBulk) UpdateUsername() *ManagedUserUpsertBulk {
	return u.Update(func(s *ManagedUserUpsert) {
		s.UpdateUsername()
	})
}

// ClearUsername clears the value of the "username" field.
func (u *ManagedUserUpsertBulk) ClearUsername() *ManagedUserUpsertBulk {
	return u.Update(func(s *ManagedUserUpsert) {
		s.ClearUsername()
	})
}

// Exec executes the query.
func (u *ManagedUserUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ManagedUserCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ManagedUserCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ManagedUserUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
