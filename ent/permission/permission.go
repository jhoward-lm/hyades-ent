// Code generated by ent, DO NOT EDIT.
// --------------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2025 The DependencyTrack Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// --------------------------------------------------------------------
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// --------------------------------------------------------------------

package permission

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the permission type in the database.
	Label = "permission"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeTeams holds the string denoting the teams edge name in mutations.
	EdgeTeams = "teams"
	// EdgeLdapUsers holds the string denoting the ldap_users edge name in mutations.
	EdgeLdapUsers = "ldap_users"
	// EdgeManagedUsers holds the string denoting the managed_users edge name in mutations.
	EdgeManagedUsers = "managed_users"
	// EdgeOidcUsers holds the string denoting the oidc_users edge name in mutations.
	EdgeOidcUsers = "oidc_users"
	// Table holds the table name of the permission in the database.
	Table = "PERMISSION"
	// TeamsTable is the table that holds the teams relation/edge. The primary key declared below.
	TeamsTable = "team_permissions"
	// TeamsInverseTable is the table name for the Team entity.
	// It exists in this package in order to avoid circular dependency with the "team" package.
	TeamsInverseTable = "TEAM"
	// LdapUsersTable is the table that holds the ldap_users relation/edge. The primary key declared below.
	LdapUsersTable = "ldap_user_permissions"
	// LdapUsersInverseTable is the table name for the LDAPUser entity.
	// It exists in this package in order to avoid circular dependency with the "ldapuser" package.
	LdapUsersInverseTable = "LDAPUSER"
	// ManagedUsersTable is the table that holds the managed_users relation/edge. The primary key declared below.
	ManagedUsersTable = "managed_user_permissions"
	// ManagedUsersInverseTable is the table name for the ManagedUser entity.
	// It exists in this package in order to avoid circular dependency with the "manageduser" package.
	ManagedUsersInverseTable = "MANAGEDUSER"
	// OidcUsersTable is the table that holds the oidc_users relation/edge. The primary key declared below.
	OidcUsersTable = "oidc_user_permissions"
	// OidcUsersInverseTable is the table name for the OIDCUser entity.
	// It exists in this package in order to avoid circular dependency with the "oidcuser" package.
	OidcUsersInverseTable = "OIDCUSER"
)

// Columns holds all SQL columns for permission fields.
var Columns = []string{
	FieldID,
	FieldDescription,
	FieldName,
}

var (
	// TeamsPrimaryKey and TeamsColumn2 are the table columns denoting the
	// primary key for the teams relation (M2M).
	TeamsPrimaryKey = []string{"team_id", "permission_id"}
	// LdapUsersPrimaryKey and LdapUsersColumn2 are the table columns denoting the
	// primary key for the ldap_users relation (M2M).
	LdapUsersPrimaryKey = []string{"ldap_user_id", "permission_id"}
	// ManagedUsersPrimaryKey and ManagedUsersColumn2 are the table columns denoting the
	// primary key for the managed_users relation (M2M).
	ManagedUsersPrimaryKey = []string{"managed_user_id", "permission_id"}
	// OidcUsersPrimaryKey and OidcUsersColumn2 are the table columns denoting the
	// primary key for the oidc_users relation (M2M).
	OidcUsersPrimaryKey = []string{"oidc_user_id", "permission_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Permission queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByTeamsCount orders the results by teams count.
func ByTeamsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTeamsStep(), opts...)
	}
}

// ByTeams orders the results by teams terms.
func ByTeams(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTeamsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByLdapUsersCount orders the results by ldap_users count.
func ByLdapUsersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLdapUsersStep(), opts...)
	}
}

// ByLdapUsers orders the results by ldap_users terms.
func ByLdapUsers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLdapUsersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByManagedUsersCount orders the results by managed_users count.
func ByManagedUsersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newManagedUsersStep(), opts...)
	}
}

// ByManagedUsers orders the results by managed_users terms.
func ByManagedUsers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newManagedUsersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOidcUsersCount orders the results by oidc_users count.
func ByOidcUsersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOidcUsersStep(), opts...)
	}
}

// ByOidcUsers orders the results by oidc_users terms.
func ByOidcUsers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOidcUsersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTeamsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TeamsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, TeamsTable, TeamsPrimaryKey...),
	)
}
func newLdapUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LdapUsersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, LdapUsersTable, LdapUsersPrimaryKey...),
	)
}
func newManagedUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ManagedUsersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ManagedUsersTable, ManagedUsersPrimaryKey...),
	)
}
func newOidcUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OidcUsersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, OidcUsersTable, OidcUsersPrimaryKey...),
	)
}
