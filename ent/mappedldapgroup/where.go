// Code generated by ent, DO NOT EDIT.
// --------------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2025 The DependencyTrack Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// --------------------------------------------------------------------
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// --------------------------------------------------------------------

package mappedldapgroup

import (
	"dependencytrack.io/hyades/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.MappedLDAPGroup {
	return predicate.MappedLDAPGroup(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.MappedLDAPGroup {
	return predicate.MappedLDAPGroup(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.MappedLDAPGroup {
	return predicate.MappedLDAPGroup(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.MappedLDAPGroup {
	return predicate.MappedLDAPGroup(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.MappedLDAPGroup {
	return predicate.MappedLDAPGroup(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.MappedLDAPGroup {
	return predicate.MappedLDAPGroup(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.MappedLDAPGroup {
	return predicate.MappedLDAPGroup(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.MappedLDAPGroup {
	return predicate.MappedLDAPGroup(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.MappedLDAPGroup {
	return predicate.MappedLDAPGroup(sql.FieldLTE(FieldID, id))
}

// UUID applies equality check predicate on the "uuid" field. It's identical to UUIDEQ.
func UUID(v uuid.UUID) predicate.MappedLDAPGroup {
	return predicate.MappedLDAPGroup(sql.FieldEQ(FieldUUID, v))
}

// Dn applies equality check predicate on the "dn" field. It's identical to DnEQ.
func Dn(v string) predicate.MappedLDAPGroup {
	return predicate.MappedLDAPGroup(sql.FieldEQ(FieldDn, v))
}

// TeamID applies equality check predicate on the "team_id" field. It's identical to TeamIDEQ.
func TeamID(v int) predicate.MappedLDAPGroup {
	return predicate.MappedLDAPGroup(sql.FieldEQ(FieldTeamID, v))
}

// UUIDEQ applies the EQ predicate on the "uuid" field.
func UUIDEQ(v uuid.UUID) predicate.MappedLDAPGroup {
	return predicate.MappedLDAPGroup(sql.FieldEQ(FieldUUID, v))
}

// UUIDNEQ applies the NEQ predicate on the "uuid" field.
func UUIDNEQ(v uuid.UUID) predicate.MappedLDAPGroup {
	return predicate.MappedLDAPGroup(sql.FieldNEQ(FieldUUID, v))
}

// UUIDIn applies the In predicate on the "uuid" field.
func UUIDIn(vs ...uuid.UUID) predicate.MappedLDAPGroup {
	return predicate.MappedLDAPGroup(sql.FieldIn(FieldUUID, vs...))
}

// UUIDNotIn applies the NotIn predicate on the "uuid" field.
func UUIDNotIn(vs ...uuid.UUID) predicate.MappedLDAPGroup {
	return predicate.MappedLDAPGroup(sql.FieldNotIn(FieldUUID, vs...))
}

// UUIDGT applies the GT predicate on the "uuid" field.
func UUIDGT(v uuid.UUID) predicate.MappedLDAPGroup {
	return predicate.MappedLDAPGroup(sql.FieldGT(FieldUUID, v))
}

// UUIDGTE applies the GTE predicate on the "uuid" field.
func UUIDGTE(v uuid.UUID) predicate.MappedLDAPGroup {
	return predicate.MappedLDAPGroup(sql.FieldGTE(FieldUUID, v))
}

// UUIDLT applies the LT predicate on the "uuid" field.
func UUIDLT(v uuid.UUID) predicate.MappedLDAPGroup {
	return predicate.MappedLDAPGroup(sql.FieldLT(FieldUUID, v))
}

// UUIDLTE applies the LTE predicate on the "uuid" field.
func UUIDLTE(v uuid.UUID) predicate.MappedLDAPGroup {
	return predicate.MappedLDAPGroup(sql.FieldLTE(FieldUUID, v))
}

// DnEQ applies the EQ predicate on the "dn" field.
func DnEQ(v string) predicate.MappedLDAPGroup {
	return predicate.MappedLDAPGroup(sql.FieldEQ(FieldDn, v))
}

// DnNEQ applies the NEQ predicate on the "dn" field.
func DnNEQ(v string) predicate.MappedLDAPGroup {
	return predicate.MappedLDAPGroup(sql.FieldNEQ(FieldDn, v))
}

// DnIn applies the In predicate on the "dn" field.
func DnIn(vs ...string) predicate.MappedLDAPGroup {
	return predicate.MappedLDAPGroup(sql.FieldIn(FieldDn, vs...))
}

// DnNotIn applies the NotIn predicate on the "dn" field.
func DnNotIn(vs ...string) predicate.MappedLDAPGroup {
	return predicate.MappedLDAPGroup(sql.FieldNotIn(FieldDn, vs...))
}

// DnGT applies the GT predicate on the "dn" field.
func DnGT(v string) predicate.MappedLDAPGroup {
	return predicate.MappedLDAPGroup(sql.FieldGT(FieldDn, v))
}

// DnGTE applies the GTE predicate on the "dn" field.
func DnGTE(v string) predicate.MappedLDAPGroup {
	return predicate.MappedLDAPGroup(sql.FieldGTE(FieldDn, v))
}

// DnLT applies the LT predicate on the "dn" field.
func DnLT(v string) predicate.MappedLDAPGroup {
	return predicate.MappedLDAPGroup(sql.FieldLT(FieldDn, v))
}

// DnLTE applies the LTE predicate on the "dn" field.
func DnLTE(v string) predicate.MappedLDAPGroup {
	return predicate.MappedLDAPGroup(sql.FieldLTE(FieldDn, v))
}

// DnContains applies the Contains predicate on the "dn" field.
func DnContains(v string) predicate.MappedLDAPGroup {
	return predicate.MappedLDAPGroup(sql.FieldContains(FieldDn, v))
}

// DnHasPrefix applies the HasPrefix predicate on the "dn" field.
func DnHasPrefix(v string) predicate.MappedLDAPGroup {
	return predicate.MappedLDAPGroup(sql.FieldHasPrefix(FieldDn, v))
}

// DnHasSuffix applies the HasSuffix predicate on the "dn" field.
func DnHasSuffix(v string) predicate.MappedLDAPGroup {
	return predicate.MappedLDAPGroup(sql.FieldHasSuffix(FieldDn, v))
}

// DnEqualFold applies the EqualFold predicate on the "dn" field.
func DnEqualFold(v string) predicate.MappedLDAPGroup {
	return predicate.MappedLDAPGroup(sql.FieldEqualFold(FieldDn, v))
}

// DnContainsFold applies the ContainsFold predicate on the "dn" field.
func DnContainsFold(v string) predicate.MappedLDAPGroup {
	return predicate.MappedLDAPGroup(sql.FieldContainsFold(FieldDn, v))
}

// TeamIDEQ applies the EQ predicate on the "team_id" field.
func TeamIDEQ(v int) predicate.MappedLDAPGroup {
	return predicate.MappedLDAPGroup(sql.FieldEQ(FieldTeamID, v))
}

// TeamIDNEQ applies the NEQ predicate on the "team_id" field.
func TeamIDNEQ(v int) predicate.MappedLDAPGroup {
	return predicate.MappedLDAPGroup(sql.FieldNEQ(FieldTeamID, v))
}

// TeamIDIn applies the In predicate on the "team_id" field.
func TeamIDIn(vs ...int) predicate.MappedLDAPGroup {
	return predicate.MappedLDAPGroup(sql.FieldIn(FieldTeamID, vs...))
}

// TeamIDNotIn applies the NotIn predicate on the "team_id" field.
func TeamIDNotIn(vs ...int) predicate.MappedLDAPGroup {
	return predicate.MappedLDAPGroup(sql.FieldNotIn(FieldTeamID, vs...))
}

// TeamIDIsNil applies the IsNil predicate on the "team_id" field.
func TeamIDIsNil() predicate.MappedLDAPGroup {
	return predicate.MappedLDAPGroup(sql.FieldIsNull(FieldTeamID))
}

// TeamIDNotNil applies the NotNil predicate on the "team_id" field.
func TeamIDNotNil() predicate.MappedLDAPGroup {
	return predicate.MappedLDAPGroup(sql.FieldNotNull(FieldTeamID))
}

// HasTeam applies the HasEdge predicate on the "team" edge.
func HasTeam() predicate.MappedLDAPGroup {
	return predicate.MappedLDAPGroup(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TeamTable, TeamColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTeamWith applies the HasEdge predicate on the "team" edge with a given conditions (other predicates).
func HasTeamWith(preds ...predicate.Team) predicate.MappedLDAPGroup {
	return predicate.MappedLDAPGroup(func(s *sql.Selector) {
		step := newTeamStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MappedLDAPGroup) predicate.MappedLDAPGroup {
	return predicate.MappedLDAPGroup(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MappedLDAPGroup) predicate.MappedLDAPGroup {
	return predicate.MappedLDAPGroup(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MappedLDAPGroup) predicate.MappedLDAPGroup {
	return predicate.MappedLDAPGroup(sql.NotPredicates(p))
}
