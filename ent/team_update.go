// Code generated by ent, DO NOT EDIT.
// --------------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2025 The DependencyTrack Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// --------------------------------------------------------------------
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// --------------------------------------------------------------------

package ent

import (
	"context"
	"errors"
	"fmt"

	"dependencytrack.io/hyades/ent/apikey"
	"dependencytrack.io/hyades/ent/ldapuser"
	"dependencytrack.io/hyades/ent/manageduser"
	"dependencytrack.io/hyades/ent/mappedldapgroup"
	"dependencytrack.io/hyades/ent/mappedoidcgroup"
	"dependencytrack.io/hyades/ent/oidcgroup"
	"dependencytrack.io/hyades/ent/oidcuser"
	"dependencytrack.io/hyades/ent/permission"
	"dependencytrack.io/hyades/ent/predicate"
	"dependencytrack.io/hyades/ent/team"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TeamUpdate is the builder for updating Team entities.
type TeamUpdate struct {
	config
	hooks    []Hook
	mutation *TeamMutation
}

// Where appends a list predicates to the TeamUpdate builder.
func (tu *TeamUpdate) Where(ps ...predicate.Team) *TeamUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetName sets the "name" field.
func (tu *TeamUpdate) SetName(s string) *TeamUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tu *TeamUpdate) SetNillableName(s *string) *TeamUpdate {
	if s != nil {
		tu.SetName(*s)
	}
	return tu
}

// AddAPIKeyIDs adds the "api_keys" edge to the APIKey entity by IDs.
func (tu *TeamUpdate) AddAPIKeyIDs(ids ...int) *TeamUpdate {
	tu.mutation.AddAPIKeyIDs(ids...)
	return tu
}

// AddAPIKeys adds the "api_keys" edges to the APIKey entity.
func (tu *TeamUpdate) AddAPIKeys(a ...*APIKey) *TeamUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tu.AddAPIKeyIDs(ids...)
}

// AddPermissionIDs adds the "permissions" edge to the Permission entity by IDs.
func (tu *TeamUpdate) AddPermissionIDs(ids ...int) *TeamUpdate {
	tu.mutation.AddPermissionIDs(ids...)
	return tu
}

// AddPermissions adds the "permissions" edges to the Permission entity.
func (tu *TeamUpdate) AddPermissions(p ...*Permission) *TeamUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tu.AddPermissionIDs(ids...)
}

// AddOidcGroupIDs adds the "oidc_groups" edge to the OIDCGroup entity by IDs.
func (tu *TeamUpdate) AddOidcGroupIDs(ids ...int) *TeamUpdate {
	tu.mutation.AddOidcGroupIDs(ids...)
	return tu
}

// AddOidcGroups adds the "oidc_groups" edges to the OIDCGroup entity.
func (tu *TeamUpdate) AddOidcGroups(o ...*OIDCGroup) *TeamUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return tu.AddOidcGroupIDs(ids...)
}

// AddMappedLdapGroupIDs adds the "mapped_ldap_groups" edge to the MappedLDAPGroup entity by IDs.
func (tu *TeamUpdate) AddMappedLdapGroupIDs(ids ...int) *TeamUpdate {
	tu.mutation.AddMappedLdapGroupIDs(ids...)
	return tu
}

// AddMappedLdapGroups adds the "mapped_ldap_groups" edges to the MappedLDAPGroup entity.
func (tu *TeamUpdate) AddMappedLdapGroups(m ...*MappedLDAPGroup) *TeamUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tu.AddMappedLdapGroupIDs(ids...)
}

// AddMappedOidcGroupIDs adds the "mapped_oidc_groups" edge to the MappedOIDCGroup entity by IDs.
func (tu *TeamUpdate) AddMappedOidcGroupIDs(ids ...int) *TeamUpdate {
	tu.mutation.AddMappedOidcGroupIDs(ids...)
	return tu
}

// AddMappedOidcGroups adds the "mapped_oidc_groups" edges to the MappedOIDCGroup entity.
func (tu *TeamUpdate) AddMappedOidcGroups(m ...*MappedOIDCGroup) *TeamUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tu.AddMappedOidcGroupIDs(ids...)
}

// AddLdapUserIDs adds the "ldap_users" edge to the LDAPUser entity by IDs.
func (tu *TeamUpdate) AddLdapUserIDs(ids ...int) *TeamUpdate {
	tu.mutation.AddLdapUserIDs(ids...)
	return tu
}

// AddLdapUsers adds the "ldap_users" edges to the LDAPUser entity.
func (tu *TeamUpdate) AddLdapUsers(l ...*LDAPUser) *TeamUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return tu.AddLdapUserIDs(ids...)
}

// AddManagedUserIDs adds the "managed_users" edge to the ManagedUser entity by IDs.
func (tu *TeamUpdate) AddManagedUserIDs(ids ...int) *TeamUpdate {
	tu.mutation.AddManagedUserIDs(ids...)
	return tu
}

// AddManagedUsers adds the "managed_users" edges to the ManagedUser entity.
func (tu *TeamUpdate) AddManagedUsers(m ...*ManagedUser) *TeamUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tu.AddManagedUserIDs(ids...)
}

// AddOidcUserIDs adds the "oidc_users" edge to the OIDCUser entity by IDs.
func (tu *TeamUpdate) AddOidcUserIDs(ids ...int) *TeamUpdate {
	tu.mutation.AddOidcUserIDs(ids...)
	return tu
}

// AddOidcUsers adds the "oidc_users" edges to the OIDCUser entity.
func (tu *TeamUpdate) AddOidcUsers(o ...*OIDCUser) *TeamUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return tu.AddOidcUserIDs(ids...)
}

// Mutation returns the TeamMutation object of the builder.
func (tu *TeamUpdate) Mutation() *TeamMutation {
	return tu.mutation
}

// ClearAPIKeys clears all "api_keys" edges to the APIKey entity.
func (tu *TeamUpdate) ClearAPIKeys() *TeamUpdate {
	tu.mutation.ClearAPIKeys()
	return tu
}

// RemoveAPIKeyIDs removes the "api_keys" edge to APIKey entities by IDs.
func (tu *TeamUpdate) RemoveAPIKeyIDs(ids ...int) *TeamUpdate {
	tu.mutation.RemoveAPIKeyIDs(ids...)
	return tu
}

// RemoveAPIKeys removes "api_keys" edges to APIKey entities.
func (tu *TeamUpdate) RemoveAPIKeys(a ...*APIKey) *TeamUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tu.RemoveAPIKeyIDs(ids...)
}

// ClearPermissions clears all "permissions" edges to the Permission entity.
func (tu *TeamUpdate) ClearPermissions() *TeamUpdate {
	tu.mutation.ClearPermissions()
	return tu
}

// RemovePermissionIDs removes the "permissions" edge to Permission entities by IDs.
func (tu *TeamUpdate) RemovePermissionIDs(ids ...int) *TeamUpdate {
	tu.mutation.RemovePermissionIDs(ids...)
	return tu
}

// RemovePermissions removes "permissions" edges to Permission entities.
func (tu *TeamUpdate) RemovePermissions(p ...*Permission) *TeamUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tu.RemovePermissionIDs(ids...)
}

// ClearOidcGroups clears all "oidc_groups" edges to the OIDCGroup entity.
func (tu *TeamUpdate) ClearOidcGroups() *TeamUpdate {
	tu.mutation.ClearOidcGroups()
	return tu
}

// RemoveOidcGroupIDs removes the "oidc_groups" edge to OIDCGroup entities by IDs.
func (tu *TeamUpdate) RemoveOidcGroupIDs(ids ...int) *TeamUpdate {
	tu.mutation.RemoveOidcGroupIDs(ids...)
	return tu
}

// RemoveOidcGroups removes "oidc_groups" edges to OIDCGroup entities.
func (tu *TeamUpdate) RemoveOidcGroups(o ...*OIDCGroup) *TeamUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return tu.RemoveOidcGroupIDs(ids...)
}

// ClearMappedLdapGroups clears all "mapped_ldap_groups" edges to the MappedLDAPGroup entity.
func (tu *TeamUpdate) ClearMappedLdapGroups() *TeamUpdate {
	tu.mutation.ClearMappedLdapGroups()
	return tu
}

// RemoveMappedLdapGroupIDs removes the "mapped_ldap_groups" edge to MappedLDAPGroup entities by IDs.
func (tu *TeamUpdate) RemoveMappedLdapGroupIDs(ids ...int) *TeamUpdate {
	tu.mutation.RemoveMappedLdapGroupIDs(ids...)
	return tu
}

// RemoveMappedLdapGroups removes "mapped_ldap_groups" edges to MappedLDAPGroup entities.
func (tu *TeamUpdate) RemoveMappedLdapGroups(m ...*MappedLDAPGroup) *TeamUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tu.RemoveMappedLdapGroupIDs(ids...)
}

// ClearMappedOidcGroups clears all "mapped_oidc_groups" edges to the MappedOIDCGroup entity.
func (tu *TeamUpdate) ClearMappedOidcGroups() *TeamUpdate {
	tu.mutation.ClearMappedOidcGroups()
	return tu
}

// RemoveMappedOidcGroupIDs removes the "mapped_oidc_groups" edge to MappedOIDCGroup entities by IDs.
func (tu *TeamUpdate) RemoveMappedOidcGroupIDs(ids ...int) *TeamUpdate {
	tu.mutation.RemoveMappedOidcGroupIDs(ids...)
	return tu
}

// RemoveMappedOidcGroups removes "mapped_oidc_groups" edges to MappedOIDCGroup entities.
func (tu *TeamUpdate) RemoveMappedOidcGroups(m ...*MappedOIDCGroup) *TeamUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tu.RemoveMappedOidcGroupIDs(ids...)
}

// ClearLdapUsers clears all "ldap_users" edges to the LDAPUser entity.
func (tu *TeamUpdate) ClearLdapUsers() *TeamUpdate {
	tu.mutation.ClearLdapUsers()
	return tu
}

// RemoveLdapUserIDs removes the "ldap_users" edge to LDAPUser entities by IDs.
func (tu *TeamUpdate) RemoveLdapUserIDs(ids ...int) *TeamUpdate {
	tu.mutation.RemoveLdapUserIDs(ids...)
	return tu
}

// RemoveLdapUsers removes "ldap_users" edges to LDAPUser entities.
func (tu *TeamUpdate) RemoveLdapUsers(l ...*LDAPUser) *TeamUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return tu.RemoveLdapUserIDs(ids...)
}

// ClearManagedUsers clears all "managed_users" edges to the ManagedUser entity.
func (tu *TeamUpdate) ClearManagedUsers() *TeamUpdate {
	tu.mutation.ClearManagedUsers()
	return tu
}

// RemoveManagedUserIDs removes the "managed_users" edge to ManagedUser entities by IDs.
func (tu *TeamUpdate) RemoveManagedUserIDs(ids ...int) *TeamUpdate {
	tu.mutation.RemoveManagedUserIDs(ids...)
	return tu
}

// RemoveManagedUsers removes "managed_users" edges to ManagedUser entities.
func (tu *TeamUpdate) RemoveManagedUsers(m ...*ManagedUser) *TeamUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tu.RemoveManagedUserIDs(ids...)
}

// ClearOidcUsers clears all "oidc_users" edges to the OIDCUser entity.
func (tu *TeamUpdate) ClearOidcUsers() *TeamUpdate {
	tu.mutation.ClearOidcUsers()
	return tu
}

// RemoveOidcUserIDs removes the "oidc_users" edge to OIDCUser entities by IDs.
func (tu *TeamUpdate) RemoveOidcUserIDs(ids ...int) *TeamUpdate {
	tu.mutation.RemoveOidcUserIDs(ids...)
	return tu
}

// RemoveOidcUsers removes "oidc_users" edges to OIDCUser entities.
func (tu *TeamUpdate) RemoveOidcUsers(o ...*OIDCUser) *TeamUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return tu.RemoveOidcUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TeamUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TeamUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TeamUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TeamUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TeamUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(team.Table, team.Columns, sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.SetField(team.FieldName, field.TypeString, value)
	}
	if tu.mutation.APIKeysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   team.APIKeysTable,
			Columns: team.APIKeysPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedAPIKeysIDs(); len(nodes) > 0 && !tu.mutation.APIKeysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   team.APIKeysTable,
			Columns: team.APIKeysPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.APIKeysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   team.APIKeysTable,
			Columns: team.APIKeysPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   team.PermissionsTable,
			Columns: team.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedPermissionsIDs(); len(nodes) > 0 && !tu.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   team.PermissionsTable,
			Columns: team.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.PermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   team.PermissionsTable,
			Columns: team.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.OidcGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   team.OidcGroupsTable,
			Columns: team.OidcGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oidcgroup.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedOidcGroupsIDs(); len(nodes) > 0 && !tu.mutation.OidcGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   team.OidcGroupsTable,
			Columns: team.OidcGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oidcgroup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.OidcGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   team.OidcGroupsTable,
			Columns: team.OidcGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oidcgroup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.MappedLdapGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.MappedLdapGroupsTable,
			Columns: []string{team.MappedLdapGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedldapgroup.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedMappedLdapGroupsIDs(); len(nodes) > 0 && !tu.mutation.MappedLdapGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.MappedLdapGroupsTable,
			Columns: []string{team.MappedLdapGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedldapgroup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.MappedLdapGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.MappedLdapGroupsTable,
			Columns: []string{team.MappedLdapGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedldapgroup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.MappedOidcGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.MappedOidcGroupsTable,
			Columns: []string{team.MappedOidcGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedoidcgroup.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedMappedOidcGroupsIDs(); len(nodes) > 0 && !tu.mutation.MappedOidcGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.MappedOidcGroupsTable,
			Columns: []string{team.MappedOidcGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedoidcgroup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.MappedOidcGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.MappedOidcGroupsTable,
			Columns: []string{team.MappedOidcGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedoidcgroup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.LdapUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   team.LdapUsersTable,
			Columns: team.LdapUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ldapuser.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedLdapUsersIDs(); len(nodes) > 0 && !tu.mutation.LdapUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   team.LdapUsersTable,
			Columns: team.LdapUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ldapuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.LdapUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   team.LdapUsersTable,
			Columns: team.LdapUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ldapuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.ManagedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   team.ManagedUsersTable,
			Columns: team.ManagedUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manageduser.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedManagedUsersIDs(); len(nodes) > 0 && !tu.mutation.ManagedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   team.ManagedUsersTable,
			Columns: team.ManagedUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manageduser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ManagedUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   team.ManagedUsersTable,
			Columns: team.ManagedUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manageduser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.OidcUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   team.OidcUsersTable,
			Columns: team.OidcUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oidcuser.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedOidcUsersIDs(); len(nodes) > 0 && !tu.mutation.OidcUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   team.OidcUsersTable,
			Columns: team.OidcUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oidcuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.OidcUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   team.OidcUsersTable,
			Columns: team.OidcUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oidcuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{team.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TeamUpdateOne is the builder for updating a single Team entity.
type TeamUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TeamMutation
}

// SetName sets the "name" field.
func (tuo *TeamUpdateOne) SetName(s string) *TeamUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tuo *TeamUpdateOne) SetNillableName(s *string) *TeamUpdateOne {
	if s != nil {
		tuo.SetName(*s)
	}
	return tuo
}

// AddAPIKeyIDs adds the "api_keys" edge to the APIKey entity by IDs.
func (tuo *TeamUpdateOne) AddAPIKeyIDs(ids ...int) *TeamUpdateOne {
	tuo.mutation.AddAPIKeyIDs(ids...)
	return tuo
}

// AddAPIKeys adds the "api_keys" edges to the APIKey entity.
func (tuo *TeamUpdateOne) AddAPIKeys(a ...*APIKey) *TeamUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tuo.AddAPIKeyIDs(ids...)
}

// AddPermissionIDs adds the "permissions" edge to the Permission entity by IDs.
func (tuo *TeamUpdateOne) AddPermissionIDs(ids ...int) *TeamUpdateOne {
	tuo.mutation.AddPermissionIDs(ids...)
	return tuo
}

// AddPermissions adds the "permissions" edges to the Permission entity.
func (tuo *TeamUpdateOne) AddPermissions(p ...*Permission) *TeamUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tuo.AddPermissionIDs(ids...)
}

// AddOidcGroupIDs adds the "oidc_groups" edge to the OIDCGroup entity by IDs.
func (tuo *TeamUpdateOne) AddOidcGroupIDs(ids ...int) *TeamUpdateOne {
	tuo.mutation.AddOidcGroupIDs(ids...)
	return tuo
}

// AddOidcGroups adds the "oidc_groups" edges to the OIDCGroup entity.
func (tuo *TeamUpdateOne) AddOidcGroups(o ...*OIDCGroup) *TeamUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return tuo.AddOidcGroupIDs(ids...)
}

// AddMappedLdapGroupIDs adds the "mapped_ldap_groups" edge to the MappedLDAPGroup entity by IDs.
func (tuo *TeamUpdateOne) AddMappedLdapGroupIDs(ids ...int) *TeamUpdateOne {
	tuo.mutation.AddMappedLdapGroupIDs(ids...)
	return tuo
}

// AddMappedLdapGroups adds the "mapped_ldap_groups" edges to the MappedLDAPGroup entity.
func (tuo *TeamUpdateOne) AddMappedLdapGroups(m ...*MappedLDAPGroup) *TeamUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tuo.AddMappedLdapGroupIDs(ids...)
}

// AddMappedOidcGroupIDs adds the "mapped_oidc_groups" edge to the MappedOIDCGroup entity by IDs.
func (tuo *TeamUpdateOne) AddMappedOidcGroupIDs(ids ...int) *TeamUpdateOne {
	tuo.mutation.AddMappedOidcGroupIDs(ids...)
	return tuo
}

// AddMappedOidcGroups adds the "mapped_oidc_groups" edges to the MappedOIDCGroup entity.
func (tuo *TeamUpdateOne) AddMappedOidcGroups(m ...*MappedOIDCGroup) *TeamUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tuo.AddMappedOidcGroupIDs(ids...)
}

// AddLdapUserIDs adds the "ldap_users" edge to the LDAPUser entity by IDs.
func (tuo *TeamUpdateOne) AddLdapUserIDs(ids ...int) *TeamUpdateOne {
	tuo.mutation.AddLdapUserIDs(ids...)
	return tuo
}

// AddLdapUsers adds the "ldap_users" edges to the LDAPUser entity.
func (tuo *TeamUpdateOne) AddLdapUsers(l ...*LDAPUser) *TeamUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return tuo.AddLdapUserIDs(ids...)
}

// AddManagedUserIDs adds the "managed_users" edge to the ManagedUser entity by IDs.
func (tuo *TeamUpdateOne) AddManagedUserIDs(ids ...int) *TeamUpdateOne {
	tuo.mutation.AddManagedUserIDs(ids...)
	return tuo
}

// AddManagedUsers adds the "managed_users" edges to the ManagedUser entity.
func (tuo *TeamUpdateOne) AddManagedUsers(m ...*ManagedUser) *TeamUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tuo.AddManagedUserIDs(ids...)
}

// AddOidcUserIDs adds the "oidc_users" edge to the OIDCUser entity by IDs.
func (tuo *TeamUpdateOne) AddOidcUserIDs(ids ...int) *TeamUpdateOne {
	tuo.mutation.AddOidcUserIDs(ids...)
	return tuo
}

// AddOidcUsers adds the "oidc_users" edges to the OIDCUser entity.
func (tuo *TeamUpdateOne) AddOidcUsers(o ...*OIDCUser) *TeamUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return tuo.AddOidcUserIDs(ids...)
}

// Mutation returns the TeamMutation object of the builder.
func (tuo *TeamUpdateOne) Mutation() *TeamMutation {
	return tuo.mutation
}

// ClearAPIKeys clears all "api_keys" edges to the APIKey entity.
func (tuo *TeamUpdateOne) ClearAPIKeys() *TeamUpdateOne {
	tuo.mutation.ClearAPIKeys()
	return tuo
}

// RemoveAPIKeyIDs removes the "api_keys" edge to APIKey entities by IDs.
func (tuo *TeamUpdateOne) RemoveAPIKeyIDs(ids ...int) *TeamUpdateOne {
	tuo.mutation.RemoveAPIKeyIDs(ids...)
	return tuo
}

// RemoveAPIKeys removes "api_keys" edges to APIKey entities.
func (tuo *TeamUpdateOne) RemoveAPIKeys(a ...*APIKey) *TeamUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tuo.RemoveAPIKeyIDs(ids...)
}

// ClearPermissions clears all "permissions" edges to the Permission entity.
func (tuo *TeamUpdateOne) ClearPermissions() *TeamUpdateOne {
	tuo.mutation.ClearPermissions()
	return tuo
}

// RemovePermissionIDs removes the "permissions" edge to Permission entities by IDs.
func (tuo *TeamUpdateOne) RemovePermissionIDs(ids ...int) *TeamUpdateOne {
	tuo.mutation.RemovePermissionIDs(ids...)
	return tuo
}

// RemovePermissions removes "permissions" edges to Permission entities.
func (tuo *TeamUpdateOne) RemovePermissions(p ...*Permission) *TeamUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tuo.RemovePermissionIDs(ids...)
}

// ClearOidcGroups clears all "oidc_groups" edges to the OIDCGroup entity.
func (tuo *TeamUpdateOne) ClearOidcGroups() *TeamUpdateOne {
	tuo.mutation.ClearOidcGroups()
	return tuo
}

// RemoveOidcGroupIDs removes the "oidc_groups" edge to OIDCGroup entities by IDs.
func (tuo *TeamUpdateOne) RemoveOidcGroupIDs(ids ...int) *TeamUpdateOne {
	tuo.mutation.RemoveOidcGroupIDs(ids...)
	return tuo
}

// RemoveOidcGroups removes "oidc_groups" edges to OIDCGroup entities.
func (tuo *TeamUpdateOne) RemoveOidcGroups(o ...*OIDCGroup) *TeamUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return tuo.RemoveOidcGroupIDs(ids...)
}

// ClearMappedLdapGroups clears all "mapped_ldap_groups" edges to the MappedLDAPGroup entity.
func (tuo *TeamUpdateOne) ClearMappedLdapGroups() *TeamUpdateOne {
	tuo.mutation.ClearMappedLdapGroups()
	return tuo
}

// RemoveMappedLdapGroupIDs removes the "mapped_ldap_groups" edge to MappedLDAPGroup entities by IDs.
func (tuo *TeamUpdateOne) RemoveMappedLdapGroupIDs(ids ...int) *TeamUpdateOne {
	tuo.mutation.RemoveMappedLdapGroupIDs(ids...)
	return tuo
}

// RemoveMappedLdapGroups removes "mapped_ldap_groups" edges to MappedLDAPGroup entities.
func (tuo *TeamUpdateOne) RemoveMappedLdapGroups(m ...*MappedLDAPGroup) *TeamUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tuo.RemoveMappedLdapGroupIDs(ids...)
}

// ClearMappedOidcGroups clears all "mapped_oidc_groups" edges to the MappedOIDCGroup entity.
func (tuo *TeamUpdateOne) ClearMappedOidcGroups() *TeamUpdateOne {
	tuo.mutation.ClearMappedOidcGroups()
	return tuo
}

// RemoveMappedOidcGroupIDs removes the "mapped_oidc_groups" edge to MappedOIDCGroup entities by IDs.
func (tuo *TeamUpdateOne) RemoveMappedOidcGroupIDs(ids ...int) *TeamUpdateOne {
	tuo.mutation.RemoveMappedOidcGroupIDs(ids...)
	return tuo
}

// RemoveMappedOidcGroups removes "mapped_oidc_groups" edges to MappedOIDCGroup entities.
func (tuo *TeamUpdateOne) RemoveMappedOidcGroups(m ...*MappedOIDCGroup) *TeamUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tuo.RemoveMappedOidcGroupIDs(ids...)
}

// ClearLdapUsers clears all "ldap_users" edges to the LDAPUser entity.
func (tuo *TeamUpdateOne) ClearLdapUsers() *TeamUpdateOne {
	tuo.mutation.ClearLdapUsers()
	return tuo
}

// RemoveLdapUserIDs removes the "ldap_users" edge to LDAPUser entities by IDs.
func (tuo *TeamUpdateOne) RemoveLdapUserIDs(ids ...int) *TeamUpdateOne {
	tuo.mutation.RemoveLdapUserIDs(ids...)
	return tuo
}

// RemoveLdapUsers removes "ldap_users" edges to LDAPUser entities.
func (tuo *TeamUpdateOne) RemoveLdapUsers(l ...*LDAPUser) *TeamUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return tuo.RemoveLdapUserIDs(ids...)
}

// ClearManagedUsers clears all "managed_users" edges to the ManagedUser entity.
func (tuo *TeamUpdateOne) ClearManagedUsers() *TeamUpdateOne {
	tuo.mutation.ClearManagedUsers()
	return tuo
}

// RemoveManagedUserIDs removes the "managed_users" edge to ManagedUser entities by IDs.
func (tuo *TeamUpdateOne) RemoveManagedUserIDs(ids ...int) *TeamUpdateOne {
	tuo.mutation.RemoveManagedUserIDs(ids...)
	return tuo
}

// RemoveManagedUsers removes "managed_users" edges to ManagedUser entities.
func (tuo *TeamUpdateOne) RemoveManagedUsers(m ...*ManagedUser) *TeamUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tuo.RemoveManagedUserIDs(ids...)
}

// ClearOidcUsers clears all "oidc_users" edges to the OIDCUser entity.
func (tuo *TeamUpdateOne) ClearOidcUsers() *TeamUpdateOne {
	tuo.mutation.ClearOidcUsers()
	return tuo
}

// RemoveOidcUserIDs removes the "oidc_users" edge to OIDCUser entities by IDs.
func (tuo *TeamUpdateOne) RemoveOidcUserIDs(ids ...int) *TeamUpdateOne {
	tuo.mutation.RemoveOidcUserIDs(ids...)
	return tuo
}

// RemoveOidcUsers removes "oidc_users" edges to OIDCUser entities.
func (tuo *TeamUpdateOne) RemoveOidcUsers(o ...*OIDCUser) *TeamUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return tuo.RemoveOidcUserIDs(ids...)
}

// Where appends a list predicates to the TeamUpdate builder.
func (tuo *TeamUpdateOne) Where(ps ...predicate.Team) *TeamUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TeamUpdateOne) Select(field string, fields ...string) *TeamUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Team entity.
func (tuo *TeamUpdateOne) Save(ctx context.Context) (*Team, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TeamUpdateOne) SaveX(ctx context.Context) *Team {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TeamUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TeamUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TeamUpdateOne) sqlSave(ctx context.Context) (_node *Team, err error) {
	_spec := sqlgraph.NewUpdateSpec(team.Table, team.Columns, sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Team.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, team.FieldID)
		for _, f := range fields {
			if !team.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != team.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.SetField(team.FieldName, field.TypeString, value)
	}
	if tuo.mutation.APIKeysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   team.APIKeysTable,
			Columns: team.APIKeysPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedAPIKeysIDs(); len(nodes) > 0 && !tuo.mutation.APIKeysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   team.APIKeysTable,
			Columns: team.APIKeysPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.APIKeysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   team.APIKeysTable,
			Columns: team.APIKeysPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   team.PermissionsTable,
			Columns: team.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedPermissionsIDs(); len(nodes) > 0 && !tuo.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   team.PermissionsTable,
			Columns: team.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.PermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   team.PermissionsTable,
			Columns: team.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.OidcGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   team.OidcGroupsTable,
			Columns: team.OidcGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oidcgroup.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedOidcGroupsIDs(); len(nodes) > 0 && !tuo.mutation.OidcGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   team.OidcGroupsTable,
			Columns: team.OidcGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oidcgroup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.OidcGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   team.OidcGroupsTable,
			Columns: team.OidcGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oidcgroup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.MappedLdapGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.MappedLdapGroupsTable,
			Columns: []string{team.MappedLdapGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedldapgroup.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedMappedLdapGroupsIDs(); len(nodes) > 0 && !tuo.mutation.MappedLdapGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.MappedLdapGroupsTable,
			Columns: []string{team.MappedLdapGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedldapgroup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.MappedLdapGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.MappedLdapGroupsTable,
			Columns: []string{team.MappedLdapGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedldapgroup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.MappedOidcGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.MappedOidcGroupsTable,
			Columns: []string{team.MappedOidcGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedoidcgroup.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedMappedOidcGroupsIDs(); len(nodes) > 0 && !tuo.mutation.MappedOidcGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.MappedOidcGroupsTable,
			Columns: []string{team.MappedOidcGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedoidcgroup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.MappedOidcGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.MappedOidcGroupsTable,
			Columns: []string{team.MappedOidcGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedoidcgroup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.LdapUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   team.LdapUsersTable,
			Columns: team.LdapUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ldapuser.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedLdapUsersIDs(); len(nodes) > 0 && !tuo.mutation.LdapUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   team.LdapUsersTable,
			Columns: team.LdapUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ldapuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.LdapUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   team.LdapUsersTable,
			Columns: team.LdapUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ldapuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.ManagedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   team.ManagedUsersTable,
			Columns: team.ManagedUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manageduser.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedManagedUsersIDs(); len(nodes) > 0 && !tuo.mutation.ManagedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   team.ManagedUsersTable,
			Columns: team.ManagedUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manageduser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ManagedUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   team.ManagedUsersTable,
			Columns: team.ManagedUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manageduser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.OidcUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   team.OidcUsersTable,
			Columns: team.OidcUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oidcuser.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedOidcUsersIDs(); len(nodes) > 0 && !tuo.mutation.OidcUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   team.OidcUsersTable,
			Columns: team.OidcUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oidcuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.OidcUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   team.OidcUsersTable,
			Columns: team.OidcUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oidcuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Team{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{team.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
