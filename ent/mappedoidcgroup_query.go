// Code generated by ent, DO NOT EDIT.
// --------------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2025 The DependencyTrack Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// --------------------------------------------------------------------
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// --------------------------------------------------------------------

package ent

import (
	"context"
	"fmt"
	"math"

	"dependencytrack.io/hyades/ent/mappedoidcgroup"
	"dependencytrack.io/hyades/ent/oidcgroup"
	"dependencytrack.io/hyades/ent/predicate"
	"dependencytrack.io/hyades/ent/team"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MappedOIDCGroupQuery is the builder for querying MappedOIDCGroup entities.
type MappedOIDCGroupQuery struct {
	config
	ctx           *QueryContext
	order         []mappedoidcgroup.OrderOption
	inters        []Interceptor
	predicates    []predicate.MappedOIDCGroup
	withOidcGroup *OIDCGroupQuery
	withTeam      *TeamQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the MappedOIDCGroupQuery builder.
func (mogq *MappedOIDCGroupQuery) Where(ps ...predicate.MappedOIDCGroup) *MappedOIDCGroupQuery {
	mogq.predicates = append(mogq.predicates, ps...)
	return mogq
}

// Limit the number of records to be returned by this query.
func (mogq *MappedOIDCGroupQuery) Limit(limit int) *MappedOIDCGroupQuery {
	mogq.ctx.Limit = &limit
	return mogq
}

// Offset to start from.
func (mogq *MappedOIDCGroupQuery) Offset(offset int) *MappedOIDCGroupQuery {
	mogq.ctx.Offset = &offset
	return mogq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (mogq *MappedOIDCGroupQuery) Unique(unique bool) *MappedOIDCGroupQuery {
	mogq.ctx.Unique = &unique
	return mogq
}

// Order specifies how the records should be ordered.
func (mogq *MappedOIDCGroupQuery) Order(o ...mappedoidcgroup.OrderOption) *MappedOIDCGroupQuery {
	mogq.order = append(mogq.order, o...)
	return mogq
}

// QueryOidcGroup chains the current query on the "oidc_group" edge.
func (mogq *MappedOIDCGroupQuery) QueryOidcGroup() *OIDCGroupQuery {
	query := (&OIDCGroupClient{config: mogq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mogq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mogq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(mappedoidcgroup.Table, mappedoidcgroup.FieldID, selector),
			sqlgraph.To(oidcgroup.Table, oidcgroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, mappedoidcgroup.OidcGroupTable, mappedoidcgroup.OidcGroupColumn),
		)
		fromU = sqlgraph.SetNeighbors(mogq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTeam chains the current query on the "team" edge.
func (mogq *MappedOIDCGroupQuery) QueryTeam() *TeamQuery {
	query := (&TeamClient{config: mogq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mogq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mogq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(mappedoidcgroup.Table, mappedoidcgroup.FieldID, selector),
			sqlgraph.To(team.Table, team.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, mappedoidcgroup.TeamTable, mappedoidcgroup.TeamColumn),
		)
		fromU = sqlgraph.SetNeighbors(mogq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first MappedOIDCGroup entity from the query.
// Returns a *NotFoundError when no MappedOIDCGroup was found.
func (mogq *MappedOIDCGroupQuery) First(ctx context.Context) (*MappedOIDCGroup, error) {
	nodes, err := mogq.Limit(1).All(setContextOp(ctx, mogq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{mappedoidcgroup.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (mogq *MappedOIDCGroupQuery) FirstX(ctx context.Context) *MappedOIDCGroup {
	node, err := mogq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first MappedOIDCGroup ID from the query.
// Returns a *NotFoundError when no MappedOIDCGroup ID was found.
func (mogq *MappedOIDCGroupQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = mogq.Limit(1).IDs(setContextOp(ctx, mogq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{mappedoidcgroup.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (mogq *MappedOIDCGroupQuery) FirstIDX(ctx context.Context) int {
	id, err := mogq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single MappedOIDCGroup entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one MappedOIDCGroup entity is found.
// Returns a *NotFoundError when no MappedOIDCGroup entities are found.
func (mogq *MappedOIDCGroupQuery) Only(ctx context.Context) (*MappedOIDCGroup, error) {
	nodes, err := mogq.Limit(2).All(setContextOp(ctx, mogq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{mappedoidcgroup.Label}
	default:
		return nil, &NotSingularError{mappedoidcgroup.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (mogq *MappedOIDCGroupQuery) OnlyX(ctx context.Context) *MappedOIDCGroup {
	node, err := mogq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only MappedOIDCGroup ID in the query.
// Returns a *NotSingularError when more than one MappedOIDCGroup ID is found.
// Returns a *NotFoundError when no entities are found.
func (mogq *MappedOIDCGroupQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = mogq.Limit(2).IDs(setContextOp(ctx, mogq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{mappedoidcgroup.Label}
	default:
		err = &NotSingularError{mappedoidcgroup.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (mogq *MappedOIDCGroupQuery) OnlyIDX(ctx context.Context) int {
	id, err := mogq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of MappedOIDCGroups.
func (mogq *MappedOIDCGroupQuery) All(ctx context.Context) ([]*MappedOIDCGroup, error) {
	ctx = setContextOp(ctx, mogq.ctx, ent.OpQueryAll)
	if err := mogq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*MappedOIDCGroup, *MappedOIDCGroupQuery]()
	return withInterceptors[[]*MappedOIDCGroup](ctx, mogq, qr, mogq.inters)
}

// AllX is like All, but panics if an error occurs.
func (mogq *MappedOIDCGroupQuery) AllX(ctx context.Context) []*MappedOIDCGroup {
	nodes, err := mogq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of MappedOIDCGroup IDs.
func (mogq *MappedOIDCGroupQuery) IDs(ctx context.Context) (ids []int, err error) {
	if mogq.ctx.Unique == nil && mogq.path != nil {
		mogq.Unique(true)
	}
	ctx = setContextOp(ctx, mogq.ctx, ent.OpQueryIDs)
	if err = mogq.Select(mappedoidcgroup.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (mogq *MappedOIDCGroupQuery) IDsX(ctx context.Context) []int {
	ids, err := mogq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (mogq *MappedOIDCGroupQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, mogq.ctx, ent.OpQueryCount)
	if err := mogq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, mogq, querierCount[*MappedOIDCGroupQuery](), mogq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (mogq *MappedOIDCGroupQuery) CountX(ctx context.Context) int {
	count, err := mogq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (mogq *MappedOIDCGroupQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, mogq.ctx, ent.OpQueryExist)
	switch _, err := mogq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (mogq *MappedOIDCGroupQuery) ExistX(ctx context.Context) bool {
	exist, err := mogq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the MappedOIDCGroupQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (mogq *MappedOIDCGroupQuery) Clone() *MappedOIDCGroupQuery {
	if mogq == nil {
		return nil
	}
	return &MappedOIDCGroupQuery{
		config:        mogq.config,
		ctx:           mogq.ctx.Clone(),
		order:         append([]mappedoidcgroup.OrderOption{}, mogq.order...),
		inters:        append([]Interceptor{}, mogq.inters...),
		predicates:    append([]predicate.MappedOIDCGroup{}, mogq.predicates...),
		withOidcGroup: mogq.withOidcGroup.Clone(),
		withTeam:      mogq.withTeam.Clone(),
		// clone intermediate query.
		sql:  mogq.sql.Clone(),
		path: mogq.path,
	}
}

// WithOidcGroup tells the query-builder to eager-load the nodes that are connected to
// the "oidc_group" edge. The optional arguments are used to configure the query builder of the edge.
func (mogq *MappedOIDCGroupQuery) WithOidcGroup(opts ...func(*OIDCGroupQuery)) *MappedOIDCGroupQuery {
	query := (&OIDCGroupClient{config: mogq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	mogq.withOidcGroup = query
	return mogq
}

// WithTeam tells the query-builder to eager-load the nodes that are connected to
// the "team" edge. The optional arguments are used to configure the query builder of the edge.
func (mogq *MappedOIDCGroupQuery) WithTeam(opts ...func(*TeamQuery)) *MappedOIDCGroupQuery {
	query := (&TeamClient{config: mogq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	mogq.withTeam = query
	return mogq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UUID uuid.UUID `json:"uuid,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.MappedOIDCGroup.Query().
//		GroupBy(mappedoidcgroup.FieldUUID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (mogq *MappedOIDCGroupQuery) GroupBy(field string, fields ...string) *MappedOIDCGroupGroupBy {
	mogq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &MappedOIDCGroupGroupBy{build: mogq}
	grbuild.flds = &mogq.ctx.Fields
	grbuild.label = mappedoidcgroup.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		UUID uuid.UUID `json:"uuid,omitempty"`
//	}
//
//	client.MappedOIDCGroup.Query().
//		Select(mappedoidcgroup.FieldUUID).
//		Scan(ctx, &v)
func (mogq *MappedOIDCGroupQuery) Select(fields ...string) *MappedOIDCGroupSelect {
	mogq.ctx.Fields = append(mogq.ctx.Fields, fields...)
	sbuild := &MappedOIDCGroupSelect{MappedOIDCGroupQuery: mogq}
	sbuild.label = mappedoidcgroup.Label
	sbuild.flds, sbuild.scan = &mogq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a MappedOIDCGroupSelect configured with the given aggregations.
func (mogq *MappedOIDCGroupQuery) Aggregate(fns ...AggregateFunc) *MappedOIDCGroupSelect {
	return mogq.Select().Aggregate(fns...)
}

func (mogq *MappedOIDCGroupQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range mogq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, mogq); err != nil {
				return err
			}
		}
	}
	for _, f := range mogq.ctx.Fields {
		if !mappedoidcgroup.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if mogq.path != nil {
		prev, err := mogq.path(ctx)
		if err != nil {
			return err
		}
		mogq.sql = prev
	}
	return nil
}

func (mogq *MappedOIDCGroupQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*MappedOIDCGroup, error) {
	var (
		nodes       = []*MappedOIDCGroup{}
		_spec       = mogq.querySpec()
		loadedTypes = [2]bool{
			mogq.withOidcGroup != nil,
			mogq.withTeam != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*MappedOIDCGroup).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &MappedOIDCGroup{config: mogq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, mogq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := mogq.withOidcGroup; query != nil {
		if err := mogq.loadOidcGroup(ctx, query, nodes, nil,
			func(n *MappedOIDCGroup, e *OIDCGroup) { n.Edges.OidcGroup = e }); err != nil {
			return nil, err
		}
	}
	if query := mogq.withTeam; query != nil {
		if err := mogq.loadTeam(ctx, query, nodes, nil,
			func(n *MappedOIDCGroup, e *Team) { n.Edges.Team = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (mogq *MappedOIDCGroupQuery) loadOidcGroup(ctx context.Context, query *OIDCGroupQuery, nodes []*MappedOIDCGroup, init func(*MappedOIDCGroup), assign func(*MappedOIDCGroup, *OIDCGroup)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*MappedOIDCGroup)
	for i := range nodes {
		fk := nodes[i].GroupID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(oidcgroup.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "group_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (mogq *MappedOIDCGroupQuery) loadTeam(ctx context.Context, query *TeamQuery, nodes []*MappedOIDCGroup, init func(*MappedOIDCGroup), assign func(*MappedOIDCGroup, *Team)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*MappedOIDCGroup)
	for i := range nodes {
		fk := nodes[i].TeamID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(team.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "team_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (mogq *MappedOIDCGroupQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := mogq.querySpec()
	_spec.Node.Columns = mogq.ctx.Fields
	if len(mogq.ctx.Fields) > 0 {
		_spec.Unique = mogq.ctx.Unique != nil && *mogq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, mogq.driver, _spec)
}

func (mogq *MappedOIDCGroupQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(mappedoidcgroup.Table, mappedoidcgroup.Columns, sqlgraph.NewFieldSpec(mappedoidcgroup.FieldID, field.TypeInt))
	_spec.From = mogq.sql
	if unique := mogq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if mogq.path != nil {
		_spec.Unique = true
	}
	if fields := mogq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, mappedoidcgroup.FieldID)
		for i := range fields {
			if fields[i] != mappedoidcgroup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if mogq.withOidcGroup != nil {
			_spec.Node.AddColumnOnce(mappedoidcgroup.FieldGroupID)
		}
		if mogq.withTeam != nil {
			_spec.Node.AddColumnOnce(mappedoidcgroup.FieldTeamID)
		}
	}
	if ps := mogq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := mogq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := mogq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := mogq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (mogq *MappedOIDCGroupQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(mogq.driver.Dialect())
	t1 := builder.Table(mappedoidcgroup.Table)
	columns := mogq.ctx.Fields
	if len(columns) == 0 {
		columns = mappedoidcgroup.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if mogq.sql != nil {
		selector = mogq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if mogq.ctx.Unique != nil && *mogq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range mogq.predicates {
		p(selector)
	}
	for _, p := range mogq.order {
		p(selector)
	}
	if offset := mogq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := mogq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// MappedOIDCGroupGroupBy is the group-by builder for MappedOIDCGroup entities.
type MappedOIDCGroupGroupBy struct {
	selector
	build *MappedOIDCGroupQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (moggb *MappedOIDCGroupGroupBy) Aggregate(fns ...AggregateFunc) *MappedOIDCGroupGroupBy {
	moggb.fns = append(moggb.fns, fns...)
	return moggb
}

// Scan applies the selector query and scans the result into the given value.
func (moggb *MappedOIDCGroupGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, moggb.build.ctx, ent.OpQueryGroupBy)
	if err := moggb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*MappedOIDCGroupQuery, *MappedOIDCGroupGroupBy](ctx, moggb.build, moggb, moggb.build.inters, v)
}

func (moggb *MappedOIDCGroupGroupBy) sqlScan(ctx context.Context, root *MappedOIDCGroupQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(moggb.fns))
	for _, fn := range moggb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*moggb.flds)+len(moggb.fns))
		for _, f := range *moggb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*moggb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := moggb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// MappedOIDCGroupSelect is the builder for selecting fields of MappedOIDCGroup entities.
type MappedOIDCGroupSelect struct {
	*MappedOIDCGroupQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (mogs *MappedOIDCGroupSelect) Aggregate(fns ...AggregateFunc) *MappedOIDCGroupSelect {
	mogs.fns = append(mogs.fns, fns...)
	return mogs
}

// Scan applies the selector query and scans the result into the given value.
func (mogs *MappedOIDCGroupSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, mogs.ctx, ent.OpQuerySelect)
	if err := mogs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*MappedOIDCGroupQuery, *MappedOIDCGroupSelect](ctx, mogs.MappedOIDCGroupQuery, mogs, mogs.inters, v)
}

func (mogs *MappedOIDCGroupSelect) sqlScan(ctx context.Context, root *MappedOIDCGroupQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(mogs.fns))
	for _, fn := range mogs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*mogs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := mogs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
