// Code generated by ent, DO NOT EDIT.
// --------------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2025 The DependencyTrack Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// --------------------------------------------------------------------
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// --------------------------------------------------------------------

package ent

import (
	"context"
	"errors"
	"fmt"

	"dependencytrack.io/hyades/ent/ldapuser"
	"dependencytrack.io/hyades/ent/manageduser"
	"dependencytrack.io/hyades/ent/oidcuser"
	"dependencytrack.io/hyades/ent/permission"
	"dependencytrack.io/hyades/ent/predicate"
	"dependencytrack.io/hyades/ent/team"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PermissionUpdate is the builder for updating Permission entities.
type PermissionUpdate struct {
	config
	hooks    []Hook
	mutation *PermissionMutation
}

// Where appends a list predicates to the PermissionUpdate builder.
func (pu *PermissionUpdate) Where(ps ...predicate.Permission) *PermissionUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetDescription sets the "description" field.
func (pu *PermissionUpdate) SetDescription(s string) *PermissionUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pu *PermissionUpdate) SetNillableDescription(s *string) *PermissionUpdate {
	if s != nil {
		pu.SetDescription(*s)
	}
	return pu
}

// ClearDescription clears the value of the "description" field.
func (pu *PermissionUpdate) ClearDescription() *PermissionUpdate {
	pu.mutation.ClearDescription()
	return pu
}

// SetName sets the "name" field.
func (pu *PermissionUpdate) SetName(s string) *PermissionUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *PermissionUpdate) SetNillableName(s *string) *PermissionUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// AddTeamIDs adds the "teams" edge to the Team entity by IDs.
func (pu *PermissionUpdate) AddTeamIDs(ids ...int) *PermissionUpdate {
	pu.mutation.AddTeamIDs(ids...)
	return pu
}

// AddTeams adds the "teams" edges to the Team entity.
func (pu *PermissionUpdate) AddTeams(t ...*Team) *PermissionUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pu.AddTeamIDs(ids...)
}

// AddLdapUserIDs adds the "ldap_users" edge to the LDAPUser entity by IDs.
func (pu *PermissionUpdate) AddLdapUserIDs(ids ...int) *PermissionUpdate {
	pu.mutation.AddLdapUserIDs(ids...)
	return pu
}

// AddLdapUsers adds the "ldap_users" edges to the LDAPUser entity.
func (pu *PermissionUpdate) AddLdapUsers(l ...*LDAPUser) *PermissionUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return pu.AddLdapUserIDs(ids...)
}

// AddManagedUserIDs adds the "managed_users" edge to the ManagedUser entity by IDs.
func (pu *PermissionUpdate) AddManagedUserIDs(ids ...int) *PermissionUpdate {
	pu.mutation.AddManagedUserIDs(ids...)
	return pu
}

// AddManagedUsers adds the "managed_users" edges to the ManagedUser entity.
func (pu *PermissionUpdate) AddManagedUsers(m ...*ManagedUser) *PermissionUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return pu.AddManagedUserIDs(ids...)
}

// AddOidcUserIDs adds the "oidc_users" edge to the OIDCUser entity by IDs.
func (pu *PermissionUpdate) AddOidcUserIDs(ids ...int) *PermissionUpdate {
	pu.mutation.AddOidcUserIDs(ids...)
	return pu
}

// AddOidcUsers adds the "oidc_users" edges to the OIDCUser entity.
func (pu *PermissionUpdate) AddOidcUsers(o ...*OIDCUser) *PermissionUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pu.AddOidcUserIDs(ids...)
}

// Mutation returns the PermissionMutation object of the builder.
func (pu *PermissionUpdate) Mutation() *PermissionMutation {
	return pu.mutation
}

// ClearTeams clears all "teams" edges to the Team entity.
func (pu *PermissionUpdate) ClearTeams() *PermissionUpdate {
	pu.mutation.ClearTeams()
	return pu
}

// RemoveTeamIDs removes the "teams" edge to Team entities by IDs.
func (pu *PermissionUpdate) RemoveTeamIDs(ids ...int) *PermissionUpdate {
	pu.mutation.RemoveTeamIDs(ids...)
	return pu
}

// RemoveTeams removes "teams" edges to Team entities.
func (pu *PermissionUpdate) RemoveTeams(t ...*Team) *PermissionUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pu.RemoveTeamIDs(ids...)
}

// ClearLdapUsers clears all "ldap_users" edges to the LDAPUser entity.
func (pu *PermissionUpdate) ClearLdapUsers() *PermissionUpdate {
	pu.mutation.ClearLdapUsers()
	return pu
}

// RemoveLdapUserIDs removes the "ldap_users" edge to LDAPUser entities by IDs.
func (pu *PermissionUpdate) RemoveLdapUserIDs(ids ...int) *PermissionUpdate {
	pu.mutation.RemoveLdapUserIDs(ids...)
	return pu
}

// RemoveLdapUsers removes "ldap_users" edges to LDAPUser entities.
func (pu *PermissionUpdate) RemoveLdapUsers(l ...*LDAPUser) *PermissionUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return pu.RemoveLdapUserIDs(ids...)
}

// ClearManagedUsers clears all "managed_users" edges to the ManagedUser entity.
func (pu *PermissionUpdate) ClearManagedUsers() *PermissionUpdate {
	pu.mutation.ClearManagedUsers()
	return pu
}

// RemoveManagedUserIDs removes the "managed_users" edge to ManagedUser entities by IDs.
func (pu *PermissionUpdate) RemoveManagedUserIDs(ids ...int) *PermissionUpdate {
	pu.mutation.RemoveManagedUserIDs(ids...)
	return pu
}

// RemoveManagedUsers removes "managed_users" edges to ManagedUser entities.
func (pu *PermissionUpdate) RemoveManagedUsers(m ...*ManagedUser) *PermissionUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return pu.RemoveManagedUserIDs(ids...)
}

// ClearOidcUsers clears all "oidc_users" edges to the OIDCUser entity.
func (pu *PermissionUpdate) ClearOidcUsers() *PermissionUpdate {
	pu.mutation.ClearOidcUsers()
	return pu
}

// RemoveOidcUserIDs removes the "oidc_users" edge to OIDCUser entities by IDs.
func (pu *PermissionUpdate) RemoveOidcUserIDs(ids ...int) *PermissionUpdate {
	pu.mutation.RemoveOidcUserIDs(ids...)
	return pu
}

// RemoveOidcUsers removes "oidc_users" edges to OIDCUser entities.
func (pu *PermissionUpdate) RemoveOidcUsers(o ...*OIDCUser) *PermissionUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pu.RemoveOidcUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PermissionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PermissionUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PermissionUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PermissionUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PermissionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(permission.Table, permission.Columns, sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.SetField(permission.FieldDescription, field.TypeString, value)
	}
	if pu.mutation.DescriptionCleared() {
		_spec.ClearField(permission.FieldDescription, field.TypeString)
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(permission.FieldName, field.TypeString, value)
	}
	if pu.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   permission.TeamsTable,
			Columns: permission.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedTeamsIDs(); len(nodes) > 0 && !pu.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   permission.TeamsTable,
			Columns: permission.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.TeamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   permission.TeamsTable,
			Columns: permission.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.LdapUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   permission.LdapUsersTable,
			Columns: permission.LdapUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ldapuser.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedLdapUsersIDs(); len(nodes) > 0 && !pu.mutation.LdapUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   permission.LdapUsersTable,
			Columns: permission.LdapUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ldapuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.LdapUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   permission.LdapUsersTable,
			Columns: permission.LdapUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ldapuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ManagedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   permission.ManagedUsersTable,
			Columns: permission.ManagedUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manageduser.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedManagedUsersIDs(); len(nodes) > 0 && !pu.mutation.ManagedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   permission.ManagedUsersTable,
			Columns: permission.ManagedUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manageduser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ManagedUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   permission.ManagedUsersTable,
			Columns: permission.ManagedUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manageduser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.OidcUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   permission.OidcUsersTable,
			Columns: permission.OidcUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oidcuser.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedOidcUsersIDs(); len(nodes) > 0 && !pu.mutation.OidcUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   permission.OidcUsersTable,
			Columns: permission.OidcUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oidcuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.OidcUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   permission.OidcUsersTable,
			Columns: permission.OidcUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oidcuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{permission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PermissionUpdateOne is the builder for updating a single Permission entity.
type PermissionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PermissionMutation
}

// SetDescription sets the "description" field.
func (puo *PermissionUpdateOne) SetDescription(s string) *PermissionUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (puo *PermissionUpdateOne) SetNillableDescription(s *string) *PermissionUpdateOne {
	if s != nil {
		puo.SetDescription(*s)
	}
	return puo
}

// ClearDescription clears the value of the "description" field.
func (puo *PermissionUpdateOne) ClearDescription() *PermissionUpdateOne {
	puo.mutation.ClearDescription()
	return puo
}

// SetName sets the "name" field.
func (puo *PermissionUpdateOne) SetName(s string) *PermissionUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *PermissionUpdateOne) SetNillableName(s *string) *PermissionUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// AddTeamIDs adds the "teams" edge to the Team entity by IDs.
func (puo *PermissionUpdateOne) AddTeamIDs(ids ...int) *PermissionUpdateOne {
	puo.mutation.AddTeamIDs(ids...)
	return puo
}

// AddTeams adds the "teams" edges to the Team entity.
func (puo *PermissionUpdateOne) AddTeams(t ...*Team) *PermissionUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return puo.AddTeamIDs(ids...)
}

// AddLdapUserIDs adds the "ldap_users" edge to the LDAPUser entity by IDs.
func (puo *PermissionUpdateOne) AddLdapUserIDs(ids ...int) *PermissionUpdateOne {
	puo.mutation.AddLdapUserIDs(ids...)
	return puo
}

// AddLdapUsers adds the "ldap_users" edges to the LDAPUser entity.
func (puo *PermissionUpdateOne) AddLdapUsers(l ...*LDAPUser) *PermissionUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return puo.AddLdapUserIDs(ids...)
}

// AddManagedUserIDs adds the "managed_users" edge to the ManagedUser entity by IDs.
func (puo *PermissionUpdateOne) AddManagedUserIDs(ids ...int) *PermissionUpdateOne {
	puo.mutation.AddManagedUserIDs(ids...)
	return puo
}

// AddManagedUsers adds the "managed_users" edges to the ManagedUser entity.
func (puo *PermissionUpdateOne) AddManagedUsers(m ...*ManagedUser) *PermissionUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return puo.AddManagedUserIDs(ids...)
}

// AddOidcUserIDs adds the "oidc_users" edge to the OIDCUser entity by IDs.
func (puo *PermissionUpdateOne) AddOidcUserIDs(ids ...int) *PermissionUpdateOne {
	puo.mutation.AddOidcUserIDs(ids...)
	return puo
}

// AddOidcUsers adds the "oidc_users" edges to the OIDCUser entity.
func (puo *PermissionUpdateOne) AddOidcUsers(o ...*OIDCUser) *PermissionUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return puo.AddOidcUserIDs(ids...)
}

// Mutation returns the PermissionMutation object of the builder.
func (puo *PermissionUpdateOne) Mutation() *PermissionMutation {
	return puo.mutation
}

// ClearTeams clears all "teams" edges to the Team entity.
func (puo *PermissionUpdateOne) ClearTeams() *PermissionUpdateOne {
	puo.mutation.ClearTeams()
	return puo
}

// RemoveTeamIDs removes the "teams" edge to Team entities by IDs.
func (puo *PermissionUpdateOne) RemoveTeamIDs(ids ...int) *PermissionUpdateOne {
	puo.mutation.RemoveTeamIDs(ids...)
	return puo
}

// RemoveTeams removes "teams" edges to Team entities.
func (puo *PermissionUpdateOne) RemoveTeams(t ...*Team) *PermissionUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return puo.RemoveTeamIDs(ids...)
}

// ClearLdapUsers clears all "ldap_users" edges to the LDAPUser entity.
func (puo *PermissionUpdateOne) ClearLdapUsers() *PermissionUpdateOne {
	puo.mutation.ClearLdapUsers()
	return puo
}

// RemoveLdapUserIDs removes the "ldap_users" edge to LDAPUser entities by IDs.
func (puo *PermissionUpdateOne) RemoveLdapUserIDs(ids ...int) *PermissionUpdateOne {
	puo.mutation.RemoveLdapUserIDs(ids...)
	return puo
}

// RemoveLdapUsers removes "ldap_users" edges to LDAPUser entities.
func (puo *PermissionUpdateOne) RemoveLdapUsers(l ...*LDAPUser) *PermissionUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return puo.RemoveLdapUserIDs(ids...)
}

// ClearManagedUsers clears all "managed_users" edges to the ManagedUser entity.
func (puo *PermissionUpdateOne) ClearManagedUsers() *PermissionUpdateOne {
	puo.mutation.ClearManagedUsers()
	return puo
}

// RemoveManagedUserIDs removes the "managed_users" edge to ManagedUser entities by IDs.
func (puo *PermissionUpdateOne) RemoveManagedUserIDs(ids ...int) *PermissionUpdateOne {
	puo.mutation.RemoveManagedUserIDs(ids...)
	return puo
}

// RemoveManagedUsers removes "managed_users" edges to ManagedUser entities.
func (puo *PermissionUpdateOne) RemoveManagedUsers(m ...*ManagedUser) *PermissionUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return puo.RemoveManagedUserIDs(ids...)
}

// ClearOidcUsers clears all "oidc_users" edges to the OIDCUser entity.
func (puo *PermissionUpdateOne) ClearOidcUsers() *PermissionUpdateOne {
	puo.mutation.ClearOidcUsers()
	return puo
}

// RemoveOidcUserIDs removes the "oidc_users" edge to OIDCUser entities by IDs.
func (puo *PermissionUpdateOne) RemoveOidcUserIDs(ids ...int) *PermissionUpdateOne {
	puo.mutation.RemoveOidcUserIDs(ids...)
	return puo
}

// RemoveOidcUsers removes "oidc_users" edges to OIDCUser entities.
func (puo *PermissionUpdateOne) RemoveOidcUsers(o ...*OIDCUser) *PermissionUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return puo.RemoveOidcUserIDs(ids...)
}

// Where appends a list predicates to the PermissionUpdate builder.
func (puo *PermissionUpdateOne) Where(ps ...predicate.Permission) *PermissionUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PermissionUpdateOne) Select(field string, fields ...string) *PermissionUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Permission entity.
func (puo *PermissionUpdateOne) Save(ctx context.Context) (*Permission, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PermissionUpdateOne) SaveX(ctx context.Context) *Permission {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PermissionUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PermissionUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PermissionUpdateOne) sqlSave(ctx context.Context) (_node *Permission, err error) {
	_spec := sqlgraph.NewUpdateSpec(permission.Table, permission.Columns, sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Permission.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, permission.FieldID)
		for _, f := range fields {
			if !permission.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != permission.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Description(); ok {
		_spec.SetField(permission.FieldDescription, field.TypeString, value)
	}
	if puo.mutation.DescriptionCleared() {
		_spec.ClearField(permission.FieldDescription, field.TypeString)
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(permission.FieldName, field.TypeString, value)
	}
	if puo.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   permission.TeamsTable,
			Columns: permission.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedTeamsIDs(); len(nodes) > 0 && !puo.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   permission.TeamsTable,
			Columns: permission.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.TeamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   permission.TeamsTable,
			Columns: permission.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.LdapUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   permission.LdapUsersTable,
			Columns: permission.LdapUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ldapuser.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedLdapUsersIDs(); len(nodes) > 0 && !puo.mutation.LdapUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   permission.LdapUsersTable,
			Columns: permission.LdapUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ldapuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.LdapUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   permission.LdapUsersTable,
			Columns: permission.LdapUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ldapuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ManagedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   permission.ManagedUsersTable,
			Columns: permission.ManagedUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manageduser.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedManagedUsersIDs(); len(nodes) > 0 && !puo.mutation.ManagedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   permission.ManagedUsersTable,
			Columns: permission.ManagedUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manageduser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ManagedUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   permission.ManagedUsersTable,
			Columns: permission.ManagedUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manageduser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.OidcUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   permission.OidcUsersTable,
			Columns: permission.OidcUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oidcuser.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedOidcUsersIDs(); len(nodes) > 0 && !puo.mutation.OidcUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   permission.OidcUsersTable,
			Columns: permission.OidcUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oidcuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.OidcUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   permission.OidcUsersTable,
			Columns: permission.OidcUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oidcuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Permission{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{permission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
