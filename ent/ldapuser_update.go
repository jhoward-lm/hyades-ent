// Code generated by ent, DO NOT EDIT.
// --------------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2025 The DependencyTrack Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// --------------------------------------------------------------------
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// --------------------------------------------------------------------

package ent

import (
	"context"
	"errors"
	"fmt"

	"dependencytrack.io/hyades/ent/ldapuser"
	"dependencytrack.io/hyades/ent/permission"
	"dependencytrack.io/hyades/ent/predicate"
	"dependencytrack.io/hyades/ent/team"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LDAPUserUpdate is the builder for updating LDAPUser entities.
type LDAPUserUpdate struct {
	config
	hooks    []Hook
	mutation *LDAPUserMutation
}

// Where appends a list predicates to the LDAPUserUpdate builder.
func (luu *LDAPUserUpdate) Where(ps ...predicate.LDAPUser) *LDAPUserUpdate {
	luu.mutation.Where(ps...)
	return luu
}

// SetDn sets the "dn" field.
func (luu *LDAPUserUpdate) SetDn(s string) *LDAPUserUpdate {
	luu.mutation.SetDn(s)
	return luu
}

// SetNillableDn sets the "dn" field if the given value is not nil.
func (luu *LDAPUserUpdate) SetNillableDn(s *string) *LDAPUserUpdate {
	if s != nil {
		luu.SetDn(*s)
	}
	return luu
}

// SetEmail sets the "email" field.
func (luu *LDAPUserUpdate) SetEmail(s string) *LDAPUserUpdate {
	luu.mutation.SetEmail(s)
	return luu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (luu *LDAPUserUpdate) SetNillableEmail(s *string) *LDAPUserUpdate {
	if s != nil {
		luu.SetEmail(*s)
	}
	return luu
}

// ClearEmail clears the value of the "email" field.
func (luu *LDAPUserUpdate) ClearEmail() *LDAPUserUpdate {
	luu.mutation.ClearEmail()
	return luu
}

// SetUsername sets the "username" field.
func (luu *LDAPUserUpdate) SetUsername(s string) *LDAPUserUpdate {
	luu.mutation.SetUsername(s)
	return luu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (luu *LDAPUserUpdate) SetNillableUsername(s *string) *LDAPUserUpdate {
	if s != nil {
		luu.SetUsername(*s)
	}
	return luu
}

// ClearUsername clears the value of the "username" field.
func (luu *LDAPUserUpdate) ClearUsername() *LDAPUserUpdate {
	luu.mutation.ClearUsername()
	return luu
}

// AddPermissionIDs adds the "permissions" edge to the Permission entity by IDs.
func (luu *LDAPUserUpdate) AddPermissionIDs(ids ...int) *LDAPUserUpdate {
	luu.mutation.AddPermissionIDs(ids...)
	return luu
}

// AddPermissions adds the "permissions" edges to the Permission entity.
func (luu *LDAPUserUpdate) AddPermissions(p ...*Permission) *LDAPUserUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return luu.AddPermissionIDs(ids...)
}

// AddTeamIDs adds the "teams" edge to the Team entity by IDs.
func (luu *LDAPUserUpdate) AddTeamIDs(ids ...int) *LDAPUserUpdate {
	luu.mutation.AddTeamIDs(ids...)
	return luu
}

// AddTeams adds the "teams" edges to the Team entity.
func (luu *LDAPUserUpdate) AddTeams(t ...*Team) *LDAPUserUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return luu.AddTeamIDs(ids...)
}

// Mutation returns the LDAPUserMutation object of the builder.
func (luu *LDAPUserUpdate) Mutation() *LDAPUserMutation {
	return luu.mutation
}

// ClearPermissions clears all "permissions" edges to the Permission entity.
func (luu *LDAPUserUpdate) ClearPermissions() *LDAPUserUpdate {
	luu.mutation.ClearPermissions()
	return luu
}

// RemovePermissionIDs removes the "permissions" edge to Permission entities by IDs.
func (luu *LDAPUserUpdate) RemovePermissionIDs(ids ...int) *LDAPUserUpdate {
	luu.mutation.RemovePermissionIDs(ids...)
	return luu
}

// RemovePermissions removes "permissions" edges to Permission entities.
func (luu *LDAPUserUpdate) RemovePermissions(p ...*Permission) *LDAPUserUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return luu.RemovePermissionIDs(ids...)
}

// ClearTeams clears all "teams" edges to the Team entity.
func (luu *LDAPUserUpdate) ClearTeams() *LDAPUserUpdate {
	luu.mutation.ClearTeams()
	return luu
}

// RemoveTeamIDs removes the "teams" edge to Team entities by IDs.
func (luu *LDAPUserUpdate) RemoveTeamIDs(ids ...int) *LDAPUserUpdate {
	luu.mutation.RemoveTeamIDs(ids...)
	return luu
}

// RemoveTeams removes "teams" edges to Team entities.
func (luu *LDAPUserUpdate) RemoveTeams(t ...*Team) *LDAPUserUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return luu.RemoveTeamIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (luu *LDAPUserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, luu.sqlSave, luu.mutation, luu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (luu *LDAPUserUpdate) SaveX(ctx context.Context) int {
	affected, err := luu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (luu *LDAPUserUpdate) Exec(ctx context.Context) error {
	_, err := luu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luu *LDAPUserUpdate) ExecX(ctx context.Context) {
	if err := luu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (luu *LDAPUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(ldapuser.Table, ldapuser.Columns, sqlgraph.NewFieldSpec(ldapuser.FieldID, field.TypeInt))
	if ps := luu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luu.mutation.Dn(); ok {
		_spec.SetField(ldapuser.FieldDn, field.TypeString, value)
	}
	if value, ok := luu.mutation.Email(); ok {
		_spec.SetField(ldapuser.FieldEmail, field.TypeString, value)
	}
	if luu.mutation.EmailCleared() {
		_spec.ClearField(ldapuser.FieldEmail, field.TypeString)
	}
	if value, ok := luu.mutation.Username(); ok {
		_spec.SetField(ldapuser.FieldUsername, field.TypeString, value)
	}
	if luu.mutation.UsernameCleared() {
		_spec.ClearField(ldapuser.FieldUsername, field.TypeString)
	}
	if luu.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   ldapuser.PermissionsTable,
			Columns: ldapuser.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luu.mutation.RemovedPermissionsIDs(); len(nodes) > 0 && !luu.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   ldapuser.PermissionsTable,
			Columns: ldapuser.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luu.mutation.PermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   ldapuser.PermissionsTable,
			Columns: ldapuser.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luu.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   ldapuser.TeamsTable,
			Columns: ldapuser.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luu.mutation.RemovedTeamsIDs(); len(nodes) > 0 && !luu.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   ldapuser.TeamsTable,
			Columns: ldapuser.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luu.mutation.TeamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   ldapuser.TeamsTable,
			Columns: ldapuser.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, luu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ldapuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	luu.mutation.done = true
	return n, nil
}

// LDAPUserUpdateOne is the builder for updating a single LDAPUser entity.
type LDAPUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LDAPUserMutation
}

// SetDn sets the "dn" field.
func (luuo *LDAPUserUpdateOne) SetDn(s string) *LDAPUserUpdateOne {
	luuo.mutation.SetDn(s)
	return luuo
}

// SetNillableDn sets the "dn" field if the given value is not nil.
func (luuo *LDAPUserUpdateOne) SetNillableDn(s *string) *LDAPUserUpdateOne {
	if s != nil {
		luuo.SetDn(*s)
	}
	return luuo
}

// SetEmail sets the "email" field.
func (luuo *LDAPUserUpdateOne) SetEmail(s string) *LDAPUserUpdateOne {
	luuo.mutation.SetEmail(s)
	return luuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (luuo *LDAPUserUpdateOne) SetNillableEmail(s *string) *LDAPUserUpdateOne {
	if s != nil {
		luuo.SetEmail(*s)
	}
	return luuo
}

// ClearEmail clears the value of the "email" field.
func (luuo *LDAPUserUpdateOne) ClearEmail() *LDAPUserUpdateOne {
	luuo.mutation.ClearEmail()
	return luuo
}

// SetUsername sets the "username" field.
func (luuo *LDAPUserUpdateOne) SetUsername(s string) *LDAPUserUpdateOne {
	luuo.mutation.SetUsername(s)
	return luuo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (luuo *LDAPUserUpdateOne) SetNillableUsername(s *string) *LDAPUserUpdateOne {
	if s != nil {
		luuo.SetUsername(*s)
	}
	return luuo
}

// ClearUsername clears the value of the "username" field.
func (luuo *LDAPUserUpdateOne) ClearUsername() *LDAPUserUpdateOne {
	luuo.mutation.ClearUsername()
	return luuo
}

// AddPermissionIDs adds the "permissions" edge to the Permission entity by IDs.
func (luuo *LDAPUserUpdateOne) AddPermissionIDs(ids ...int) *LDAPUserUpdateOne {
	luuo.mutation.AddPermissionIDs(ids...)
	return luuo
}

// AddPermissions adds the "permissions" edges to the Permission entity.
func (luuo *LDAPUserUpdateOne) AddPermissions(p ...*Permission) *LDAPUserUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return luuo.AddPermissionIDs(ids...)
}

// AddTeamIDs adds the "teams" edge to the Team entity by IDs.
func (luuo *LDAPUserUpdateOne) AddTeamIDs(ids ...int) *LDAPUserUpdateOne {
	luuo.mutation.AddTeamIDs(ids...)
	return luuo
}

// AddTeams adds the "teams" edges to the Team entity.
func (luuo *LDAPUserUpdateOne) AddTeams(t ...*Team) *LDAPUserUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return luuo.AddTeamIDs(ids...)
}

// Mutation returns the LDAPUserMutation object of the builder.
func (luuo *LDAPUserUpdateOne) Mutation() *LDAPUserMutation {
	return luuo.mutation
}

// ClearPermissions clears all "permissions" edges to the Permission entity.
func (luuo *LDAPUserUpdateOne) ClearPermissions() *LDAPUserUpdateOne {
	luuo.mutation.ClearPermissions()
	return luuo
}

// RemovePermissionIDs removes the "permissions" edge to Permission entities by IDs.
func (luuo *LDAPUserUpdateOne) RemovePermissionIDs(ids ...int) *LDAPUserUpdateOne {
	luuo.mutation.RemovePermissionIDs(ids...)
	return luuo
}

// RemovePermissions removes "permissions" edges to Permission entities.
func (luuo *LDAPUserUpdateOne) RemovePermissions(p ...*Permission) *LDAPUserUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return luuo.RemovePermissionIDs(ids...)
}

// ClearTeams clears all "teams" edges to the Team entity.
func (luuo *LDAPUserUpdateOne) ClearTeams() *LDAPUserUpdateOne {
	luuo.mutation.ClearTeams()
	return luuo
}

// RemoveTeamIDs removes the "teams" edge to Team entities by IDs.
func (luuo *LDAPUserUpdateOne) RemoveTeamIDs(ids ...int) *LDAPUserUpdateOne {
	luuo.mutation.RemoveTeamIDs(ids...)
	return luuo
}

// RemoveTeams removes "teams" edges to Team entities.
func (luuo *LDAPUserUpdateOne) RemoveTeams(t ...*Team) *LDAPUserUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return luuo.RemoveTeamIDs(ids...)
}

// Where appends a list predicates to the LDAPUserUpdate builder.
func (luuo *LDAPUserUpdateOne) Where(ps ...predicate.LDAPUser) *LDAPUserUpdateOne {
	luuo.mutation.Where(ps...)
	return luuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luuo *LDAPUserUpdateOne) Select(field string, fields ...string) *LDAPUserUpdateOne {
	luuo.fields = append([]string{field}, fields...)
	return luuo
}

// Save executes the query and returns the updated LDAPUser entity.
func (luuo *LDAPUserUpdateOne) Save(ctx context.Context) (*LDAPUser, error) {
	return withHooks(ctx, luuo.sqlSave, luuo.mutation, luuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (luuo *LDAPUserUpdateOne) SaveX(ctx context.Context) *LDAPUser {
	node, err := luuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luuo *LDAPUserUpdateOne) Exec(ctx context.Context) error {
	_, err := luuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luuo *LDAPUserUpdateOne) ExecX(ctx context.Context) {
	if err := luuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (luuo *LDAPUserUpdateOne) sqlSave(ctx context.Context) (_node *LDAPUser, err error) {
	_spec := sqlgraph.NewUpdateSpec(ldapuser.Table, ldapuser.Columns, sqlgraph.NewFieldSpec(ldapuser.FieldID, field.TypeInt))
	id, ok := luuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LDAPUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := luuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ldapuser.FieldID)
		for _, f := range fields {
			if !ldapuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ldapuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := luuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luuo.mutation.Dn(); ok {
		_spec.SetField(ldapuser.FieldDn, field.TypeString, value)
	}
	if value, ok := luuo.mutation.Email(); ok {
		_spec.SetField(ldapuser.FieldEmail, field.TypeString, value)
	}
	if luuo.mutation.EmailCleared() {
		_spec.ClearField(ldapuser.FieldEmail, field.TypeString)
	}
	if value, ok := luuo.mutation.Username(); ok {
		_spec.SetField(ldapuser.FieldUsername, field.TypeString, value)
	}
	if luuo.mutation.UsernameCleared() {
		_spec.ClearField(ldapuser.FieldUsername, field.TypeString)
	}
	if luuo.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   ldapuser.PermissionsTable,
			Columns: ldapuser.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luuo.mutation.RemovedPermissionsIDs(); len(nodes) > 0 && !luuo.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   ldapuser.PermissionsTable,
			Columns: ldapuser.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luuo.mutation.PermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   ldapuser.PermissionsTable,
			Columns: ldapuser.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luuo.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   ldapuser.TeamsTable,
			Columns: ldapuser.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luuo.mutation.RemovedTeamsIDs(); len(nodes) > 0 && !luuo.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   ldapuser.TeamsTable,
			Columns: ldapuser.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luuo.mutation.TeamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   ldapuser.TeamsTable,
			Columns: ldapuser.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &LDAPUser{config: luuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ldapuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	luuo.mutation.done = true
	return _node, nil
}
