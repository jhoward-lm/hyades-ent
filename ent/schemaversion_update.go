// Code generated by ent, DO NOT EDIT.
// --------------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2025 The DependencyTrack Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// --------------------------------------------------------------------
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// --------------------------------------------------------------------

package ent

import (
	"context"
	"errors"
	"fmt"

	"dependencytrack.io/hyades/ent/predicate"
	"dependencytrack.io/hyades/ent/schemaversion"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SchemaVersionUpdate is the builder for updating SchemaVersion entities.
type SchemaVersionUpdate struct {
	config
	hooks    []Hook
	mutation *SchemaVersionMutation
}

// Where appends a list predicates to the SchemaVersionUpdate builder.
func (svu *SchemaVersionUpdate) Where(ps ...predicate.SchemaVersion) *SchemaVersionUpdate {
	svu.mutation.Where(ps...)
	return svu
}

// SetVersion sets the "version" field.
func (svu *SchemaVersionUpdate) SetVersion(s string) *SchemaVersionUpdate {
	svu.mutation.SetVersion(s)
	return svu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (svu *SchemaVersionUpdate) SetNillableVersion(s *string) *SchemaVersionUpdate {
	if s != nil {
		svu.SetVersion(*s)
	}
	return svu
}

// ClearVersion clears the value of the "version" field.
func (svu *SchemaVersionUpdate) ClearVersion() *SchemaVersionUpdate {
	svu.mutation.ClearVersion()
	return svu
}

// Mutation returns the SchemaVersionMutation object of the builder.
func (svu *SchemaVersionUpdate) Mutation() *SchemaVersionMutation {
	return svu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (svu *SchemaVersionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, svu.sqlSave, svu.mutation, svu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (svu *SchemaVersionUpdate) SaveX(ctx context.Context) int {
	affected, err := svu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (svu *SchemaVersionUpdate) Exec(ctx context.Context) error {
	_, err := svu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (svu *SchemaVersionUpdate) ExecX(ctx context.Context) {
	if err := svu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (svu *SchemaVersionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(schemaversion.Table, schemaversion.Columns, sqlgraph.NewFieldSpec(schemaversion.FieldID, field.TypeInt))
	if ps := svu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := svu.mutation.Version(); ok {
		_spec.SetField(schemaversion.FieldVersion, field.TypeString, value)
	}
	if svu.mutation.VersionCleared() {
		_spec.ClearField(schemaversion.FieldVersion, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, svu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{schemaversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	svu.mutation.done = true
	return n, nil
}

// SchemaVersionUpdateOne is the builder for updating a single SchemaVersion entity.
type SchemaVersionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SchemaVersionMutation
}

// SetVersion sets the "version" field.
func (svuo *SchemaVersionUpdateOne) SetVersion(s string) *SchemaVersionUpdateOne {
	svuo.mutation.SetVersion(s)
	return svuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (svuo *SchemaVersionUpdateOne) SetNillableVersion(s *string) *SchemaVersionUpdateOne {
	if s != nil {
		svuo.SetVersion(*s)
	}
	return svuo
}

// ClearVersion clears the value of the "version" field.
func (svuo *SchemaVersionUpdateOne) ClearVersion() *SchemaVersionUpdateOne {
	svuo.mutation.ClearVersion()
	return svuo
}

// Mutation returns the SchemaVersionMutation object of the builder.
func (svuo *SchemaVersionUpdateOne) Mutation() *SchemaVersionMutation {
	return svuo.mutation
}

// Where appends a list predicates to the SchemaVersionUpdate builder.
func (svuo *SchemaVersionUpdateOne) Where(ps ...predicate.SchemaVersion) *SchemaVersionUpdateOne {
	svuo.mutation.Where(ps...)
	return svuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (svuo *SchemaVersionUpdateOne) Select(field string, fields ...string) *SchemaVersionUpdateOne {
	svuo.fields = append([]string{field}, fields...)
	return svuo
}

// Save executes the query and returns the updated SchemaVersion entity.
func (svuo *SchemaVersionUpdateOne) Save(ctx context.Context) (*SchemaVersion, error) {
	return withHooks(ctx, svuo.sqlSave, svuo.mutation, svuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (svuo *SchemaVersionUpdateOne) SaveX(ctx context.Context) *SchemaVersion {
	node, err := svuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (svuo *SchemaVersionUpdateOne) Exec(ctx context.Context) error {
	_, err := svuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (svuo *SchemaVersionUpdateOne) ExecX(ctx context.Context) {
	if err := svuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (svuo *SchemaVersionUpdateOne) sqlSave(ctx context.Context) (_node *SchemaVersion, err error) {
	_spec := sqlgraph.NewUpdateSpec(schemaversion.Table, schemaversion.Columns, sqlgraph.NewFieldSpec(schemaversion.FieldID, field.TypeInt))
	id, ok := svuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SchemaVersion.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := svuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, schemaversion.FieldID)
		for _, f := range fields {
			if !schemaversion.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != schemaversion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := svuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := svuo.mutation.Version(); ok {
		_spec.SetField(schemaversion.FieldVersion, field.TypeString, value)
	}
	if svuo.mutation.VersionCleared() {
		_spec.ClearField(schemaversion.FieldVersion, field.TypeString)
	}
	_node = &SchemaVersion{config: svuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, svuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{schemaversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	svuo.mutation.done = true
	return _node, nil
}
