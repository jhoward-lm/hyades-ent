// Code generated by ent, DO NOT EDIT.
// --------------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2025 The DependencyTrack Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// --------------------------------------------------------------------
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// --------------------------------------------------------------------

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"dependencytrack.io/hyades/ent/eventservicelog"
	"dependencytrack.io/hyades/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EventServiceLogUpdate is the builder for updating EventServiceLog entities.
type EventServiceLogUpdate struct {
	config
	hooks    []Hook
	mutation *EventServiceLogMutation
}

// Where appends a list predicates to the EventServiceLogUpdate builder.
func (eslu *EventServiceLogUpdate) Where(ps ...predicate.EventServiceLog) *EventServiceLogUpdate {
	eslu.mutation.Where(ps...)
	return eslu
}

// SetSubscriberclass sets the "subscriberclass" field.
func (eslu *EventServiceLogUpdate) SetSubscriberclass(s string) *EventServiceLogUpdate {
	eslu.mutation.SetSubscriberclass(s)
	return eslu
}

// SetNillableSubscriberclass sets the "subscriberclass" field if the given value is not nil.
func (eslu *EventServiceLogUpdate) SetNillableSubscriberclass(s *string) *EventServiceLogUpdate {
	if s != nil {
		eslu.SetSubscriberclass(*s)
	}
	return eslu
}

// SetStarted sets the "started" field.
func (eslu *EventServiceLogUpdate) SetStarted(t time.Time) *EventServiceLogUpdate {
	eslu.mutation.SetStarted(t)
	return eslu
}

// SetNillableStarted sets the "started" field if the given value is not nil.
func (eslu *EventServiceLogUpdate) SetNillableStarted(t *time.Time) *EventServiceLogUpdate {
	if t != nil {
		eslu.SetStarted(*t)
	}
	return eslu
}

// ClearStarted clears the value of the "started" field.
func (eslu *EventServiceLogUpdate) ClearStarted() *EventServiceLogUpdate {
	eslu.mutation.ClearStarted()
	return eslu
}

// SetCompleted sets the "completed" field.
func (eslu *EventServiceLogUpdate) SetCompleted(t time.Time) *EventServiceLogUpdate {
	eslu.mutation.SetCompleted(t)
	return eslu
}

// SetNillableCompleted sets the "completed" field if the given value is not nil.
func (eslu *EventServiceLogUpdate) SetNillableCompleted(t *time.Time) *EventServiceLogUpdate {
	if t != nil {
		eslu.SetCompleted(*t)
	}
	return eslu
}

// ClearCompleted clears the value of the "completed" field.
func (eslu *EventServiceLogUpdate) ClearCompleted() *EventServiceLogUpdate {
	eslu.mutation.ClearCompleted()
	return eslu
}

// Mutation returns the EventServiceLogMutation object of the builder.
func (eslu *EventServiceLogUpdate) Mutation() *EventServiceLogMutation {
	return eslu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eslu *EventServiceLogUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eslu.sqlSave, eslu.mutation, eslu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eslu *EventServiceLogUpdate) SaveX(ctx context.Context) int {
	affected, err := eslu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eslu *EventServiceLogUpdate) Exec(ctx context.Context) error {
	_, err := eslu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eslu *EventServiceLogUpdate) ExecX(ctx context.Context) {
	if err := eslu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eslu *EventServiceLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(eventservicelog.Table, eventservicelog.Columns, sqlgraph.NewFieldSpec(eventservicelog.FieldID, field.TypeInt))
	if ps := eslu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eslu.mutation.Subscriberclass(); ok {
		_spec.SetField(eventservicelog.FieldSubscriberclass, field.TypeString, value)
	}
	if value, ok := eslu.mutation.Started(); ok {
		_spec.SetField(eventservicelog.FieldStarted, field.TypeTime, value)
	}
	if eslu.mutation.StartedCleared() {
		_spec.ClearField(eventservicelog.FieldStarted, field.TypeTime)
	}
	if value, ok := eslu.mutation.Completed(); ok {
		_spec.SetField(eventservicelog.FieldCompleted, field.TypeTime, value)
	}
	if eslu.mutation.CompletedCleared() {
		_spec.ClearField(eventservicelog.FieldCompleted, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eslu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{eventservicelog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eslu.mutation.done = true
	return n, nil
}

// EventServiceLogUpdateOne is the builder for updating a single EventServiceLog entity.
type EventServiceLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EventServiceLogMutation
}

// SetSubscriberclass sets the "subscriberclass" field.
func (esluo *EventServiceLogUpdateOne) SetSubscriberclass(s string) *EventServiceLogUpdateOne {
	esluo.mutation.SetSubscriberclass(s)
	return esluo
}

// SetNillableSubscriberclass sets the "subscriberclass" field if the given value is not nil.
func (esluo *EventServiceLogUpdateOne) SetNillableSubscriberclass(s *string) *EventServiceLogUpdateOne {
	if s != nil {
		esluo.SetSubscriberclass(*s)
	}
	return esluo
}

// SetStarted sets the "started" field.
func (esluo *EventServiceLogUpdateOne) SetStarted(t time.Time) *EventServiceLogUpdateOne {
	esluo.mutation.SetStarted(t)
	return esluo
}

// SetNillableStarted sets the "started" field if the given value is not nil.
func (esluo *EventServiceLogUpdateOne) SetNillableStarted(t *time.Time) *EventServiceLogUpdateOne {
	if t != nil {
		esluo.SetStarted(*t)
	}
	return esluo
}

// ClearStarted clears the value of the "started" field.
func (esluo *EventServiceLogUpdateOne) ClearStarted() *EventServiceLogUpdateOne {
	esluo.mutation.ClearStarted()
	return esluo
}

// SetCompleted sets the "completed" field.
func (esluo *EventServiceLogUpdateOne) SetCompleted(t time.Time) *EventServiceLogUpdateOne {
	esluo.mutation.SetCompleted(t)
	return esluo
}

// SetNillableCompleted sets the "completed" field if the given value is not nil.
func (esluo *EventServiceLogUpdateOne) SetNillableCompleted(t *time.Time) *EventServiceLogUpdateOne {
	if t != nil {
		esluo.SetCompleted(*t)
	}
	return esluo
}

// ClearCompleted clears the value of the "completed" field.
func (esluo *EventServiceLogUpdateOne) ClearCompleted() *EventServiceLogUpdateOne {
	esluo.mutation.ClearCompleted()
	return esluo
}

// Mutation returns the EventServiceLogMutation object of the builder.
func (esluo *EventServiceLogUpdateOne) Mutation() *EventServiceLogMutation {
	return esluo.mutation
}

// Where appends a list predicates to the EventServiceLogUpdate builder.
func (esluo *EventServiceLogUpdateOne) Where(ps ...predicate.EventServiceLog) *EventServiceLogUpdateOne {
	esluo.mutation.Where(ps...)
	return esluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (esluo *EventServiceLogUpdateOne) Select(field string, fields ...string) *EventServiceLogUpdateOne {
	esluo.fields = append([]string{field}, fields...)
	return esluo
}

// Save executes the query and returns the updated EventServiceLog entity.
func (esluo *EventServiceLogUpdateOne) Save(ctx context.Context) (*EventServiceLog, error) {
	return withHooks(ctx, esluo.sqlSave, esluo.mutation, esluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (esluo *EventServiceLogUpdateOne) SaveX(ctx context.Context) *EventServiceLog {
	node, err := esluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (esluo *EventServiceLogUpdateOne) Exec(ctx context.Context) error {
	_, err := esluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (esluo *EventServiceLogUpdateOne) ExecX(ctx context.Context) {
	if err := esluo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (esluo *EventServiceLogUpdateOne) sqlSave(ctx context.Context) (_node *EventServiceLog, err error) {
	_spec := sqlgraph.NewUpdateSpec(eventservicelog.Table, eventservicelog.Columns, sqlgraph.NewFieldSpec(eventservicelog.FieldID, field.TypeInt))
	id, ok := esluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EventServiceLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := esluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, eventservicelog.FieldID)
		for _, f := range fields {
			if !eventservicelog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != eventservicelog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := esluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := esluo.mutation.Subscriberclass(); ok {
		_spec.SetField(eventservicelog.FieldSubscriberclass, field.TypeString, value)
	}
	if value, ok := esluo.mutation.Started(); ok {
		_spec.SetField(eventservicelog.FieldStarted, field.TypeTime, value)
	}
	if esluo.mutation.StartedCleared() {
		_spec.ClearField(eventservicelog.FieldStarted, field.TypeTime)
	}
	if value, ok := esluo.mutation.Completed(); ok {
		_spec.SetField(eventservicelog.FieldCompleted, field.TypeTime, value)
	}
	if esluo.mutation.CompletedCleared() {
		_spec.ClearField(eventservicelog.FieldCompleted, field.TypeTime)
	}
	_node = &EventServiceLog{config: esluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, esluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{eventservicelog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	esluo.mutation.done = true
	return _node, nil
}
