// Code generated by ent, DO NOT EDIT.
// --------------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2025 The DependencyTrack Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// --------------------------------------------------------------------
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// --------------------------------------------------------------------

package ent

import (
	"context"
	"errors"
	"fmt"

	"dependencytrack.io/hyades/ent/oidcuser"
	"dependencytrack.io/hyades/ent/permission"
	"dependencytrack.io/hyades/ent/predicate"
	"dependencytrack.io/hyades/ent/team"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OIDCUserUpdate is the builder for updating OIDCUser entities.
type OIDCUserUpdate struct {
	config
	hooks    []Hook
	mutation *OIDCUserMutation
}

// Where appends a list predicates to the OIDCUserUpdate builder.
func (ouu *OIDCUserUpdate) Where(ps ...predicate.OIDCUser) *OIDCUserUpdate {
	ouu.mutation.Where(ps...)
	return ouu
}

// SetEmail sets the "email" field.
func (ouu *OIDCUserUpdate) SetEmail(s string) *OIDCUserUpdate {
	ouu.mutation.SetEmail(s)
	return ouu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (ouu *OIDCUserUpdate) SetNillableEmail(s *string) *OIDCUserUpdate {
	if s != nil {
		ouu.SetEmail(*s)
	}
	return ouu
}

// ClearEmail clears the value of the "email" field.
func (ouu *OIDCUserUpdate) ClearEmail() *OIDCUserUpdate {
	ouu.mutation.ClearEmail()
	return ouu
}

// SetSubjectIdentifier sets the "subject_identifier" field.
func (ouu *OIDCUserUpdate) SetSubjectIdentifier(s string) *OIDCUserUpdate {
	ouu.mutation.SetSubjectIdentifier(s)
	return ouu
}

// SetNillableSubjectIdentifier sets the "subject_identifier" field if the given value is not nil.
func (ouu *OIDCUserUpdate) SetNillableSubjectIdentifier(s *string) *OIDCUserUpdate {
	if s != nil {
		ouu.SetSubjectIdentifier(*s)
	}
	return ouu
}

// ClearSubjectIdentifier clears the value of the "subject_identifier" field.
func (ouu *OIDCUserUpdate) ClearSubjectIdentifier() *OIDCUserUpdate {
	ouu.mutation.ClearSubjectIdentifier()
	return ouu
}

// SetUsername sets the "username" field.
func (ouu *OIDCUserUpdate) SetUsername(s string) *OIDCUserUpdate {
	ouu.mutation.SetUsername(s)
	return ouu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (ouu *OIDCUserUpdate) SetNillableUsername(s *string) *OIDCUserUpdate {
	if s != nil {
		ouu.SetUsername(*s)
	}
	return ouu
}

// AddPermissionIDs adds the "permissions" edge to the Permission entity by IDs.
func (ouu *OIDCUserUpdate) AddPermissionIDs(ids ...int) *OIDCUserUpdate {
	ouu.mutation.AddPermissionIDs(ids...)
	return ouu
}

// AddPermissions adds the "permissions" edges to the Permission entity.
func (ouu *OIDCUserUpdate) AddPermissions(p ...*Permission) *OIDCUserUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ouu.AddPermissionIDs(ids...)
}

// AddTeamIDs adds the "teams" edge to the Team entity by IDs.
func (ouu *OIDCUserUpdate) AddTeamIDs(ids ...int) *OIDCUserUpdate {
	ouu.mutation.AddTeamIDs(ids...)
	return ouu
}

// AddTeams adds the "teams" edges to the Team entity.
func (ouu *OIDCUserUpdate) AddTeams(t ...*Team) *OIDCUserUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ouu.AddTeamIDs(ids...)
}

// Mutation returns the OIDCUserMutation object of the builder.
func (ouu *OIDCUserUpdate) Mutation() *OIDCUserMutation {
	return ouu.mutation
}

// ClearPermissions clears all "permissions" edges to the Permission entity.
func (ouu *OIDCUserUpdate) ClearPermissions() *OIDCUserUpdate {
	ouu.mutation.ClearPermissions()
	return ouu
}

// RemovePermissionIDs removes the "permissions" edge to Permission entities by IDs.
func (ouu *OIDCUserUpdate) RemovePermissionIDs(ids ...int) *OIDCUserUpdate {
	ouu.mutation.RemovePermissionIDs(ids...)
	return ouu
}

// RemovePermissions removes "permissions" edges to Permission entities.
func (ouu *OIDCUserUpdate) RemovePermissions(p ...*Permission) *OIDCUserUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ouu.RemovePermissionIDs(ids...)
}

// ClearTeams clears all "teams" edges to the Team entity.
func (ouu *OIDCUserUpdate) ClearTeams() *OIDCUserUpdate {
	ouu.mutation.ClearTeams()
	return ouu
}

// RemoveTeamIDs removes the "teams" edge to Team entities by IDs.
func (ouu *OIDCUserUpdate) RemoveTeamIDs(ids ...int) *OIDCUserUpdate {
	ouu.mutation.RemoveTeamIDs(ids...)
	return ouu
}

// RemoveTeams removes "teams" edges to Team entities.
func (ouu *OIDCUserUpdate) RemoveTeams(t ...*Team) *OIDCUserUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ouu.RemoveTeamIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ouu *OIDCUserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ouu.sqlSave, ouu.mutation, ouu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouu *OIDCUserUpdate) SaveX(ctx context.Context) int {
	affected, err := ouu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ouu *OIDCUserUpdate) Exec(ctx context.Context) error {
	_, err := ouu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouu *OIDCUserUpdate) ExecX(ctx context.Context) {
	if err := ouu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ouu *OIDCUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(oidcuser.Table, oidcuser.Columns, sqlgraph.NewFieldSpec(oidcuser.FieldID, field.TypeInt))
	if ps := ouu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouu.mutation.Email(); ok {
		_spec.SetField(oidcuser.FieldEmail, field.TypeString, value)
	}
	if ouu.mutation.EmailCleared() {
		_spec.ClearField(oidcuser.FieldEmail, field.TypeString)
	}
	if value, ok := ouu.mutation.SubjectIdentifier(); ok {
		_spec.SetField(oidcuser.FieldSubjectIdentifier, field.TypeString, value)
	}
	if ouu.mutation.SubjectIdentifierCleared() {
		_spec.ClearField(oidcuser.FieldSubjectIdentifier, field.TypeString)
	}
	if value, ok := ouu.mutation.Username(); ok {
		_spec.SetField(oidcuser.FieldUsername, field.TypeString, value)
	}
	if ouu.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   oidcuser.PermissionsTable,
			Columns: oidcuser.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouu.mutation.RemovedPermissionsIDs(); len(nodes) > 0 && !ouu.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   oidcuser.PermissionsTable,
			Columns: oidcuser.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouu.mutation.PermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   oidcuser.PermissionsTable,
			Columns: oidcuser.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouu.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   oidcuser.TeamsTable,
			Columns: oidcuser.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouu.mutation.RemovedTeamsIDs(); len(nodes) > 0 && !ouu.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   oidcuser.TeamsTable,
			Columns: oidcuser.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouu.mutation.TeamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   oidcuser.TeamsTable,
			Columns: oidcuser.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ouu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oidcuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ouu.mutation.done = true
	return n, nil
}

// OIDCUserUpdateOne is the builder for updating a single OIDCUser entity.
type OIDCUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OIDCUserMutation
}

// SetEmail sets the "email" field.
func (ouuo *OIDCUserUpdateOne) SetEmail(s string) *OIDCUserUpdateOne {
	ouuo.mutation.SetEmail(s)
	return ouuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (ouuo *OIDCUserUpdateOne) SetNillableEmail(s *string) *OIDCUserUpdateOne {
	if s != nil {
		ouuo.SetEmail(*s)
	}
	return ouuo
}

// ClearEmail clears the value of the "email" field.
func (ouuo *OIDCUserUpdateOne) ClearEmail() *OIDCUserUpdateOne {
	ouuo.mutation.ClearEmail()
	return ouuo
}

// SetSubjectIdentifier sets the "subject_identifier" field.
func (ouuo *OIDCUserUpdateOne) SetSubjectIdentifier(s string) *OIDCUserUpdateOne {
	ouuo.mutation.SetSubjectIdentifier(s)
	return ouuo
}

// SetNillableSubjectIdentifier sets the "subject_identifier" field if the given value is not nil.
func (ouuo *OIDCUserUpdateOne) SetNillableSubjectIdentifier(s *string) *OIDCUserUpdateOne {
	if s != nil {
		ouuo.SetSubjectIdentifier(*s)
	}
	return ouuo
}

// ClearSubjectIdentifier clears the value of the "subject_identifier" field.
func (ouuo *OIDCUserUpdateOne) ClearSubjectIdentifier() *OIDCUserUpdateOne {
	ouuo.mutation.ClearSubjectIdentifier()
	return ouuo
}

// SetUsername sets the "username" field.
func (ouuo *OIDCUserUpdateOne) SetUsername(s string) *OIDCUserUpdateOne {
	ouuo.mutation.SetUsername(s)
	return ouuo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (ouuo *OIDCUserUpdateOne) SetNillableUsername(s *string) *OIDCUserUpdateOne {
	if s != nil {
		ouuo.SetUsername(*s)
	}
	return ouuo
}

// AddPermissionIDs adds the "permissions" edge to the Permission entity by IDs.
func (ouuo *OIDCUserUpdateOne) AddPermissionIDs(ids ...int) *OIDCUserUpdateOne {
	ouuo.mutation.AddPermissionIDs(ids...)
	return ouuo
}

// AddPermissions adds the "permissions" edges to the Permission entity.
func (ouuo *OIDCUserUpdateOne) AddPermissions(p ...*Permission) *OIDCUserUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ouuo.AddPermissionIDs(ids...)
}

// AddTeamIDs adds the "teams" edge to the Team entity by IDs.
func (ouuo *OIDCUserUpdateOne) AddTeamIDs(ids ...int) *OIDCUserUpdateOne {
	ouuo.mutation.AddTeamIDs(ids...)
	return ouuo
}

// AddTeams adds the "teams" edges to the Team entity.
func (ouuo *OIDCUserUpdateOne) AddTeams(t ...*Team) *OIDCUserUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ouuo.AddTeamIDs(ids...)
}

// Mutation returns the OIDCUserMutation object of the builder.
func (ouuo *OIDCUserUpdateOne) Mutation() *OIDCUserMutation {
	return ouuo.mutation
}

// ClearPermissions clears all "permissions" edges to the Permission entity.
func (ouuo *OIDCUserUpdateOne) ClearPermissions() *OIDCUserUpdateOne {
	ouuo.mutation.ClearPermissions()
	return ouuo
}

// RemovePermissionIDs removes the "permissions" edge to Permission entities by IDs.
func (ouuo *OIDCUserUpdateOne) RemovePermissionIDs(ids ...int) *OIDCUserUpdateOne {
	ouuo.mutation.RemovePermissionIDs(ids...)
	return ouuo
}

// RemovePermissions removes "permissions" edges to Permission entities.
func (ouuo *OIDCUserUpdateOne) RemovePermissions(p ...*Permission) *OIDCUserUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ouuo.RemovePermissionIDs(ids...)
}

// ClearTeams clears all "teams" edges to the Team entity.
func (ouuo *OIDCUserUpdateOne) ClearTeams() *OIDCUserUpdateOne {
	ouuo.mutation.ClearTeams()
	return ouuo
}

// RemoveTeamIDs removes the "teams" edge to Team entities by IDs.
func (ouuo *OIDCUserUpdateOne) RemoveTeamIDs(ids ...int) *OIDCUserUpdateOne {
	ouuo.mutation.RemoveTeamIDs(ids...)
	return ouuo
}

// RemoveTeams removes "teams" edges to Team entities.
func (ouuo *OIDCUserUpdateOne) RemoveTeams(t ...*Team) *OIDCUserUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ouuo.RemoveTeamIDs(ids...)
}

// Where appends a list predicates to the OIDCUserUpdate builder.
func (ouuo *OIDCUserUpdateOne) Where(ps ...predicate.OIDCUser) *OIDCUserUpdateOne {
	ouuo.mutation.Where(ps...)
	return ouuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouuo *OIDCUserUpdateOne) Select(field string, fields ...string) *OIDCUserUpdateOne {
	ouuo.fields = append([]string{field}, fields...)
	return ouuo
}

// Save executes the query and returns the updated OIDCUser entity.
func (ouuo *OIDCUserUpdateOne) Save(ctx context.Context) (*OIDCUser, error) {
	return withHooks(ctx, ouuo.sqlSave, ouuo.mutation, ouuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouuo *OIDCUserUpdateOne) SaveX(ctx context.Context) *OIDCUser {
	node, err := ouuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouuo *OIDCUserUpdateOne) Exec(ctx context.Context) error {
	_, err := ouuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouuo *OIDCUserUpdateOne) ExecX(ctx context.Context) {
	if err := ouuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ouuo *OIDCUserUpdateOne) sqlSave(ctx context.Context) (_node *OIDCUser, err error) {
	_spec := sqlgraph.NewUpdateSpec(oidcuser.Table, oidcuser.Columns, sqlgraph.NewFieldSpec(oidcuser.FieldID, field.TypeInt))
	id, ok := ouuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OIDCUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oidcuser.FieldID)
		for _, f := range fields {
			if !oidcuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != oidcuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouuo.mutation.Email(); ok {
		_spec.SetField(oidcuser.FieldEmail, field.TypeString, value)
	}
	if ouuo.mutation.EmailCleared() {
		_spec.ClearField(oidcuser.FieldEmail, field.TypeString)
	}
	if value, ok := ouuo.mutation.SubjectIdentifier(); ok {
		_spec.SetField(oidcuser.FieldSubjectIdentifier, field.TypeString, value)
	}
	if ouuo.mutation.SubjectIdentifierCleared() {
		_spec.ClearField(oidcuser.FieldSubjectIdentifier, field.TypeString)
	}
	if value, ok := ouuo.mutation.Username(); ok {
		_spec.SetField(oidcuser.FieldUsername, field.TypeString, value)
	}
	if ouuo.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   oidcuser.PermissionsTable,
			Columns: oidcuser.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouuo.mutation.RemovedPermissionsIDs(); len(nodes) > 0 && !ouuo.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   oidcuser.PermissionsTable,
			Columns: oidcuser.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouuo.mutation.PermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   oidcuser.PermissionsTable,
			Columns: oidcuser.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouuo.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   oidcuser.TeamsTable,
			Columns: oidcuser.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouuo.mutation.RemovedTeamsIDs(); len(nodes) > 0 && !ouuo.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   oidcuser.TeamsTable,
			Columns: oidcuser.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouuo.mutation.TeamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   oidcuser.TeamsTable,
			Columns: oidcuser.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OIDCUser{config: ouuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oidcuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouuo.mutation.done = true
	return _node, nil
}
