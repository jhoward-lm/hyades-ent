// Code generated by ent, DO NOT EDIT.
// --------------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2025 The DependencyTrack Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// --------------------------------------------------------------------
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// --------------------------------------------------------------------

package ent

import (
	"context"
	"fmt"
	"math"

	"dependencytrack.io/hyades/ent/eventservicelog"
	"dependencytrack.io/hyades/ent/predicate"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EventServiceLogQuery is the builder for querying EventServiceLog entities.
type EventServiceLogQuery struct {
	config
	ctx        *QueryContext
	order      []eventservicelog.OrderOption
	inters     []Interceptor
	predicates []predicate.EventServiceLog
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EventServiceLogQuery builder.
func (eslq *EventServiceLogQuery) Where(ps ...predicate.EventServiceLog) *EventServiceLogQuery {
	eslq.predicates = append(eslq.predicates, ps...)
	return eslq
}

// Limit the number of records to be returned by this query.
func (eslq *EventServiceLogQuery) Limit(limit int) *EventServiceLogQuery {
	eslq.ctx.Limit = &limit
	return eslq
}

// Offset to start from.
func (eslq *EventServiceLogQuery) Offset(offset int) *EventServiceLogQuery {
	eslq.ctx.Offset = &offset
	return eslq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (eslq *EventServiceLogQuery) Unique(unique bool) *EventServiceLogQuery {
	eslq.ctx.Unique = &unique
	return eslq
}

// Order specifies how the records should be ordered.
func (eslq *EventServiceLogQuery) Order(o ...eventservicelog.OrderOption) *EventServiceLogQuery {
	eslq.order = append(eslq.order, o...)
	return eslq
}

// First returns the first EventServiceLog entity from the query.
// Returns a *NotFoundError when no EventServiceLog was found.
func (eslq *EventServiceLogQuery) First(ctx context.Context) (*EventServiceLog, error) {
	nodes, err := eslq.Limit(1).All(setContextOp(ctx, eslq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{eventservicelog.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (eslq *EventServiceLogQuery) FirstX(ctx context.Context) *EventServiceLog {
	node, err := eslq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first EventServiceLog ID from the query.
// Returns a *NotFoundError when no EventServiceLog ID was found.
func (eslq *EventServiceLogQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = eslq.Limit(1).IDs(setContextOp(ctx, eslq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{eventservicelog.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (eslq *EventServiceLogQuery) FirstIDX(ctx context.Context) int {
	id, err := eslq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single EventServiceLog entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one EventServiceLog entity is found.
// Returns a *NotFoundError when no EventServiceLog entities are found.
func (eslq *EventServiceLogQuery) Only(ctx context.Context) (*EventServiceLog, error) {
	nodes, err := eslq.Limit(2).All(setContextOp(ctx, eslq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{eventservicelog.Label}
	default:
		return nil, &NotSingularError{eventservicelog.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (eslq *EventServiceLogQuery) OnlyX(ctx context.Context) *EventServiceLog {
	node, err := eslq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only EventServiceLog ID in the query.
// Returns a *NotSingularError when more than one EventServiceLog ID is found.
// Returns a *NotFoundError when no entities are found.
func (eslq *EventServiceLogQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = eslq.Limit(2).IDs(setContextOp(ctx, eslq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{eventservicelog.Label}
	default:
		err = &NotSingularError{eventservicelog.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (eslq *EventServiceLogQuery) OnlyIDX(ctx context.Context) int {
	id, err := eslq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of EventServiceLogs.
func (eslq *EventServiceLogQuery) All(ctx context.Context) ([]*EventServiceLog, error) {
	ctx = setContextOp(ctx, eslq.ctx, ent.OpQueryAll)
	if err := eslq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*EventServiceLog, *EventServiceLogQuery]()
	return withInterceptors[[]*EventServiceLog](ctx, eslq, qr, eslq.inters)
}

// AllX is like All, but panics if an error occurs.
func (eslq *EventServiceLogQuery) AllX(ctx context.Context) []*EventServiceLog {
	nodes, err := eslq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of EventServiceLog IDs.
func (eslq *EventServiceLogQuery) IDs(ctx context.Context) (ids []int, err error) {
	if eslq.ctx.Unique == nil && eslq.path != nil {
		eslq.Unique(true)
	}
	ctx = setContextOp(ctx, eslq.ctx, ent.OpQueryIDs)
	if err = eslq.Select(eventservicelog.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (eslq *EventServiceLogQuery) IDsX(ctx context.Context) []int {
	ids, err := eslq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (eslq *EventServiceLogQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, eslq.ctx, ent.OpQueryCount)
	if err := eslq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, eslq, querierCount[*EventServiceLogQuery](), eslq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (eslq *EventServiceLogQuery) CountX(ctx context.Context) int {
	count, err := eslq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (eslq *EventServiceLogQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, eslq.ctx, ent.OpQueryExist)
	switch _, err := eslq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (eslq *EventServiceLogQuery) ExistX(ctx context.Context) bool {
	exist, err := eslq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EventServiceLogQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (eslq *EventServiceLogQuery) Clone() *EventServiceLogQuery {
	if eslq == nil {
		return nil
	}
	return &EventServiceLogQuery{
		config:     eslq.config,
		ctx:        eslq.ctx.Clone(),
		order:      append([]eventservicelog.OrderOption{}, eslq.order...),
		inters:     append([]Interceptor{}, eslq.inters...),
		predicates: append([]predicate.EventServiceLog{}, eslq.predicates...),
		// clone intermediate query.
		sql:  eslq.sql.Clone(),
		path: eslq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Subscriberclass string `json:"subscriberclass,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.EventServiceLog.Query().
//		GroupBy(eventservicelog.FieldSubscriberclass).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (eslq *EventServiceLogQuery) GroupBy(field string, fields ...string) *EventServiceLogGroupBy {
	eslq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &EventServiceLogGroupBy{build: eslq}
	grbuild.flds = &eslq.ctx.Fields
	grbuild.label = eventservicelog.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Subscriberclass string `json:"subscriberclass,omitempty"`
//	}
//
//	client.EventServiceLog.Query().
//		Select(eventservicelog.FieldSubscriberclass).
//		Scan(ctx, &v)
func (eslq *EventServiceLogQuery) Select(fields ...string) *EventServiceLogSelect {
	eslq.ctx.Fields = append(eslq.ctx.Fields, fields...)
	sbuild := &EventServiceLogSelect{EventServiceLogQuery: eslq}
	sbuild.label = eventservicelog.Label
	sbuild.flds, sbuild.scan = &eslq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a EventServiceLogSelect configured with the given aggregations.
func (eslq *EventServiceLogQuery) Aggregate(fns ...AggregateFunc) *EventServiceLogSelect {
	return eslq.Select().Aggregate(fns...)
}

func (eslq *EventServiceLogQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range eslq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, eslq); err != nil {
				return err
			}
		}
	}
	for _, f := range eslq.ctx.Fields {
		if !eventservicelog.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if eslq.path != nil {
		prev, err := eslq.path(ctx)
		if err != nil {
			return err
		}
		eslq.sql = prev
	}
	return nil
}

func (eslq *EventServiceLogQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*EventServiceLog, error) {
	var (
		nodes = []*EventServiceLog{}
		_spec = eslq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*EventServiceLog).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &EventServiceLog{config: eslq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, eslq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (eslq *EventServiceLogQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := eslq.querySpec()
	_spec.Node.Columns = eslq.ctx.Fields
	if len(eslq.ctx.Fields) > 0 {
		_spec.Unique = eslq.ctx.Unique != nil && *eslq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, eslq.driver, _spec)
}

func (eslq *EventServiceLogQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(eventservicelog.Table, eventservicelog.Columns, sqlgraph.NewFieldSpec(eventservicelog.FieldID, field.TypeInt))
	_spec.From = eslq.sql
	if unique := eslq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if eslq.path != nil {
		_spec.Unique = true
	}
	if fields := eslq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, eventservicelog.FieldID)
		for i := range fields {
			if fields[i] != eventservicelog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := eslq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := eslq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := eslq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := eslq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (eslq *EventServiceLogQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(eslq.driver.Dialect())
	t1 := builder.Table(eventservicelog.Table)
	columns := eslq.ctx.Fields
	if len(columns) == 0 {
		columns = eventservicelog.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if eslq.sql != nil {
		selector = eslq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if eslq.ctx.Unique != nil && *eslq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range eslq.predicates {
		p(selector)
	}
	for _, p := range eslq.order {
		p(selector)
	}
	if offset := eslq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := eslq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// EventServiceLogGroupBy is the group-by builder for EventServiceLog entities.
type EventServiceLogGroupBy struct {
	selector
	build *EventServiceLogQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (eslgb *EventServiceLogGroupBy) Aggregate(fns ...AggregateFunc) *EventServiceLogGroupBy {
	eslgb.fns = append(eslgb.fns, fns...)
	return eslgb
}

// Scan applies the selector query and scans the result into the given value.
func (eslgb *EventServiceLogGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, eslgb.build.ctx, ent.OpQueryGroupBy)
	if err := eslgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EventServiceLogQuery, *EventServiceLogGroupBy](ctx, eslgb.build, eslgb, eslgb.build.inters, v)
}

func (eslgb *EventServiceLogGroupBy) sqlScan(ctx context.Context, root *EventServiceLogQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(eslgb.fns))
	for _, fn := range eslgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*eslgb.flds)+len(eslgb.fns))
		for _, f := range *eslgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*eslgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := eslgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// EventServiceLogSelect is the builder for selecting fields of EventServiceLog entities.
type EventServiceLogSelect struct {
	*EventServiceLogQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (esls *EventServiceLogSelect) Aggregate(fns ...AggregateFunc) *EventServiceLogSelect {
	esls.fns = append(esls.fns, fns...)
	return esls
}

// Scan applies the selector query and scans the result into the given value.
func (esls *EventServiceLogSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, esls.ctx, ent.OpQuerySelect)
	if err := esls.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EventServiceLogQuery, *EventServiceLogSelect](ctx, esls.EventServiceLogQuery, esls, esls.inters, v)
}

func (esls *EventServiceLogSelect) sqlScan(ctx context.Context, root *EventServiceLogQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(esls.fns))
	for _, fn := range esls.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*esls.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := esls.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
