// Code generated by ent, DO NOT EDIT.
// --------------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2025 The DependencyTrack Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// --------------------------------------------------------------------
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// --------------------------------------------------------------------

package ldapuser

import (
	"dependencytrack.io/hyades/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.LDAPUser {
	return predicate.LDAPUser(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.LDAPUser {
	return predicate.LDAPUser(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.LDAPUser {
	return predicate.LDAPUser(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.LDAPUser {
	return predicate.LDAPUser(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.LDAPUser {
	return predicate.LDAPUser(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.LDAPUser {
	return predicate.LDAPUser(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.LDAPUser {
	return predicate.LDAPUser(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.LDAPUser {
	return predicate.LDAPUser(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.LDAPUser {
	return predicate.LDAPUser(sql.FieldLTE(FieldID, id))
}

// Dn applies equality check predicate on the "dn" field. It's identical to DnEQ.
func Dn(v string) predicate.LDAPUser {
	return predicate.LDAPUser(sql.FieldEQ(FieldDn, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.LDAPUser {
	return predicate.LDAPUser(sql.FieldEQ(FieldEmail, v))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.LDAPUser {
	return predicate.LDAPUser(sql.FieldEQ(FieldUsername, v))
}

// DnEQ applies the EQ predicate on the "dn" field.
func DnEQ(v string) predicate.LDAPUser {
	return predicate.LDAPUser(sql.FieldEQ(FieldDn, v))
}

// DnNEQ applies the NEQ predicate on the "dn" field.
func DnNEQ(v string) predicate.LDAPUser {
	return predicate.LDAPUser(sql.FieldNEQ(FieldDn, v))
}

// DnIn applies the In predicate on the "dn" field.
func DnIn(vs ...string) predicate.LDAPUser {
	return predicate.LDAPUser(sql.FieldIn(FieldDn, vs...))
}

// DnNotIn applies the NotIn predicate on the "dn" field.
func DnNotIn(vs ...string) predicate.LDAPUser {
	return predicate.LDAPUser(sql.FieldNotIn(FieldDn, vs...))
}

// DnGT applies the GT predicate on the "dn" field.
func DnGT(v string) predicate.LDAPUser {
	return predicate.LDAPUser(sql.FieldGT(FieldDn, v))
}

// DnGTE applies the GTE predicate on the "dn" field.
func DnGTE(v string) predicate.LDAPUser {
	return predicate.LDAPUser(sql.FieldGTE(FieldDn, v))
}

// DnLT applies the LT predicate on the "dn" field.
func DnLT(v string) predicate.LDAPUser {
	return predicate.LDAPUser(sql.FieldLT(FieldDn, v))
}

// DnLTE applies the LTE predicate on the "dn" field.
func DnLTE(v string) predicate.LDAPUser {
	return predicate.LDAPUser(sql.FieldLTE(FieldDn, v))
}

// DnContains applies the Contains predicate on the "dn" field.
func DnContains(v string) predicate.LDAPUser {
	return predicate.LDAPUser(sql.FieldContains(FieldDn, v))
}

// DnHasPrefix applies the HasPrefix predicate on the "dn" field.
func DnHasPrefix(v string) predicate.LDAPUser {
	return predicate.LDAPUser(sql.FieldHasPrefix(FieldDn, v))
}

// DnHasSuffix applies the HasSuffix predicate on the "dn" field.
func DnHasSuffix(v string) predicate.LDAPUser {
	return predicate.LDAPUser(sql.FieldHasSuffix(FieldDn, v))
}

// DnEqualFold applies the EqualFold predicate on the "dn" field.
func DnEqualFold(v string) predicate.LDAPUser {
	return predicate.LDAPUser(sql.FieldEqualFold(FieldDn, v))
}

// DnContainsFold applies the ContainsFold predicate on the "dn" field.
func DnContainsFold(v string) predicate.LDAPUser {
	return predicate.LDAPUser(sql.FieldContainsFold(FieldDn, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.LDAPUser {
	return predicate.LDAPUser(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.LDAPUser {
	return predicate.LDAPUser(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.LDAPUser {
	return predicate.LDAPUser(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.LDAPUser {
	return predicate.LDAPUser(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.LDAPUser {
	return predicate.LDAPUser(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.LDAPUser {
	return predicate.LDAPUser(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.LDAPUser {
	return predicate.LDAPUser(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.LDAPUser {
	return predicate.LDAPUser(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.LDAPUser {
	return predicate.LDAPUser(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.LDAPUser {
	return predicate.LDAPUser(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.LDAPUser {
	return predicate.LDAPUser(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailIsNil applies the IsNil predicate on the "email" field.
func EmailIsNil() predicate.LDAPUser {
	return predicate.LDAPUser(sql.FieldIsNull(FieldEmail))
}

// EmailNotNil applies the NotNil predicate on the "email" field.
func EmailNotNil() predicate.LDAPUser {
	return predicate.LDAPUser(sql.FieldNotNull(FieldEmail))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.LDAPUser {
	return predicate.LDAPUser(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.LDAPUser {
	return predicate.LDAPUser(sql.FieldContainsFold(FieldEmail, v))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.LDAPUser {
	return predicate.LDAPUser(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.LDAPUser {
	return predicate.LDAPUser(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.LDAPUser {
	return predicate.LDAPUser(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.LDAPUser {
	return predicate.LDAPUser(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.LDAPUser {
	return predicate.LDAPUser(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.LDAPUser {
	return predicate.LDAPUser(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.LDAPUser {
	return predicate.LDAPUser(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.LDAPUser {
	return predicate.LDAPUser(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.LDAPUser {
	return predicate.LDAPUser(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.LDAPUser {
	return predicate.LDAPUser(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.LDAPUser {
	return predicate.LDAPUser(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameIsNil applies the IsNil predicate on the "username" field.
func UsernameIsNil() predicate.LDAPUser {
	return predicate.LDAPUser(sql.FieldIsNull(FieldUsername))
}

// UsernameNotNil applies the NotNil predicate on the "username" field.
func UsernameNotNil() predicate.LDAPUser {
	return predicate.LDAPUser(sql.FieldNotNull(FieldUsername))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.LDAPUser {
	return predicate.LDAPUser(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.LDAPUser {
	return predicate.LDAPUser(sql.FieldContainsFold(FieldUsername, v))
}

// HasPermissions applies the HasEdge predicate on the "permissions" edge.
func HasPermissions() predicate.LDAPUser {
	return predicate.LDAPUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, PermissionsTable, PermissionsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPermissionsWith applies the HasEdge predicate on the "permissions" edge with a given conditions (other predicates).
func HasPermissionsWith(preds ...predicate.Permission) predicate.LDAPUser {
	return predicate.LDAPUser(func(s *sql.Selector) {
		step := newPermissionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTeams applies the HasEdge predicate on the "teams" edge.
func HasTeams() predicate.LDAPUser {
	return predicate.LDAPUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, TeamsTable, TeamsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTeamsWith applies the HasEdge predicate on the "teams" edge with a given conditions (other predicates).
func HasTeamsWith(preds ...predicate.Team) predicate.LDAPUser {
	return predicate.LDAPUser(func(s *sql.Selector) {
		step := newTeamsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.LDAPUser) predicate.LDAPUser {
	return predicate.LDAPUser(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.LDAPUser) predicate.LDAPUser {
	return predicate.LDAPUser(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.LDAPUser) predicate.LDAPUser {
	return predicate.LDAPUser(sql.NotPredicates(p))
}
