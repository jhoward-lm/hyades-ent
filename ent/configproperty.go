// Code generated by ent, DO NOT EDIT.
// --------------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2025 The DependencyTrack Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// --------------------------------------------------------------------
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// --------------------------------------------------------------------

package ent

import (
	"fmt"
	"strings"

	"dependencytrack.io/hyades/ent/configproperty"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ConfigProperty is the model entity for the ConfigProperty schema.
type ConfigProperty struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Groupname holds the value of the "groupname" field.
	Groupname string `json:"groupname,omitempty"`
	// Propertyname holds the value of the "propertyname" field.
	Propertyname string `json:"propertyname,omitempty"`
	// Propertytype holds the value of the "propertytype" field.
	Propertytype string `json:"propertytype,omitempty"`
	// Propertyvalue holds the value of the "propertyvalue" field.
	Propertyvalue string `json:"propertyvalue,omitempty"`
	selectValues  sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ConfigProperty) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case configproperty.FieldID:
			values[i] = new(sql.NullInt64)
		case configproperty.FieldDescription, configproperty.FieldGroupname, configproperty.FieldPropertyname, configproperty.FieldPropertytype, configproperty.FieldPropertyvalue:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ConfigProperty fields.
func (cp *ConfigProperty) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case configproperty.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cp.ID = int(value.Int64)
		case configproperty.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				cp.Description = value.String
			}
		case configproperty.FieldGroupname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field groupname", values[i])
			} else if value.Valid {
				cp.Groupname = value.String
			}
		case configproperty.FieldPropertyname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field propertyname", values[i])
			} else if value.Valid {
				cp.Propertyname = value.String
			}
		case configproperty.FieldPropertytype:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field propertytype", values[i])
			} else if value.Valid {
				cp.Propertytype = value.String
			}
		case configproperty.FieldPropertyvalue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field propertyvalue", values[i])
			} else if value.Valid {
				cp.Propertyvalue = value.String
			}
		default:
			cp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ConfigProperty.
// This includes values selected through modifiers, order, etc.
func (cp *ConfigProperty) Value(name string) (ent.Value, error) {
	return cp.selectValues.Get(name)
}

// Update returns a builder for updating this ConfigProperty.
// Note that you need to call ConfigProperty.Unwrap() before calling this method if this ConfigProperty
// was returned from a transaction, and the transaction was committed or rolled back.
func (cp *ConfigProperty) Update() *ConfigPropertyUpdateOne {
	return NewConfigPropertyClient(cp.config).UpdateOne(cp)
}

// Unwrap unwraps the ConfigProperty entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cp *ConfigProperty) Unwrap() *ConfigProperty {
	_tx, ok := cp.config.driver.(*txDriver)
	if !ok {
		panic("ent: ConfigProperty is not a transactional entity")
	}
	cp.config.driver = _tx.drv
	return cp
}

// String implements the fmt.Stringer.
func (cp *ConfigProperty) String() string {
	var builder strings.Builder
	builder.WriteString("ConfigProperty(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cp.ID))
	builder.WriteString("description=")
	builder.WriteString(cp.Description)
	builder.WriteString(", ")
	builder.WriteString("groupname=")
	builder.WriteString(cp.Groupname)
	builder.WriteString(", ")
	builder.WriteString("propertyname=")
	builder.WriteString(cp.Propertyname)
	builder.WriteString(", ")
	builder.WriteString("propertytype=")
	builder.WriteString(cp.Propertytype)
	builder.WriteString(", ")
	builder.WriteString("propertyvalue=")
	builder.WriteString(cp.Propertyvalue)
	builder.WriteByte(')')
	return builder.String()
}

// ConfigProperties is a parsable slice of ConfigProperty.
type ConfigProperties []*ConfigProperty
