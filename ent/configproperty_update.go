// Code generated by ent, DO NOT EDIT.
// --------------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2025 The DependencyTrack Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// --------------------------------------------------------------------
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// --------------------------------------------------------------------

package ent

import (
	"context"
	"errors"
	"fmt"

	"dependencytrack.io/hyades/ent/configproperty"
	"dependencytrack.io/hyades/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ConfigPropertyUpdate is the builder for updating ConfigProperty entities.
type ConfigPropertyUpdate struct {
	config
	hooks    []Hook
	mutation *ConfigPropertyMutation
}

// Where appends a list predicates to the ConfigPropertyUpdate builder.
func (cpu *ConfigPropertyUpdate) Where(ps ...predicate.ConfigProperty) *ConfigPropertyUpdate {
	cpu.mutation.Where(ps...)
	return cpu
}

// SetDescription sets the "description" field.
func (cpu *ConfigPropertyUpdate) SetDescription(s string) *ConfigPropertyUpdate {
	cpu.mutation.SetDescription(s)
	return cpu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cpu *ConfigPropertyUpdate) SetNillableDescription(s *string) *ConfigPropertyUpdate {
	if s != nil {
		cpu.SetDescription(*s)
	}
	return cpu
}

// ClearDescription clears the value of the "description" field.
func (cpu *ConfigPropertyUpdate) ClearDescription() *ConfigPropertyUpdate {
	cpu.mutation.ClearDescription()
	return cpu
}

// SetGroupname sets the "groupname" field.
func (cpu *ConfigPropertyUpdate) SetGroupname(s string) *ConfigPropertyUpdate {
	cpu.mutation.SetGroupname(s)
	return cpu
}

// SetNillableGroupname sets the "groupname" field if the given value is not nil.
func (cpu *ConfigPropertyUpdate) SetNillableGroupname(s *string) *ConfigPropertyUpdate {
	if s != nil {
		cpu.SetGroupname(*s)
	}
	return cpu
}

// SetPropertyname sets the "propertyname" field.
func (cpu *ConfigPropertyUpdate) SetPropertyname(s string) *ConfigPropertyUpdate {
	cpu.mutation.SetPropertyname(s)
	return cpu
}

// SetNillablePropertyname sets the "propertyname" field if the given value is not nil.
func (cpu *ConfigPropertyUpdate) SetNillablePropertyname(s *string) *ConfigPropertyUpdate {
	if s != nil {
		cpu.SetPropertyname(*s)
	}
	return cpu
}

// SetPropertytype sets the "propertytype" field.
func (cpu *ConfigPropertyUpdate) SetPropertytype(s string) *ConfigPropertyUpdate {
	cpu.mutation.SetPropertytype(s)
	return cpu
}

// SetNillablePropertytype sets the "propertytype" field if the given value is not nil.
func (cpu *ConfigPropertyUpdate) SetNillablePropertytype(s *string) *ConfigPropertyUpdate {
	if s != nil {
		cpu.SetPropertytype(*s)
	}
	return cpu
}

// SetPropertyvalue sets the "propertyvalue" field.
func (cpu *ConfigPropertyUpdate) SetPropertyvalue(s string) *ConfigPropertyUpdate {
	cpu.mutation.SetPropertyvalue(s)
	return cpu
}

// SetNillablePropertyvalue sets the "propertyvalue" field if the given value is not nil.
func (cpu *ConfigPropertyUpdate) SetNillablePropertyvalue(s *string) *ConfigPropertyUpdate {
	if s != nil {
		cpu.SetPropertyvalue(*s)
	}
	return cpu
}

// ClearPropertyvalue clears the value of the "propertyvalue" field.
func (cpu *ConfigPropertyUpdate) ClearPropertyvalue() *ConfigPropertyUpdate {
	cpu.mutation.ClearPropertyvalue()
	return cpu
}

// Mutation returns the ConfigPropertyMutation object of the builder.
func (cpu *ConfigPropertyUpdate) Mutation() *ConfigPropertyMutation {
	return cpu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cpu *ConfigPropertyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cpu.sqlSave, cpu.mutation, cpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cpu *ConfigPropertyUpdate) SaveX(ctx context.Context) int {
	affected, err := cpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cpu *ConfigPropertyUpdate) Exec(ctx context.Context) error {
	_, err := cpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpu *ConfigPropertyUpdate) ExecX(ctx context.Context) {
	if err := cpu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cpu *ConfigPropertyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(configproperty.Table, configproperty.Columns, sqlgraph.NewFieldSpec(configproperty.FieldID, field.TypeInt))
	if ps := cpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cpu.mutation.Description(); ok {
		_spec.SetField(configproperty.FieldDescription, field.TypeString, value)
	}
	if cpu.mutation.DescriptionCleared() {
		_spec.ClearField(configproperty.FieldDescription, field.TypeString)
	}
	if value, ok := cpu.mutation.Groupname(); ok {
		_spec.SetField(configproperty.FieldGroupname, field.TypeString, value)
	}
	if value, ok := cpu.mutation.Propertyname(); ok {
		_spec.SetField(configproperty.FieldPropertyname, field.TypeString, value)
	}
	if value, ok := cpu.mutation.Propertytype(); ok {
		_spec.SetField(configproperty.FieldPropertytype, field.TypeString, value)
	}
	if value, ok := cpu.mutation.Propertyvalue(); ok {
		_spec.SetField(configproperty.FieldPropertyvalue, field.TypeString, value)
	}
	if cpu.mutation.PropertyvalueCleared() {
		_spec.ClearField(configproperty.FieldPropertyvalue, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{configproperty.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cpu.mutation.done = true
	return n, nil
}

// ConfigPropertyUpdateOne is the builder for updating a single ConfigProperty entity.
type ConfigPropertyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ConfigPropertyMutation
}

// SetDescription sets the "description" field.
func (cpuo *ConfigPropertyUpdateOne) SetDescription(s string) *ConfigPropertyUpdateOne {
	cpuo.mutation.SetDescription(s)
	return cpuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cpuo *ConfigPropertyUpdateOne) SetNillableDescription(s *string) *ConfigPropertyUpdateOne {
	if s != nil {
		cpuo.SetDescription(*s)
	}
	return cpuo
}

// ClearDescription clears the value of the "description" field.
func (cpuo *ConfigPropertyUpdateOne) ClearDescription() *ConfigPropertyUpdateOne {
	cpuo.mutation.ClearDescription()
	return cpuo
}

// SetGroupname sets the "groupname" field.
func (cpuo *ConfigPropertyUpdateOne) SetGroupname(s string) *ConfigPropertyUpdateOne {
	cpuo.mutation.SetGroupname(s)
	return cpuo
}

// SetNillableGroupname sets the "groupname" field if the given value is not nil.
func (cpuo *ConfigPropertyUpdateOne) SetNillableGroupname(s *string) *ConfigPropertyUpdateOne {
	if s != nil {
		cpuo.SetGroupname(*s)
	}
	return cpuo
}

// SetPropertyname sets the "propertyname" field.
func (cpuo *ConfigPropertyUpdateOne) SetPropertyname(s string) *ConfigPropertyUpdateOne {
	cpuo.mutation.SetPropertyname(s)
	return cpuo
}

// SetNillablePropertyname sets the "propertyname" field if the given value is not nil.
func (cpuo *ConfigPropertyUpdateOne) SetNillablePropertyname(s *string) *ConfigPropertyUpdateOne {
	if s != nil {
		cpuo.SetPropertyname(*s)
	}
	return cpuo
}

// SetPropertytype sets the "propertytype" field.
func (cpuo *ConfigPropertyUpdateOne) SetPropertytype(s string) *ConfigPropertyUpdateOne {
	cpuo.mutation.SetPropertytype(s)
	return cpuo
}

// SetNillablePropertytype sets the "propertytype" field if the given value is not nil.
func (cpuo *ConfigPropertyUpdateOne) SetNillablePropertytype(s *string) *ConfigPropertyUpdateOne {
	if s != nil {
		cpuo.SetPropertytype(*s)
	}
	return cpuo
}

// SetPropertyvalue sets the "propertyvalue" field.
func (cpuo *ConfigPropertyUpdateOne) SetPropertyvalue(s string) *ConfigPropertyUpdateOne {
	cpuo.mutation.SetPropertyvalue(s)
	return cpuo
}

// SetNillablePropertyvalue sets the "propertyvalue" field if the given value is not nil.
func (cpuo *ConfigPropertyUpdateOne) SetNillablePropertyvalue(s *string) *ConfigPropertyUpdateOne {
	if s != nil {
		cpuo.SetPropertyvalue(*s)
	}
	return cpuo
}

// ClearPropertyvalue clears the value of the "propertyvalue" field.
func (cpuo *ConfigPropertyUpdateOne) ClearPropertyvalue() *ConfigPropertyUpdateOne {
	cpuo.mutation.ClearPropertyvalue()
	return cpuo
}

// Mutation returns the ConfigPropertyMutation object of the builder.
func (cpuo *ConfigPropertyUpdateOne) Mutation() *ConfigPropertyMutation {
	return cpuo.mutation
}

// Where appends a list predicates to the ConfigPropertyUpdate builder.
func (cpuo *ConfigPropertyUpdateOne) Where(ps ...predicate.ConfigProperty) *ConfigPropertyUpdateOne {
	cpuo.mutation.Where(ps...)
	return cpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cpuo *ConfigPropertyUpdateOne) Select(field string, fields ...string) *ConfigPropertyUpdateOne {
	cpuo.fields = append([]string{field}, fields...)
	return cpuo
}

// Save executes the query and returns the updated ConfigProperty entity.
func (cpuo *ConfigPropertyUpdateOne) Save(ctx context.Context) (*ConfigProperty, error) {
	return withHooks(ctx, cpuo.sqlSave, cpuo.mutation, cpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cpuo *ConfigPropertyUpdateOne) SaveX(ctx context.Context) *ConfigProperty {
	node, err := cpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cpuo *ConfigPropertyUpdateOne) Exec(ctx context.Context) error {
	_, err := cpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpuo *ConfigPropertyUpdateOne) ExecX(ctx context.Context) {
	if err := cpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cpuo *ConfigPropertyUpdateOne) sqlSave(ctx context.Context) (_node *ConfigProperty, err error) {
	_spec := sqlgraph.NewUpdateSpec(configproperty.Table, configproperty.Columns, sqlgraph.NewFieldSpec(configproperty.FieldID, field.TypeInt))
	id, ok := cpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ConfigProperty.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, configproperty.FieldID)
		for _, f := range fields {
			if !configproperty.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != configproperty.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cpuo.mutation.Description(); ok {
		_spec.SetField(configproperty.FieldDescription, field.TypeString, value)
	}
	if cpuo.mutation.DescriptionCleared() {
		_spec.ClearField(configproperty.FieldDescription, field.TypeString)
	}
	if value, ok := cpuo.mutation.Groupname(); ok {
		_spec.SetField(configproperty.FieldGroupname, field.TypeString, value)
	}
	if value, ok := cpuo.mutation.Propertyname(); ok {
		_spec.SetField(configproperty.FieldPropertyname, field.TypeString, value)
	}
	if value, ok := cpuo.mutation.Propertytype(); ok {
		_spec.SetField(configproperty.FieldPropertytype, field.TypeString, value)
	}
	if value, ok := cpuo.mutation.Propertyvalue(); ok {
		_spec.SetField(configproperty.FieldPropertyvalue, field.TypeString, value)
	}
	if cpuo.mutation.PropertyvalueCleared() {
		_spec.ClearField(configproperty.FieldPropertyvalue, field.TypeString)
	}
	_node = &ConfigProperty{config: cpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{configproperty.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cpuo.mutation.done = true
	return _node, nil
}
