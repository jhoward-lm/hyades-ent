// Code generated by ent, DO NOT EDIT.
// --------------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2025 The DependencyTrack Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// --------------------------------------------------------------------
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// --------------------------------------------------------------------

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"dependencytrack.io/hyades/ent/team"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Team is the model entity for the Team schema.
type Team struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID uuid.UUID `json:"uuid,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TeamQuery when eager-loading is set.
	Edges        TeamEdges `json:"-"`
	selectValues sql.SelectValues
}

// TeamEdges holds the relations/edges for other nodes in the graph.
type TeamEdges struct {
	// APIKeys holds the value of the api_keys edge.
	APIKeys []*APIKey `json:"api_keys,omitempty"`
	// Permissions holds the value of the permissions edge.
	Permissions []*Permission `json:"permissions,omitempty"`
	// OidcGroups holds the value of the oidc_groups edge.
	OidcGroups []*OIDCGroup `json:"oidc_groups,omitempty"`
	// MappedLdapGroups holds the value of the mapped_ldap_groups edge.
	MappedLdapGroups []*MappedLDAPGroup `json:"mapped_ldap_groups,omitempty"`
	// MappedOidcGroups holds the value of the mapped_oidc_groups edge.
	MappedOidcGroups []*MappedOIDCGroup `json:"mapped_oidc_groups,omitempty"`
	// LdapUsers holds the value of the ldap_users edge.
	LdapUsers []*LDAPUser `json:"-"`
	// ManagedUsers holds the value of the managed_users edge.
	ManagedUsers []*ManagedUser `json:"-"`
	// OidcUsers holds the value of the oidc_users edge.
	OidcUsers []*OIDCUser `json:"-"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [8]bool
}

// APIKeysOrErr returns the APIKeys value or an error if the edge
// was not loaded in eager-loading.
func (e TeamEdges) APIKeysOrErr() ([]*APIKey, error) {
	if e.loadedTypes[0] {
		return e.APIKeys, nil
	}
	return nil, &NotLoadedError{edge: "api_keys"}
}

// PermissionsOrErr returns the Permissions value or an error if the edge
// was not loaded in eager-loading.
func (e TeamEdges) PermissionsOrErr() ([]*Permission, error) {
	if e.loadedTypes[1] {
		return e.Permissions, nil
	}
	return nil, &NotLoadedError{edge: "permissions"}
}

// OidcGroupsOrErr returns the OidcGroups value or an error if the edge
// was not loaded in eager-loading.
func (e TeamEdges) OidcGroupsOrErr() ([]*OIDCGroup, error) {
	if e.loadedTypes[2] {
		return e.OidcGroups, nil
	}
	return nil, &NotLoadedError{edge: "oidc_groups"}
}

// MappedLdapGroupsOrErr returns the MappedLdapGroups value or an error if the edge
// was not loaded in eager-loading.
func (e TeamEdges) MappedLdapGroupsOrErr() ([]*MappedLDAPGroup, error) {
	if e.loadedTypes[3] {
		return e.MappedLdapGroups, nil
	}
	return nil, &NotLoadedError{edge: "mapped_ldap_groups"}
}

// MappedOidcGroupsOrErr returns the MappedOidcGroups value or an error if the edge
// was not loaded in eager-loading.
func (e TeamEdges) MappedOidcGroupsOrErr() ([]*MappedOIDCGroup, error) {
	if e.loadedTypes[4] {
		return e.MappedOidcGroups, nil
	}
	return nil, &NotLoadedError{edge: "mapped_oidc_groups"}
}

// LdapUsersOrErr returns the LdapUsers value or an error if the edge
// was not loaded in eager-loading.
func (e TeamEdges) LdapUsersOrErr() ([]*LDAPUser, error) {
	if e.loadedTypes[5] {
		return e.LdapUsers, nil
	}
	return nil, &NotLoadedError{edge: "ldap_users"}
}

// ManagedUsersOrErr returns the ManagedUsers value or an error if the edge
// was not loaded in eager-loading.
func (e TeamEdges) ManagedUsersOrErr() ([]*ManagedUser, error) {
	if e.loadedTypes[6] {
		return e.ManagedUsers, nil
	}
	return nil, &NotLoadedError{edge: "managed_users"}
}

// OidcUsersOrErr returns the OidcUsers value or an error if the edge
// was not loaded in eager-loading.
func (e TeamEdges) OidcUsersOrErr() ([]*OIDCUser, error) {
	if e.loadedTypes[7] {
		return e.OidcUsers, nil
	}
	return nil, &NotLoadedError{edge: "oidc_users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Team) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case team.FieldID:
			values[i] = new(sql.NullInt64)
		case team.FieldName:
			values[i] = new(sql.NullString)
		case team.FieldUUID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Team fields.
func (t *Team) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case team.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case team.FieldUUID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value != nil {
				t.UUID = *value
			}
		case team.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				t.Name = value.String
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Team.
// This includes values selected through modifiers, order, etc.
func (t *Team) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryAPIKeys queries the "api_keys" edge of the Team entity.
func (t *Team) QueryAPIKeys() *APIKeyQuery {
	return NewTeamClient(t.config).QueryAPIKeys(t)
}

// QueryPermissions queries the "permissions" edge of the Team entity.
func (t *Team) QueryPermissions() *PermissionQuery {
	return NewTeamClient(t.config).QueryPermissions(t)
}

// QueryOidcGroups queries the "oidc_groups" edge of the Team entity.
func (t *Team) QueryOidcGroups() *OIDCGroupQuery {
	return NewTeamClient(t.config).QueryOidcGroups(t)
}

// QueryMappedLdapGroups queries the "mapped_ldap_groups" edge of the Team entity.
func (t *Team) QueryMappedLdapGroups() *MappedLDAPGroupQuery {
	return NewTeamClient(t.config).QueryMappedLdapGroups(t)
}

// QueryMappedOidcGroups queries the "mapped_oidc_groups" edge of the Team entity.
func (t *Team) QueryMappedOidcGroups() *MappedOIDCGroupQuery {
	return NewTeamClient(t.config).QueryMappedOidcGroups(t)
}

// QueryLdapUsers queries the "ldap_users" edge of the Team entity.
func (t *Team) QueryLdapUsers() *LDAPUserQuery {
	return NewTeamClient(t.config).QueryLdapUsers(t)
}

// QueryManagedUsers queries the "managed_users" edge of the Team entity.
func (t *Team) QueryManagedUsers() *ManagedUserQuery {
	return NewTeamClient(t.config).QueryManagedUsers(t)
}

// QueryOidcUsers queries the "oidc_users" edge of the Team entity.
func (t *Team) QueryOidcUsers() *OIDCUserQuery {
	return NewTeamClient(t.config).QueryOidcUsers(t)
}

// Update returns a builder for updating this Team.
// Note that you need to call Team.Unwrap() before calling this method if this Team
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Team) Update() *TeamUpdateOne {
	return NewTeamClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Team entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Team) Unwrap() *Team {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Team is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Team) String() string {
	var builder strings.Builder
	builder.WriteString("Team(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("uuid=")
	builder.WriteString(fmt.Sprintf("%v", t.UUID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(t.Name)
	builder.WriteByte(')')
	return builder.String()
}

// MarshalJSON implements the json.Marshaler interface.
func (t *Team) MarshalJSON() ([]byte, error) {
	type Alias Team
	return json.Marshal(&struct {
		*Alias
		TeamEdges
	}{
		Alias:     (*Alias)(t),
		TeamEdges: t.Edges,
	})
}

// Teams is a parsable slice of Team.
type Teams []*Team
