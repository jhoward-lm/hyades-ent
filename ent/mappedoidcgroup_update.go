// Code generated by ent, DO NOT EDIT.
// --------------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2025 The DependencyTrack Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// --------------------------------------------------------------------
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// --------------------------------------------------------------------

package ent

import (
	"context"
	"errors"
	"fmt"

	"dependencytrack.io/hyades/ent/mappedoidcgroup"
	"dependencytrack.io/hyades/ent/oidcgroup"
	"dependencytrack.io/hyades/ent/predicate"
	"dependencytrack.io/hyades/ent/team"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MappedOIDCGroupUpdate is the builder for updating MappedOIDCGroup entities.
type MappedOIDCGroupUpdate struct {
	config
	hooks    []Hook
	mutation *MappedOIDCGroupMutation
}

// Where appends a list predicates to the MappedOIDCGroupUpdate builder.
func (mogu *MappedOIDCGroupUpdate) Where(ps ...predicate.MappedOIDCGroup) *MappedOIDCGroupUpdate {
	mogu.mutation.Where(ps...)
	return mogu
}

// SetGroupID sets the "group_id" field.
func (mogu *MappedOIDCGroupUpdate) SetGroupID(i int) *MappedOIDCGroupUpdate {
	mogu.mutation.SetGroupID(i)
	return mogu
}

// SetNillableGroupID sets the "group_id" field if the given value is not nil.
func (mogu *MappedOIDCGroupUpdate) SetNillableGroupID(i *int) *MappedOIDCGroupUpdate {
	if i != nil {
		mogu.SetGroupID(*i)
	}
	return mogu
}

// ClearGroupID clears the value of the "group_id" field.
func (mogu *MappedOIDCGroupUpdate) ClearGroupID() *MappedOIDCGroupUpdate {
	mogu.mutation.ClearGroupID()
	return mogu
}

// SetTeamID sets the "team_id" field.
func (mogu *MappedOIDCGroupUpdate) SetTeamID(i int) *MappedOIDCGroupUpdate {
	mogu.mutation.SetTeamID(i)
	return mogu
}

// SetNillableTeamID sets the "team_id" field if the given value is not nil.
func (mogu *MappedOIDCGroupUpdate) SetNillableTeamID(i *int) *MappedOIDCGroupUpdate {
	if i != nil {
		mogu.SetTeamID(*i)
	}
	return mogu
}

// ClearTeamID clears the value of the "team_id" field.
func (mogu *MappedOIDCGroupUpdate) ClearTeamID() *MappedOIDCGroupUpdate {
	mogu.mutation.ClearTeamID()
	return mogu
}

// SetOidcGroupID sets the "oidc_group" edge to the OIDCGroup entity by ID.
func (mogu *MappedOIDCGroupUpdate) SetOidcGroupID(id int) *MappedOIDCGroupUpdate {
	mogu.mutation.SetOidcGroupID(id)
	return mogu
}

// SetNillableOidcGroupID sets the "oidc_group" edge to the OIDCGroup entity by ID if the given value is not nil.
func (mogu *MappedOIDCGroupUpdate) SetNillableOidcGroupID(id *int) *MappedOIDCGroupUpdate {
	if id != nil {
		mogu = mogu.SetOidcGroupID(*id)
	}
	return mogu
}

// SetOidcGroup sets the "oidc_group" edge to the OIDCGroup entity.
func (mogu *MappedOIDCGroupUpdate) SetOidcGroup(o *OIDCGroup) *MappedOIDCGroupUpdate {
	return mogu.SetOidcGroupID(o.ID)
}

// SetTeam sets the "team" edge to the Team entity.
func (mogu *MappedOIDCGroupUpdate) SetTeam(t *Team) *MappedOIDCGroupUpdate {
	return mogu.SetTeamID(t.ID)
}

// Mutation returns the MappedOIDCGroupMutation object of the builder.
func (mogu *MappedOIDCGroupUpdate) Mutation() *MappedOIDCGroupMutation {
	return mogu.mutation
}

// ClearOidcGroup clears the "oidc_group" edge to the OIDCGroup entity.
func (mogu *MappedOIDCGroupUpdate) ClearOidcGroup() *MappedOIDCGroupUpdate {
	mogu.mutation.ClearOidcGroup()
	return mogu
}

// ClearTeam clears the "team" edge to the Team entity.
func (mogu *MappedOIDCGroupUpdate) ClearTeam() *MappedOIDCGroupUpdate {
	mogu.mutation.ClearTeam()
	return mogu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mogu *MappedOIDCGroupUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mogu.sqlSave, mogu.mutation, mogu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mogu *MappedOIDCGroupUpdate) SaveX(ctx context.Context) int {
	affected, err := mogu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mogu *MappedOIDCGroupUpdate) Exec(ctx context.Context) error {
	_, err := mogu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mogu *MappedOIDCGroupUpdate) ExecX(ctx context.Context) {
	if err := mogu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mogu *MappedOIDCGroupUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(mappedoidcgroup.Table, mappedoidcgroup.Columns, sqlgraph.NewFieldSpec(mappedoidcgroup.FieldID, field.TypeInt))
	if ps := mogu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if mogu.mutation.OidcGroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mappedoidcgroup.OidcGroupTable,
			Columns: []string{mappedoidcgroup.OidcGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oidcgroup.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mogu.mutation.OidcGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mappedoidcgroup.OidcGroupTable,
			Columns: []string{mappedoidcgroup.OidcGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oidcgroup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mogu.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mappedoidcgroup.TeamTable,
			Columns: []string{mappedoidcgroup.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mogu.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mappedoidcgroup.TeamTable,
			Columns: []string{mappedoidcgroup.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mogu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mappedoidcgroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mogu.mutation.done = true
	return n, nil
}

// MappedOIDCGroupUpdateOne is the builder for updating a single MappedOIDCGroup entity.
type MappedOIDCGroupUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MappedOIDCGroupMutation
}

// SetGroupID sets the "group_id" field.
func (moguo *MappedOIDCGroupUpdateOne) SetGroupID(i int) *MappedOIDCGroupUpdateOne {
	moguo.mutation.SetGroupID(i)
	return moguo
}

// SetNillableGroupID sets the "group_id" field if the given value is not nil.
func (moguo *MappedOIDCGroupUpdateOne) SetNillableGroupID(i *int) *MappedOIDCGroupUpdateOne {
	if i != nil {
		moguo.SetGroupID(*i)
	}
	return moguo
}

// ClearGroupID clears the value of the "group_id" field.
func (moguo *MappedOIDCGroupUpdateOne) ClearGroupID() *MappedOIDCGroupUpdateOne {
	moguo.mutation.ClearGroupID()
	return moguo
}

// SetTeamID sets the "team_id" field.
func (moguo *MappedOIDCGroupUpdateOne) SetTeamID(i int) *MappedOIDCGroupUpdateOne {
	moguo.mutation.SetTeamID(i)
	return moguo
}

// SetNillableTeamID sets the "team_id" field if the given value is not nil.
func (moguo *MappedOIDCGroupUpdateOne) SetNillableTeamID(i *int) *MappedOIDCGroupUpdateOne {
	if i != nil {
		moguo.SetTeamID(*i)
	}
	return moguo
}

// ClearTeamID clears the value of the "team_id" field.
func (moguo *MappedOIDCGroupUpdateOne) ClearTeamID() *MappedOIDCGroupUpdateOne {
	moguo.mutation.ClearTeamID()
	return moguo
}

// SetOidcGroupID sets the "oidc_group" edge to the OIDCGroup entity by ID.
func (moguo *MappedOIDCGroupUpdateOne) SetOidcGroupID(id int) *MappedOIDCGroupUpdateOne {
	moguo.mutation.SetOidcGroupID(id)
	return moguo
}

// SetNillableOidcGroupID sets the "oidc_group" edge to the OIDCGroup entity by ID if the given value is not nil.
func (moguo *MappedOIDCGroupUpdateOne) SetNillableOidcGroupID(id *int) *MappedOIDCGroupUpdateOne {
	if id != nil {
		moguo = moguo.SetOidcGroupID(*id)
	}
	return moguo
}

// SetOidcGroup sets the "oidc_group" edge to the OIDCGroup entity.
func (moguo *MappedOIDCGroupUpdateOne) SetOidcGroup(o *OIDCGroup) *MappedOIDCGroupUpdateOne {
	return moguo.SetOidcGroupID(o.ID)
}

// SetTeam sets the "team" edge to the Team entity.
func (moguo *MappedOIDCGroupUpdateOne) SetTeam(t *Team) *MappedOIDCGroupUpdateOne {
	return moguo.SetTeamID(t.ID)
}

// Mutation returns the MappedOIDCGroupMutation object of the builder.
func (moguo *MappedOIDCGroupUpdateOne) Mutation() *MappedOIDCGroupMutation {
	return moguo.mutation
}

// ClearOidcGroup clears the "oidc_group" edge to the OIDCGroup entity.
func (moguo *MappedOIDCGroupUpdateOne) ClearOidcGroup() *MappedOIDCGroupUpdateOne {
	moguo.mutation.ClearOidcGroup()
	return moguo
}

// ClearTeam clears the "team" edge to the Team entity.
func (moguo *MappedOIDCGroupUpdateOne) ClearTeam() *MappedOIDCGroupUpdateOne {
	moguo.mutation.ClearTeam()
	return moguo
}

// Where appends a list predicates to the MappedOIDCGroupUpdate builder.
func (moguo *MappedOIDCGroupUpdateOne) Where(ps ...predicate.MappedOIDCGroup) *MappedOIDCGroupUpdateOne {
	moguo.mutation.Where(ps...)
	return moguo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (moguo *MappedOIDCGroupUpdateOne) Select(field string, fields ...string) *MappedOIDCGroupUpdateOne {
	moguo.fields = append([]string{field}, fields...)
	return moguo
}

// Save executes the query and returns the updated MappedOIDCGroup entity.
func (moguo *MappedOIDCGroupUpdateOne) Save(ctx context.Context) (*MappedOIDCGroup, error) {
	return withHooks(ctx, moguo.sqlSave, moguo.mutation, moguo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (moguo *MappedOIDCGroupUpdateOne) SaveX(ctx context.Context) *MappedOIDCGroup {
	node, err := moguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (moguo *MappedOIDCGroupUpdateOne) Exec(ctx context.Context) error {
	_, err := moguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (moguo *MappedOIDCGroupUpdateOne) ExecX(ctx context.Context) {
	if err := moguo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (moguo *MappedOIDCGroupUpdateOne) sqlSave(ctx context.Context) (_node *MappedOIDCGroup, err error) {
	_spec := sqlgraph.NewUpdateSpec(mappedoidcgroup.Table, mappedoidcgroup.Columns, sqlgraph.NewFieldSpec(mappedoidcgroup.FieldID, field.TypeInt))
	id, ok := moguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MappedOIDCGroup.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := moguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, mappedoidcgroup.FieldID)
		for _, f := range fields {
			if !mappedoidcgroup.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != mappedoidcgroup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := moguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if moguo.mutation.OidcGroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mappedoidcgroup.OidcGroupTable,
			Columns: []string{mappedoidcgroup.OidcGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oidcgroup.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := moguo.mutation.OidcGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mappedoidcgroup.OidcGroupTable,
			Columns: []string{mappedoidcgroup.OidcGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oidcgroup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if moguo.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mappedoidcgroup.TeamTable,
			Columns: []string{mappedoidcgroup.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := moguo.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mappedoidcgroup.TeamTable,
			Columns: []string{mappedoidcgroup.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MappedOIDCGroup{config: moguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, moguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mappedoidcgroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	moguo.mutation.done = true
	return _node, nil
}
