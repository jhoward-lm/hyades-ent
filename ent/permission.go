// Code generated by ent, DO NOT EDIT.
// --------------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2025 The DependencyTrack Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// --------------------------------------------------------------------
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// --------------------------------------------------------------------

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"dependencytrack.io/hyades/ent/permission"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Permission is the model entity for the Permission schema.
type Permission struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PermissionQuery when eager-loading is set.
	Edges        PermissionEdges `json:"-"`
	selectValues sql.SelectValues
}

// PermissionEdges holds the relations/edges for other nodes in the graph.
type PermissionEdges struct {
	// Teams holds the value of the teams edge.
	Teams []*Team `json:"-"`
	// LdapUsers holds the value of the ldap_users edge.
	LdapUsers []*LDAPUser `json:"-"`
	// ManagedUsers holds the value of the managed_users edge.
	ManagedUsers []*ManagedUser `json:"-"`
	// OidcUsers holds the value of the oidc_users edge.
	OidcUsers []*OIDCUser `json:"-"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// TeamsOrErr returns the Teams value or an error if the edge
// was not loaded in eager-loading.
func (e PermissionEdges) TeamsOrErr() ([]*Team, error) {
	if e.loadedTypes[0] {
		return e.Teams, nil
	}
	return nil, &NotLoadedError{edge: "teams"}
}

// LdapUsersOrErr returns the LdapUsers value or an error if the edge
// was not loaded in eager-loading.
func (e PermissionEdges) LdapUsersOrErr() ([]*LDAPUser, error) {
	if e.loadedTypes[1] {
		return e.LdapUsers, nil
	}
	return nil, &NotLoadedError{edge: "ldap_users"}
}

// ManagedUsersOrErr returns the ManagedUsers value or an error if the edge
// was not loaded in eager-loading.
func (e PermissionEdges) ManagedUsersOrErr() ([]*ManagedUser, error) {
	if e.loadedTypes[2] {
		return e.ManagedUsers, nil
	}
	return nil, &NotLoadedError{edge: "managed_users"}
}

// OidcUsersOrErr returns the OidcUsers value or an error if the edge
// was not loaded in eager-loading.
func (e PermissionEdges) OidcUsersOrErr() ([]*OIDCUser, error) {
	if e.loadedTypes[3] {
		return e.OidcUsers, nil
	}
	return nil, &NotLoadedError{edge: "oidc_users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Permission) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case permission.FieldID:
			values[i] = new(sql.NullInt64)
		case permission.FieldDescription, permission.FieldName:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Permission fields.
func (pe *Permission) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case permission.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pe.ID = int(value.Int64)
		case permission.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				pe.Description = value.String
			}
		case permission.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pe.Name = value.String
			}
		default:
			pe.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Permission.
// This includes values selected through modifiers, order, etc.
func (pe *Permission) Value(name string) (ent.Value, error) {
	return pe.selectValues.Get(name)
}

// QueryTeams queries the "teams" edge of the Permission entity.
func (pe *Permission) QueryTeams() *TeamQuery {
	return NewPermissionClient(pe.config).QueryTeams(pe)
}

// QueryLdapUsers queries the "ldap_users" edge of the Permission entity.
func (pe *Permission) QueryLdapUsers() *LDAPUserQuery {
	return NewPermissionClient(pe.config).QueryLdapUsers(pe)
}

// QueryManagedUsers queries the "managed_users" edge of the Permission entity.
func (pe *Permission) QueryManagedUsers() *ManagedUserQuery {
	return NewPermissionClient(pe.config).QueryManagedUsers(pe)
}

// QueryOidcUsers queries the "oidc_users" edge of the Permission entity.
func (pe *Permission) QueryOidcUsers() *OIDCUserQuery {
	return NewPermissionClient(pe.config).QueryOidcUsers(pe)
}

// Update returns a builder for updating this Permission.
// Note that you need to call Permission.Unwrap() before calling this method if this Permission
// was returned from a transaction, and the transaction was committed or rolled back.
func (pe *Permission) Update() *PermissionUpdateOne {
	return NewPermissionClient(pe.config).UpdateOne(pe)
}

// Unwrap unwraps the Permission entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pe *Permission) Unwrap() *Permission {
	_tx, ok := pe.config.driver.(*txDriver)
	if !ok {
		panic("ent: Permission is not a transactional entity")
	}
	pe.config.driver = _tx.drv
	return pe
}

// String implements the fmt.Stringer.
func (pe *Permission) String() string {
	var builder strings.Builder
	builder.WriteString("Permission(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pe.ID))
	builder.WriteString("description=")
	builder.WriteString(pe.Description)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(pe.Name)
	builder.WriteByte(')')
	return builder.String()
}

// MarshalJSON implements the json.Marshaler interface.
func (pe *Permission) MarshalJSON() ([]byte, error) {
	type Alias Permission
	return json.Marshal(&struct {
		*Alias
		PermissionEdges
	}{
		Alias:           (*Alias)(pe),
		PermissionEdges: pe.Edges,
	})
}

// Permissions is a parsable slice of Permission.
type Permissions []*Permission
