// Code generated by ent, DO NOT EDIT.
// --------------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2025 The DependencyTrack Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// --------------------------------------------------------------------
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// --------------------------------------------------------------------

package eventservicelog

import (
	"time"

	"dependencytrack.io/hyades/ent/predicate"
	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.EventServiceLog {
	return predicate.EventServiceLog(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.EventServiceLog {
	return predicate.EventServiceLog(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.EventServiceLog {
	return predicate.EventServiceLog(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.EventServiceLog {
	return predicate.EventServiceLog(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.EventServiceLog {
	return predicate.EventServiceLog(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.EventServiceLog {
	return predicate.EventServiceLog(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.EventServiceLog {
	return predicate.EventServiceLog(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.EventServiceLog {
	return predicate.EventServiceLog(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.EventServiceLog {
	return predicate.EventServiceLog(sql.FieldLTE(FieldID, id))
}

// Subscriberclass applies equality check predicate on the "subscriberclass" field. It's identical to SubscriberclassEQ.
func Subscriberclass(v string) predicate.EventServiceLog {
	return predicate.EventServiceLog(sql.FieldEQ(FieldSubscriberclass, v))
}

// Started applies equality check predicate on the "started" field. It's identical to StartedEQ.
func Started(v time.Time) predicate.EventServiceLog {
	return predicate.EventServiceLog(sql.FieldEQ(FieldStarted, v))
}

// Completed applies equality check predicate on the "completed" field. It's identical to CompletedEQ.
func Completed(v time.Time) predicate.EventServiceLog {
	return predicate.EventServiceLog(sql.FieldEQ(FieldCompleted, v))
}

// SubscriberclassEQ applies the EQ predicate on the "subscriberclass" field.
func SubscriberclassEQ(v string) predicate.EventServiceLog {
	return predicate.EventServiceLog(sql.FieldEQ(FieldSubscriberclass, v))
}

// SubscriberclassNEQ applies the NEQ predicate on the "subscriberclass" field.
func SubscriberclassNEQ(v string) predicate.EventServiceLog {
	return predicate.EventServiceLog(sql.FieldNEQ(FieldSubscriberclass, v))
}

// SubscriberclassIn applies the In predicate on the "subscriberclass" field.
func SubscriberclassIn(vs ...string) predicate.EventServiceLog {
	return predicate.EventServiceLog(sql.FieldIn(FieldSubscriberclass, vs...))
}

// SubscriberclassNotIn applies the NotIn predicate on the "subscriberclass" field.
func SubscriberclassNotIn(vs ...string) predicate.EventServiceLog {
	return predicate.EventServiceLog(sql.FieldNotIn(FieldSubscriberclass, vs...))
}

// SubscriberclassGT applies the GT predicate on the "subscriberclass" field.
func SubscriberclassGT(v string) predicate.EventServiceLog {
	return predicate.EventServiceLog(sql.FieldGT(FieldSubscriberclass, v))
}

// SubscriberclassGTE applies the GTE predicate on the "subscriberclass" field.
func SubscriberclassGTE(v string) predicate.EventServiceLog {
	return predicate.EventServiceLog(sql.FieldGTE(FieldSubscriberclass, v))
}

// SubscriberclassLT applies the LT predicate on the "subscriberclass" field.
func SubscriberclassLT(v string) predicate.EventServiceLog {
	return predicate.EventServiceLog(sql.FieldLT(FieldSubscriberclass, v))
}

// SubscriberclassLTE applies the LTE predicate on the "subscriberclass" field.
func SubscriberclassLTE(v string) predicate.EventServiceLog {
	return predicate.EventServiceLog(sql.FieldLTE(FieldSubscriberclass, v))
}

// SubscriberclassContains applies the Contains predicate on the "subscriberclass" field.
func SubscriberclassContains(v string) predicate.EventServiceLog {
	return predicate.EventServiceLog(sql.FieldContains(FieldSubscriberclass, v))
}

// SubscriberclassHasPrefix applies the HasPrefix predicate on the "subscriberclass" field.
func SubscriberclassHasPrefix(v string) predicate.EventServiceLog {
	return predicate.EventServiceLog(sql.FieldHasPrefix(FieldSubscriberclass, v))
}

// SubscriberclassHasSuffix applies the HasSuffix predicate on the "subscriberclass" field.
func SubscriberclassHasSuffix(v string) predicate.EventServiceLog {
	return predicate.EventServiceLog(sql.FieldHasSuffix(FieldSubscriberclass, v))
}

// SubscriberclassEqualFold applies the EqualFold predicate on the "subscriberclass" field.
func SubscriberclassEqualFold(v string) predicate.EventServiceLog {
	return predicate.EventServiceLog(sql.FieldEqualFold(FieldSubscriberclass, v))
}

// SubscriberclassContainsFold applies the ContainsFold predicate on the "subscriberclass" field.
func SubscriberclassContainsFold(v string) predicate.EventServiceLog {
	return predicate.EventServiceLog(sql.FieldContainsFold(FieldSubscriberclass, v))
}

// StartedEQ applies the EQ predicate on the "started" field.
func StartedEQ(v time.Time) predicate.EventServiceLog {
	return predicate.EventServiceLog(sql.FieldEQ(FieldStarted, v))
}

// StartedNEQ applies the NEQ predicate on the "started" field.
func StartedNEQ(v time.Time) predicate.EventServiceLog {
	return predicate.EventServiceLog(sql.FieldNEQ(FieldStarted, v))
}

// StartedIn applies the In predicate on the "started" field.
func StartedIn(vs ...time.Time) predicate.EventServiceLog {
	return predicate.EventServiceLog(sql.FieldIn(FieldStarted, vs...))
}

// StartedNotIn applies the NotIn predicate on the "started" field.
func StartedNotIn(vs ...time.Time) predicate.EventServiceLog {
	return predicate.EventServiceLog(sql.FieldNotIn(FieldStarted, vs...))
}

// StartedGT applies the GT predicate on the "started" field.
func StartedGT(v time.Time) predicate.EventServiceLog {
	return predicate.EventServiceLog(sql.FieldGT(FieldStarted, v))
}

// StartedGTE applies the GTE predicate on the "started" field.
func StartedGTE(v time.Time) predicate.EventServiceLog {
	return predicate.EventServiceLog(sql.FieldGTE(FieldStarted, v))
}

// StartedLT applies the LT predicate on the "started" field.
func StartedLT(v time.Time) predicate.EventServiceLog {
	return predicate.EventServiceLog(sql.FieldLT(FieldStarted, v))
}

// StartedLTE applies the LTE predicate on the "started" field.
func StartedLTE(v time.Time) predicate.EventServiceLog {
	return predicate.EventServiceLog(sql.FieldLTE(FieldStarted, v))
}

// StartedIsNil applies the IsNil predicate on the "started" field.
func StartedIsNil() predicate.EventServiceLog {
	return predicate.EventServiceLog(sql.FieldIsNull(FieldStarted))
}

// StartedNotNil applies the NotNil predicate on the "started" field.
func StartedNotNil() predicate.EventServiceLog {
	return predicate.EventServiceLog(sql.FieldNotNull(FieldStarted))
}

// CompletedEQ applies the EQ predicate on the "completed" field.
func CompletedEQ(v time.Time) predicate.EventServiceLog {
	return predicate.EventServiceLog(sql.FieldEQ(FieldCompleted, v))
}

// CompletedNEQ applies the NEQ predicate on the "completed" field.
func CompletedNEQ(v time.Time) predicate.EventServiceLog {
	return predicate.EventServiceLog(sql.FieldNEQ(FieldCompleted, v))
}

// CompletedIn applies the In predicate on the "completed" field.
func CompletedIn(vs ...time.Time) predicate.EventServiceLog {
	return predicate.EventServiceLog(sql.FieldIn(FieldCompleted, vs...))
}

// CompletedNotIn applies the NotIn predicate on the "completed" field.
func CompletedNotIn(vs ...time.Time) predicate.EventServiceLog {
	return predicate.EventServiceLog(sql.FieldNotIn(FieldCompleted, vs...))
}

// CompletedGT applies the GT predicate on the "completed" field.
func CompletedGT(v time.Time) predicate.EventServiceLog {
	return predicate.EventServiceLog(sql.FieldGT(FieldCompleted, v))
}

// CompletedGTE applies the GTE predicate on the "completed" field.
func CompletedGTE(v time.Time) predicate.EventServiceLog {
	return predicate.EventServiceLog(sql.FieldGTE(FieldCompleted, v))
}

// CompletedLT applies the LT predicate on the "completed" field.
func CompletedLT(v time.Time) predicate.EventServiceLog {
	return predicate.EventServiceLog(sql.FieldLT(FieldCompleted, v))
}

// CompletedLTE applies the LTE predicate on the "completed" field.
func CompletedLTE(v time.Time) predicate.EventServiceLog {
	return predicate.EventServiceLog(sql.FieldLTE(FieldCompleted, v))
}

// CompletedIsNil applies the IsNil predicate on the "completed" field.
func CompletedIsNil() predicate.EventServiceLog {
	return predicate.EventServiceLog(sql.FieldIsNull(FieldCompleted))
}

// CompletedNotNil applies the NotNil predicate on the "completed" field.
func CompletedNotNil() predicate.EventServiceLog {
	return predicate.EventServiceLog(sql.FieldNotNull(FieldCompleted))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.EventServiceLog) predicate.EventServiceLog {
	return predicate.EventServiceLog(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.EventServiceLog) predicate.EventServiceLog {
	return predicate.EventServiceLog(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EventServiceLog) predicate.EventServiceLog {
	return predicate.EventServiceLog(sql.NotPredicates(p))
}
