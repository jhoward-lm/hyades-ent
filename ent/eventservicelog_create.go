// Code generated by ent, DO NOT EDIT.
// --------------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2025 The DependencyTrack Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// --------------------------------------------------------------------
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// --------------------------------------------------------------------

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"dependencytrack.io/hyades/ent/eventservicelog"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EventServiceLogCreate is the builder for creating a EventServiceLog entity.
type EventServiceLogCreate struct {
	config
	mutation *EventServiceLogMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetSubscriberclass sets the "subscriberclass" field.
func (eslc *EventServiceLogCreate) SetSubscriberclass(s string) *EventServiceLogCreate {
	eslc.mutation.SetSubscriberclass(s)
	return eslc
}

// SetStarted sets the "started" field.
func (eslc *EventServiceLogCreate) SetStarted(t time.Time) *EventServiceLogCreate {
	eslc.mutation.SetStarted(t)
	return eslc
}

// SetNillableStarted sets the "started" field if the given value is not nil.
func (eslc *EventServiceLogCreate) SetNillableStarted(t *time.Time) *EventServiceLogCreate {
	if t != nil {
		eslc.SetStarted(*t)
	}
	return eslc
}

// SetCompleted sets the "completed" field.
func (eslc *EventServiceLogCreate) SetCompleted(t time.Time) *EventServiceLogCreate {
	eslc.mutation.SetCompleted(t)
	return eslc
}

// SetNillableCompleted sets the "completed" field if the given value is not nil.
func (eslc *EventServiceLogCreate) SetNillableCompleted(t *time.Time) *EventServiceLogCreate {
	if t != nil {
		eslc.SetCompleted(*t)
	}
	return eslc
}

// Mutation returns the EventServiceLogMutation object of the builder.
func (eslc *EventServiceLogCreate) Mutation() *EventServiceLogMutation {
	return eslc.mutation
}

// Save creates the EventServiceLog in the database.
func (eslc *EventServiceLogCreate) Save(ctx context.Context) (*EventServiceLog, error) {
	return withHooks(ctx, eslc.sqlSave, eslc.mutation, eslc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (eslc *EventServiceLogCreate) SaveX(ctx context.Context) *EventServiceLog {
	v, err := eslc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eslc *EventServiceLogCreate) Exec(ctx context.Context) error {
	_, err := eslc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eslc *EventServiceLogCreate) ExecX(ctx context.Context) {
	if err := eslc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eslc *EventServiceLogCreate) check() error {
	if _, ok := eslc.mutation.Subscriberclass(); !ok {
		return &ValidationError{Name: "subscriberclass", err: errors.New(`ent: missing required field "EventServiceLog.subscriberclass"`)}
	}
	return nil
}

func (eslc *EventServiceLogCreate) sqlSave(ctx context.Context) (*EventServiceLog, error) {
	if err := eslc.check(); err != nil {
		return nil, err
	}
	_node, _spec := eslc.createSpec()
	if err := sqlgraph.CreateNode(ctx, eslc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	eslc.mutation.id = &_node.ID
	eslc.mutation.done = true
	return _node, nil
}

func (eslc *EventServiceLogCreate) createSpec() (*EventServiceLog, *sqlgraph.CreateSpec) {
	var (
		_node = &EventServiceLog{config: eslc.config}
		_spec = sqlgraph.NewCreateSpec(eventservicelog.Table, sqlgraph.NewFieldSpec(eventservicelog.FieldID, field.TypeInt))
	)
	_spec.OnConflict = eslc.conflict
	if value, ok := eslc.mutation.Subscriberclass(); ok {
		_spec.SetField(eventservicelog.FieldSubscriberclass, field.TypeString, value)
		_node.Subscriberclass = value
	}
	if value, ok := eslc.mutation.Started(); ok {
		_spec.SetField(eventservicelog.FieldStarted, field.TypeTime, value)
		_node.Started = value
	}
	if value, ok := eslc.mutation.Completed(); ok {
		_spec.SetField(eventservicelog.FieldCompleted, field.TypeTime, value)
		_node.Completed = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.EventServiceLog.Create().
//		SetSubscriberclass(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EventServiceLogUpsert) {
//			SetSubscriberclass(v+v).
//		}).
//		Exec(ctx)
func (eslc *EventServiceLogCreate) OnConflict(opts ...sql.ConflictOption) *EventServiceLogUpsertOne {
	eslc.conflict = opts
	return &EventServiceLogUpsertOne{
		create: eslc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.EventServiceLog.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (eslc *EventServiceLogCreate) OnConflictColumns(columns ...string) *EventServiceLogUpsertOne {
	eslc.conflict = append(eslc.conflict, sql.ConflictColumns(columns...))
	return &EventServiceLogUpsertOne{
		create: eslc,
	}
}

type (
	// EventServiceLogUpsertOne is the builder for "upsert"-ing
	//  one EventServiceLog node.
	EventServiceLogUpsertOne struct {
		create *EventServiceLogCreate
	}

	// EventServiceLogUpsert is the "OnConflict" setter.
	EventServiceLogUpsert struct {
		*sql.UpdateSet
	}
)

// SetSubscriberclass sets the "subscriberclass" field.
func (u *EventServiceLogUpsert) SetSubscriberclass(v string) *EventServiceLogUpsert {
	u.Set(eventservicelog.FieldSubscriberclass, v)
	return u
}

// UpdateSubscriberclass sets the "subscriberclass" field to the value that was provided on create.
func (u *EventServiceLogUpsert) UpdateSubscriberclass() *EventServiceLogUpsert {
	u.SetExcluded(eventservicelog.FieldSubscriberclass)
	return u
}

// SetStarted sets the "started" field.
func (u *EventServiceLogUpsert) SetStarted(v time.Time) *EventServiceLogUpsert {
	u.Set(eventservicelog.FieldStarted, v)
	return u
}

// UpdateStarted sets the "started" field to the value that was provided on create.
func (u *EventServiceLogUpsert) UpdateStarted() *EventServiceLogUpsert {
	u.SetExcluded(eventservicelog.FieldStarted)
	return u
}

// ClearStarted clears the value of the "started" field.
func (u *EventServiceLogUpsert) ClearStarted() *EventServiceLogUpsert {
	u.SetNull(eventservicelog.FieldStarted)
	return u
}

// SetCompleted sets the "completed" field.
func (u *EventServiceLogUpsert) SetCompleted(v time.Time) *EventServiceLogUpsert {
	u.Set(eventservicelog.FieldCompleted, v)
	return u
}

// UpdateCompleted sets the "completed" field to the value that was provided on create.
func (u *EventServiceLogUpsert) UpdateCompleted() *EventServiceLogUpsert {
	u.SetExcluded(eventservicelog.FieldCompleted)
	return u
}

// ClearCompleted clears the value of the "completed" field.
func (u *EventServiceLogUpsert) ClearCompleted() *EventServiceLogUpsert {
	u.SetNull(eventservicelog.FieldCompleted)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.EventServiceLog.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *EventServiceLogUpsertOne) UpdateNewValues() *EventServiceLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.EventServiceLog.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *EventServiceLogUpsertOne) Ignore() *EventServiceLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EventServiceLogUpsertOne) DoNothing() *EventServiceLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EventServiceLogCreate.OnConflict
// documentation for more info.
func (u *EventServiceLogUpsertOne) Update(set func(*EventServiceLogUpsert)) *EventServiceLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EventServiceLogUpsert{UpdateSet: update})
	}))
	return u
}

// SetSubscriberclass sets the "subscriberclass" field.
func (u *EventServiceLogUpsertOne) SetSubscriberclass(v string) *EventServiceLogUpsertOne {
	return u.Update(func(s *EventServiceLogUpsert) {
		s.SetSubscriberclass(v)
	})
}

// UpdateSubscriberclass sets the "subscriberclass" field to the value that was provided on create.
func (u *EventServiceLogUpsertOne) UpdateSubscriberclass() *EventServiceLogUpsertOne {
	return u.Update(func(s *EventServiceLogUpsert) {
		s.UpdateSubscriberclass()
	})
}

// SetStarted sets the "started" field.
func (u *EventServiceLogUpsertOne) SetStarted(v time.Time) *EventServiceLogUpsertOne {
	return u.Update(func(s *EventServiceLogUpsert) {
		s.SetStarted(v)
	})
}

// UpdateStarted sets the "started" field to the value that was provided on create.
func (u *EventServiceLogUpsertOne) UpdateStarted() *EventServiceLogUpsertOne {
	return u.Update(func(s *EventServiceLogUpsert) {
		s.UpdateStarted()
	})
}

// ClearStarted clears the value of the "started" field.
func (u *EventServiceLogUpsertOne) ClearStarted() *EventServiceLogUpsertOne {
	return u.Update(func(s *EventServiceLogUpsert) {
		s.ClearStarted()
	})
}

// SetCompleted sets the "completed" field.
func (u *EventServiceLogUpsertOne) SetCompleted(v time.Time) *EventServiceLogUpsertOne {
	return u.Update(func(s *EventServiceLogUpsert) {
		s.SetCompleted(v)
	})
}

// UpdateCompleted sets the "completed" field to the value that was provided on create.
func (u *EventServiceLogUpsertOne) UpdateCompleted() *EventServiceLogUpsertOne {
	return u.Update(func(s *EventServiceLogUpsert) {
		s.UpdateCompleted()
	})
}

// ClearCompleted clears the value of the "completed" field.
func (u *EventServiceLogUpsertOne) ClearCompleted() *EventServiceLogUpsertOne {
	return u.Update(func(s *EventServiceLogUpsert) {
		s.ClearCompleted()
	})
}

// Exec executes the query.
func (u *EventServiceLogUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EventServiceLogCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EventServiceLogUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *EventServiceLogUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *EventServiceLogUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// EventServiceLogCreateBulk is the builder for creating many EventServiceLog entities in bulk.
type EventServiceLogCreateBulk struct {
	config
	err      error
	builders []*EventServiceLogCreate
	conflict []sql.ConflictOption
}

// Save creates the EventServiceLog entities in the database.
func (eslcb *EventServiceLogCreateBulk) Save(ctx context.Context) ([]*EventServiceLog, error) {
	if eslcb.err != nil {
		return nil, eslcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(eslcb.builders))
	nodes := make([]*EventServiceLog, len(eslcb.builders))
	mutators := make([]Mutator, len(eslcb.builders))
	for i := range eslcb.builders {
		func(i int, root context.Context) {
			builder := eslcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EventServiceLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, eslcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = eslcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, eslcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, eslcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (eslcb *EventServiceLogCreateBulk) SaveX(ctx context.Context) []*EventServiceLog {
	v, err := eslcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eslcb *EventServiceLogCreateBulk) Exec(ctx context.Context) error {
	_, err := eslcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eslcb *EventServiceLogCreateBulk) ExecX(ctx context.Context) {
	if err := eslcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.EventServiceLog.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EventServiceLogUpsert) {
//			SetSubscriberclass(v+v).
//		}).
//		Exec(ctx)
func (eslcb *EventServiceLogCreateBulk) OnConflict(opts ...sql.ConflictOption) *EventServiceLogUpsertBulk {
	eslcb.conflict = opts
	return &EventServiceLogUpsertBulk{
		create: eslcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.EventServiceLog.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (eslcb *EventServiceLogCreateBulk) OnConflictColumns(columns ...string) *EventServiceLogUpsertBulk {
	eslcb.conflict = append(eslcb.conflict, sql.ConflictColumns(columns...))
	return &EventServiceLogUpsertBulk{
		create: eslcb,
	}
}

// EventServiceLogUpsertBulk is the builder for "upsert"-ing
// a bulk of EventServiceLog nodes.
type EventServiceLogUpsertBulk struct {
	create *EventServiceLogCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.EventServiceLog.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *EventServiceLogUpsertBulk) UpdateNewValues() *EventServiceLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.EventServiceLog.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *EventServiceLogUpsertBulk) Ignore() *EventServiceLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EventServiceLogUpsertBulk) DoNothing() *EventServiceLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EventServiceLogCreateBulk.OnConflict
// documentation for more info.
func (u *EventServiceLogUpsertBulk) Update(set func(*EventServiceLogUpsert)) *EventServiceLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EventServiceLogUpsert{UpdateSet: update})
	}))
	return u
}

// SetSubscriberclass sets the "subscriberclass" field.
func (u *EventServiceLogUpsertBulk) SetSubscriberclass(v string) *EventServiceLogUpsertBulk {
	return u.Update(func(s *EventServiceLogUpsert) {
		s.SetSubscriberclass(v)
	})
}

// UpdateSubscriberclass sets the "subscriberclass" field to the value that was provided on create.
func (u *EventServiceLogUpsertBulk) UpdateSubscriberclass() *EventServiceLogUpsertBulk {
	return u.Update(func(s *EventServiceLogUpsert) {
		s.UpdateSubscriberclass()
	})
}

// SetStarted sets the "started" field.
func (u *EventServiceLogUpsertBulk) SetStarted(v time.Time) *EventServiceLogUpsertBulk {
	return u.Update(func(s *EventServiceLogUpsert) {
		s.SetStarted(v)
	})
}

// UpdateStarted sets the "started" field to the value that was provided on create.
func (u *EventServiceLogUpsertBulk) UpdateStarted() *EventServiceLogUpsertBulk {
	return u.Update(func(s *EventServiceLogUpsert) {
		s.UpdateStarted()
	})
}

// ClearStarted clears the value of the "started" field.
func (u *EventServiceLogUpsertBulk) ClearStarted() *EventServiceLogUpsertBulk {
	return u.Update(func(s *EventServiceLogUpsert) {
		s.ClearStarted()
	})
}

// SetCompleted sets the "completed" field.
func (u *EventServiceLogUpsertBulk) SetCompleted(v time.Time) *EventServiceLogUpsertBulk {
	return u.Update(func(s *EventServiceLogUpsert) {
		s.SetCompleted(v)
	})
}

// UpdateCompleted sets the "completed" field to the value that was provided on create.
func (u *EventServiceLogUpsertBulk) UpdateCompleted() *EventServiceLogUpsertBulk {
	return u.Update(func(s *EventServiceLogUpsert) {
		s.UpdateCompleted()
	})
}

// ClearCompleted clears the value of the "completed" field.
func (u *EventServiceLogUpsertBulk) ClearCompleted() *EventServiceLogUpsertBulk {
	return u.Update(func(s *EventServiceLogUpsert) {
		s.ClearCompleted()
	})
}

// Exec executes the query.
func (u *EventServiceLogUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the EventServiceLogCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EventServiceLogCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EventServiceLogUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
