// Code generated by ent, DO NOT EDIT.
// --------------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2025 The DependencyTrack Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// --------------------------------------------------------------------
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// --------------------------------------------------------------------

package ent

import (
	"context"
	"errors"
	"fmt"

	"dependencytrack.io/hyades/ent/schemaversion"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SchemaVersionCreate is the builder for creating a SchemaVersion entity.
type SchemaVersionCreate struct {
	config
	mutation *SchemaVersionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetVersion sets the "version" field.
func (svc *SchemaVersionCreate) SetVersion(s string) *SchemaVersionCreate {
	svc.mutation.SetVersion(s)
	return svc
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (svc *SchemaVersionCreate) SetNillableVersion(s *string) *SchemaVersionCreate {
	if s != nil {
		svc.SetVersion(*s)
	}
	return svc
}

// Mutation returns the SchemaVersionMutation object of the builder.
func (svc *SchemaVersionCreate) Mutation() *SchemaVersionMutation {
	return svc.mutation
}

// Save creates the SchemaVersion in the database.
func (svc *SchemaVersionCreate) Save(ctx context.Context) (*SchemaVersion, error) {
	return withHooks(ctx, svc.sqlSave, svc.mutation, svc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (svc *SchemaVersionCreate) SaveX(ctx context.Context) *SchemaVersion {
	v, err := svc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (svc *SchemaVersionCreate) Exec(ctx context.Context) error {
	_, err := svc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (svc *SchemaVersionCreate) ExecX(ctx context.Context) {
	if err := svc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (svc *SchemaVersionCreate) check() error {
	return nil
}

func (svc *SchemaVersionCreate) sqlSave(ctx context.Context) (*SchemaVersion, error) {
	if err := svc.check(); err != nil {
		return nil, err
	}
	_node, _spec := svc.createSpec()
	if err := sqlgraph.CreateNode(ctx, svc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	svc.mutation.id = &_node.ID
	svc.mutation.done = true
	return _node, nil
}

func (svc *SchemaVersionCreate) createSpec() (*SchemaVersion, *sqlgraph.CreateSpec) {
	var (
		_node = &SchemaVersion{config: svc.config}
		_spec = sqlgraph.NewCreateSpec(schemaversion.Table, sqlgraph.NewFieldSpec(schemaversion.FieldID, field.TypeInt))
	)
	_spec.OnConflict = svc.conflict
	if value, ok := svc.mutation.Version(); ok {
		_spec.SetField(schemaversion.FieldVersion, field.TypeString, value)
		_node.Version = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SchemaVersion.Create().
//		SetVersion(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SchemaVersionUpsert) {
//			SetVersion(v+v).
//		}).
//		Exec(ctx)
func (svc *SchemaVersionCreate) OnConflict(opts ...sql.ConflictOption) *SchemaVersionUpsertOne {
	svc.conflict = opts
	return &SchemaVersionUpsertOne{
		create: svc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SchemaVersion.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (svc *SchemaVersionCreate) OnConflictColumns(columns ...string) *SchemaVersionUpsertOne {
	svc.conflict = append(svc.conflict, sql.ConflictColumns(columns...))
	return &SchemaVersionUpsertOne{
		create: svc,
	}
}

type (
	// SchemaVersionUpsertOne is the builder for "upsert"-ing
	//  one SchemaVersion node.
	SchemaVersionUpsertOne struct {
		create *SchemaVersionCreate
	}

	// SchemaVersionUpsert is the "OnConflict" setter.
	SchemaVersionUpsert struct {
		*sql.UpdateSet
	}
)

// SetVersion sets the "version" field.
func (u *SchemaVersionUpsert) SetVersion(v string) *SchemaVersionUpsert {
	u.Set(schemaversion.FieldVersion, v)
	return u
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *SchemaVersionUpsert) UpdateVersion() *SchemaVersionUpsert {
	u.SetExcluded(schemaversion.FieldVersion)
	return u
}

// ClearVersion clears the value of the "version" field.
func (u *SchemaVersionUpsert) ClearVersion() *SchemaVersionUpsert {
	u.SetNull(schemaversion.FieldVersion)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.SchemaVersion.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SchemaVersionUpsertOne) UpdateNewValues() *SchemaVersionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SchemaVersion.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SchemaVersionUpsertOne) Ignore() *SchemaVersionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SchemaVersionUpsertOne) DoNothing() *SchemaVersionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SchemaVersionCreate.OnConflict
// documentation for more info.
func (u *SchemaVersionUpsertOne) Update(set func(*SchemaVersionUpsert)) *SchemaVersionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SchemaVersionUpsert{UpdateSet: update})
	}))
	return u
}

// SetVersion sets the "version" field.
func (u *SchemaVersionUpsertOne) SetVersion(v string) *SchemaVersionUpsertOne {
	return u.Update(func(s *SchemaVersionUpsert) {
		s.SetVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *SchemaVersionUpsertOne) UpdateVersion() *SchemaVersionUpsertOne {
	return u.Update(func(s *SchemaVersionUpsert) {
		s.UpdateVersion()
	})
}

// ClearVersion clears the value of the "version" field.
func (u *SchemaVersionUpsertOne) ClearVersion() *SchemaVersionUpsertOne {
	return u.Update(func(s *SchemaVersionUpsert) {
		s.ClearVersion()
	})
}

// Exec executes the query.
func (u *SchemaVersionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SchemaVersionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SchemaVersionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SchemaVersionUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SchemaVersionUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SchemaVersionCreateBulk is the builder for creating many SchemaVersion entities in bulk.
type SchemaVersionCreateBulk struct {
	config
	err      error
	builders []*SchemaVersionCreate
	conflict []sql.ConflictOption
}

// Save creates the SchemaVersion entities in the database.
func (svcb *SchemaVersionCreateBulk) Save(ctx context.Context) ([]*SchemaVersion, error) {
	if svcb.err != nil {
		return nil, svcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(svcb.builders))
	nodes := make([]*SchemaVersion, len(svcb.builders))
	mutators := make([]Mutator, len(svcb.builders))
	for i := range svcb.builders {
		func(i int, root context.Context) {
			builder := svcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SchemaVersionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, svcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = svcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, svcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, svcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (svcb *SchemaVersionCreateBulk) SaveX(ctx context.Context) []*SchemaVersion {
	v, err := svcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (svcb *SchemaVersionCreateBulk) Exec(ctx context.Context) error {
	_, err := svcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (svcb *SchemaVersionCreateBulk) ExecX(ctx context.Context) {
	if err := svcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SchemaVersion.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SchemaVersionUpsert) {
//			SetVersion(v+v).
//		}).
//		Exec(ctx)
func (svcb *SchemaVersionCreateBulk) OnConflict(opts ...sql.ConflictOption) *SchemaVersionUpsertBulk {
	svcb.conflict = opts
	return &SchemaVersionUpsertBulk{
		create: svcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SchemaVersion.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (svcb *SchemaVersionCreateBulk) OnConflictColumns(columns ...string) *SchemaVersionUpsertBulk {
	svcb.conflict = append(svcb.conflict, sql.ConflictColumns(columns...))
	return &SchemaVersionUpsertBulk{
		create: svcb,
	}
}

// SchemaVersionUpsertBulk is the builder for "upsert"-ing
// a bulk of SchemaVersion nodes.
type SchemaVersionUpsertBulk struct {
	create *SchemaVersionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SchemaVersion.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SchemaVersionUpsertBulk) UpdateNewValues() *SchemaVersionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SchemaVersion.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SchemaVersionUpsertBulk) Ignore() *SchemaVersionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SchemaVersionUpsertBulk) DoNothing() *SchemaVersionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SchemaVersionCreateBulk.OnConflict
// documentation for more info.
func (u *SchemaVersionUpsertBulk) Update(set func(*SchemaVersionUpsert)) *SchemaVersionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SchemaVersionUpsert{UpdateSet: update})
	}))
	return u
}

// SetVersion sets the "version" field.
func (u *SchemaVersionUpsertBulk) SetVersion(v string) *SchemaVersionUpsertBulk {
	return u.Update(func(s *SchemaVersionUpsert) {
		s.SetVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *SchemaVersionUpsertBulk) UpdateVersion() *SchemaVersionUpsertBulk {
	return u.Update(func(s *SchemaVersionUpsert) {
		s.UpdateVersion()
	})
}

// ClearVersion clears the value of the "version" field.
func (u *SchemaVersionUpsertBulk) ClearVersion() *SchemaVersionUpsertBulk {
	return u.Update(func(s *SchemaVersionUpsert) {
		s.ClearVersion()
	})
}

// Exec executes the query.
func (u *SchemaVersionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SchemaVersionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SchemaVersionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SchemaVersionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
