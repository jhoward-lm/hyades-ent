// Code generated by ent, DO NOT EDIT.
// --------------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2025 The DependencyTrack Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// --------------------------------------------------------------------
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// --------------------------------------------------------------------

package ent

import (
	"context"
	"errors"
	"fmt"

	"dependencytrack.io/hyades/ent/configproperty"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ConfigPropertyCreate is the builder for creating a ConfigProperty entity.
type ConfigPropertyCreate struct {
	config
	mutation *ConfigPropertyMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDescription sets the "description" field.
func (cpc *ConfigPropertyCreate) SetDescription(s string) *ConfigPropertyCreate {
	cpc.mutation.SetDescription(s)
	return cpc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cpc *ConfigPropertyCreate) SetNillableDescription(s *string) *ConfigPropertyCreate {
	if s != nil {
		cpc.SetDescription(*s)
	}
	return cpc
}

// SetGroupname sets the "groupname" field.
func (cpc *ConfigPropertyCreate) SetGroupname(s string) *ConfigPropertyCreate {
	cpc.mutation.SetGroupname(s)
	return cpc
}

// SetPropertyname sets the "propertyname" field.
func (cpc *ConfigPropertyCreate) SetPropertyname(s string) *ConfigPropertyCreate {
	cpc.mutation.SetPropertyname(s)
	return cpc
}

// SetPropertytype sets the "propertytype" field.
func (cpc *ConfigPropertyCreate) SetPropertytype(s string) *ConfigPropertyCreate {
	cpc.mutation.SetPropertytype(s)
	return cpc
}

// SetPropertyvalue sets the "propertyvalue" field.
func (cpc *ConfigPropertyCreate) SetPropertyvalue(s string) *ConfigPropertyCreate {
	cpc.mutation.SetPropertyvalue(s)
	return cpc
}

// SetNillablePropertyvalue sets the "propertyvalue" field if the given value is not nil.
func (cpc *ConfigPropertyCreate) SetNillablePropertyvalue(s *string) *ConfigPropertyCreate {
	if s != nil {
		cpc.SetPropertyvalue(*s)
	}
	return cpc
}

// Mutation returns the ConfigPropertyMutation object of the builder.
func (cpc *ConfigPropertyCreate) Mutation() *ConfigPropertyMutation {
	return cpc.mutation
}

// Save creates the ConfigProperty in the database.
func (cpc *ConfigPropertyCreate) Save(ctx context.Context) (*ConfigProperty, error) {
	return withHooks(ctx, cpc.sqlSave, cpc.mutation, cpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cpc *ConfigPropertyCreate) SaveX(ctx context.Context) *ConfigProperty {
	v, err := cpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cpc *ConfigPropertyCreate) Exec(ctx context.Context) error {
	_, err := cpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpc *ConfigPropertyCreate) ExecX(ctx context.Context) {
	if err := cpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cpc *ConfigPropertyCreate) check() error {
	if _, ok := cpc.mutation.Groupname(); !ok {
		return &ValidationError{Name: "groupname", err: errors.New(`ent: missing required field "ConfigProperty.groupname"`)}
	}
	if _, ok := cpc.mutation.Propertyname(); !ok {
		return &ValidationError{Name: "propertyname", err: errors.New(`ent: missing required field "ConfigProperty.propertyname"`)}
	}
	if _, ok := cpc.mutation.Propertytype(); !ok {
		return &ValidationError{Name: "propertytype", err: errors.New(`ent: missing required field "ConfigProperty.propertytype"`)}
	}
	return nil
}

func (cpc *ConfigPropertyCreate) sqlSave(ctx context.Context) (*ConfigProperty, error) {
	if err := cpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cpc.mutation.id = &_node.ID
	cpc.mutation.done = true
	return _node, nil
}

func (cpc *ConfigPropertyCreate) createSpec() (*ConfigProperty, *sqlgraph.CreateSpec) {
	var (
		_node = &ConfigProperty{config: cpc.config}
		_spec = sqlgraph.NewCreateSpec(configproperty.Table, sqlgraph.NewFieldSpec(configproperty.FieldID, field.TypeInt))
	)
	_spec.OnConflict = cpc.conflict
	if value, ok := cpc.mutation.Description(); ok {
		_spec.SetField(configproperty.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := cpc.mutation.Groupname(); ok {
		_spec.SetField(configproperty.FieldGroupname, field.TypeString, value)
		_node.Groupname = value
	}
	if value, ok := cpc.mutation.Propertyname(); ok {
		_spec.SetField(configproperty.FieldPropertyname, field.TypeString, value)
		_node.Propertyname = value
	}
	if value, ok := cpc.mutation.Propertytype(); ok {
		_spec.SetField(configproperty.FieldPropertytype, field.TypeString, value)
		_node.Propertytype = value
	}
	if value, ok := cpc.mutation.Propertyvalue(); ok {
		_spec.SetField(configproperty.FieldPropertyvalue, field.TypeString, value)
		_node.Propertyvalue = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ConfigProperty.Create().
//		SetDescription(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ConfigPropertyUpsert) {
//			SetDescription(v+v).
//		}).
//		Exec(ctx)
func (cpc *ConfigPropertyCreate) OnConflict(opts ...sql.ConflictOption) *ConfigPropertyUpsertOne {
	cpc.conflict = opts
	return &ConfigPropertyUpsertOne{
		create: cpc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ConfigProperty.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cpc *ConfigPropertyCreate) OnConflictColumns(columns ...string) *ConfigPropertyUpsertOne {
	cpc.conflict = append(cpc.conflict, sql.ConflictColumns(columns...))
	return &ConfigPropertyUpsertOne{
		create: cpc,
	}
}

type (
	// ConfigPropertyUpsertOne is the builder for "upsert"-ing
	//  one ConfigProperty node.
	ConfigPropertyUpsertOne struct {
		create *ConfigPropertyCreate
	}

	// ConfigPropertyUpsert is the "OnConflict" setter.
	ConfigPropertyUpsert struct {
		*sql.UpdateSet
	}
)

// SetDescription sets the "description" field.
func (u *ConfigPropertyUpsert) SetDescription(v string) *ConfigPropertyUpsert {
	u.Set(configproperty.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ConfigPropertyUpsert) UpdateDescription() *ConfigPropertyUpsert {
	u.SetExcluded(configproperty.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *ConfigPropertyUpsert) ClearDescription() *ConfigPropertyUpsert {
	u.SetNull(configproperty.FieldDescription)
	return u
}

// SetGroupname sets the "groupname" field.
func (u *ConfigPropertyUpsert) SetGroupname(v string) *ConfigPropertyUpsert {
	u.Set(configproperty.FieldGroupname, v)
	return u
}

// UpdateGroupname sets the "groupname" field to the value that was provided on create.
func (u *ConfigPropertyUpsert) UpdateGroupname() *ConfigPropertyUpsert {
	u.SetExcluded(configproperty.FieldGroupname)
	return u
}

// SetPropertyname sets the "propertyname" field.
func (u *ConfigPropertyUpsert) SetPropertyname(v string) *ConfigPropertyUpsert {
	u.Set(configproperty.FieldPropertyname, v)
	return u
}

// UpdatePropertyname sets the "propertyname" field to the value that was provided on create.
func (u *ConfigPropertyUpsert) UpdatePropertyname() *ConfigPropertyUpsert {
	u.SetExcluded(configproperty.FieldPropertyname)
	return u
}

// SetPropertytype sets the "propertytype" field.
func (u *ConfigPropertyUpsert) SetPropertytype(v string) *ConfigPropertyUpsert {
	u.Set(configproperty.FieldPropertytype, v)
	return u
}

// UpdatePropertytype sets the "propertytype" field to the value that was provided on create.
func (u *ConfigPropertyUpsert) UpdatePropertytype() *ConfigPropertyUpsert {
	u.SetExcluded(configproperty.FieldPropertytype)
	return u
}

// SetPropertyvalue sets the "propertyvalue" field.
func (u *ConfigPropertyUpsert) SetPropertyvalue(v string) *ConfigPropertyUpsert {
	u.Set(configproperty.FieldPropertyvalue, v)
	return u
}

// UpdatePropertyvalue sets the "propertyvalue" field to the value that was provided on create.
func (u *ConfigPropertyUpsert) UpdatePropertyvalue() *ConfigPropertyUpsert {
	u.SetExcluded(configproperty.FieldPropertyvalue)
	return u
}

// ClearPropertyvalue clears the value of the "propertyvalue" field.
func (u *ConfigPropertyUpsert) ClearPropertyvalue() *ConfigPropertyUpsert {
	u.SetNull(configproperty.FieldPropertyvalue)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.ConfigProperty.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ConfigPropertyUpsertOne) UpdateNewValues() *ConfigPropertyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ConfigProperty.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ConfigPropertyUpsertOne) Ignore() *ConfigPropertyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ConfigPropertyUpsertOne) DoNothing() *ConfigPropertyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ConfigPropertyCreate.OnConflict
// documentation for more info.
func (u *ConfigPropertyUpsertOne) Update(set func(*ConfigPropertyUpsert)) *ConfigPropertyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ConfigPropertyUpsert{UpdateSet: update})
	}))
	return u
}

// SetDescription sets the "description" field.
func (u *ConfigPropertyUpsertOne) SetDescription(v string) *ConfigPropertyUpsertOne {
	return u.Update(func(s *ConfigPropertyUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ConfigPropertyUpsertOne) UpdateDescription() *ConfigPropertyUpsertOne {
	return u.Update(func(s *ConfigPropertyUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *ConfigPropertyUpsertOne) ClearDescription() *ConfigPropertyUpsertOne {
	return u.Update(func(s *ConfigPropertyUpsert) {
		s.ClearDescription()
	})
}

// SetGroupname sets the "groupname" field.
func (u *ConfigPropertyUpsertOne) SetGroupname(v string) *ConfigPropertyUpsertOne {
	return u.Update(func(s *ConfigPropertyUpsert) {
		s.SetGroupname(v)
	})
}

// UpdateGroupname sets the "groupname" field to the value that was provided on create.
func (u *ConfigPropertyUpsertOne) UpdateGroupname() *ConfigPropertyUpsertOne {
	return u.Update(func(s *ConfigPropertyUpsert) {
		s.UpdateGroupname()
	})
}

// SetPropertyname sets the "propertyname" field.
func (u *ConfigPropertyUpsertOne) SetPropertyname(v string) *ConfigPropertyUpsertOne {
	return u.Update(func(s *ConfigPropertyUpsert) {
		s.SetPropertyname(v)
	})
}

// UpdatePropertyname sets the "propertyname" field to the value that was provided on create.
func (u *ConfigPropertyUpsertOne) UpdatePropertyname() *ConfigPropertyUpsertOne {
	return u.Update(func(s *ConfigPropertyUpsert) {
		s.UpdatePropertyname()
	})
}

// SetPropertytype sets the "propertytype" field.
func (u *ConfigPropertyUpsertOne) SetPropertytype(v string) *ConfigPropertyUpsertOne {
	return u.Update(func(s *ConfigPropertyUpsert) {
		s.SetPropertytype(v)
	})
}

// UpdatePropertytype sets the "propertytype" field to the value that was provided on create.
func (u *ConfigPropertyUpsertOne) UpdatePropertytype() *ConfigPropertyUpsertOne {
	return u.Update(func(s *ConfigPropertyUpsert) {
		s.UpdatePropertytype()
	})
}

// SetPropertyvalue sets the "propertyvalue" field.
func (u *ConfigPropertyUpsertOne) SetPropertyvalue(v string) *ConfigPropertyUpsertOne {
	return u.Update(func(s *ConfigPropertyUpsert) {
		s.SetPropertyvalue(v)
	})
}

// UpdatePropertyvalue sets the "propertyvalue" field to the value that was provided on create.
func (u *ConfigPropertyUpsertOne) UpdatePropertyvalue() *ConfigPropertyUpsertOne {
	return u.Update(func(s *ConfigPropertyUpsert) {
		s.UpdatePropertyvalue()
	})
}

// ClearPropertyvalue clears the value of the "propertyvalue" field.
func (u *ConfigPropertyUpsertOne) ClearPropertyvalue() *ConfigPropertyUpsertOne {
	return u.Update(func(s *ConfigPropertyUpsert) {
		s.ClearPropertyvalue()
	})
}

// Exec executes the query.
func (u *ConfigPropertyUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ConfigPropertyCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ConfigPropertyUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ConfigPropertyUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ConfigPropertyUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ConfigPropertyCreateBulk is the builder for creating many ConfigProperty entities in bulk.
type ConfigPropertyCreateBulk struct {
	config
	err      error
	builders []*ConfigPropertyCreate
	conflict []sql.ConflictOption
}

// Save creates the ConfigProperty entities in the database.
func (cpcb *ConfigPropertyCreateBulk) Save(ctx context.Context) ([]*ConfigProperty, error) {
	if cpcb.err != nil {
		return nil, cpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cpcb.builders))
	nodes := make([]*ConfigProperty, len(cpcb.builders))
	mutators := make([]Mutator, len(cpcb.builders))
	for i := range cpcb.builders {
		func(i int, root context.Context) {
			builder := cpcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ConfigPropertyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cpcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cpcb *ConfigPropertyCreateBulk) SaveX(ctx context.Context) []*ConfigProperty {
	v, err := cpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cpcb *ConfigPropertyCreateBulk) Exec(ctx context.Context) error {
	_, err := cpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpcb *ConfigPropertyCreateBulk) ExecX(ctx context.Context) {
	if err := cpcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ConfigProperty.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ConfigPropertyUpsert) {
//			SetDescription(v+v).
//		}).
//		Exec(ctx)
func (cpcb *ConfigPropertyCreateBulk) OnConflict(opts ...sql.ConflictOption) *ConfigPropertyUpsertBulk {
	cpcb.conflict = opts
	return &ConfigPropertyUpsertBulk{
		create: cpcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ConfigProperty.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cpcb *ConfigPropertyCreateBulk) OnConflictColumns(columns ...string) *ConfigPropertyUpsertBulk {
	cpcb.conflict = append(cpcb.conflict, sql.ConflictColumns(columns...))
	return &ConfigPropertyUpsertBulk{
		create: cpcb,
	}
}

// ConfigPropertyUpsertBulk is the builder for "upsert"-ing
// a bulk of ConfigProperty nodes.
type ConfigPropertyUpsertBulk struct {
	create *ConfigPropertyCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ConfigProperty.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ConfigPropertyUpsertBulk) UpdateNewValues() *ConfigPropertyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ConfigProperty.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ConfigPropertyUpsertBulk) Ignore() *ConfigPropertyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ConfigPropertyUpsertBulk) DoNothing() *ConfigPropertyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ConfigPropertyCreateBulk.OnConflict
// documentation for more info.
func (u *ConfigPropertyUpsertBulk) Update(set func(*ConfigPropertyUpsert)) *ConfigPropertyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ConfigPropertyUpsert{UpdateSet: update})
	}))
	return u
}

// SetDescription sets the "description" field.
func (u *ConfigPropertyUpsertBulk) SetDescription(v string) *ConfigPropertyUpsertBulk {
	return u.Update(func(s *ConfigPropertyUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ConfigPropertyUpsertBulk) UpdateDescription() *ConfigPropertyUpsertBulk {
	return u.Update(func(s *ConfigPropertyUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *ConfigPropertyUpsertBulk) ClearDescription() *ConfigPropertyUpsertBulk {
	return u.Update(func(s *ConfigPropertyUpsert) {
		s.ClearDescription()
	})
}

// SetGroupname sets the "groupname" field.
func (u *ConfigPropertyUpsertBulk) SetGroupname(v string) *ConfigPropertyUpsertBulk {
	return u.Update(func(s *ConfigPropertyUpsert) {
		s.SetGroupname(v)
	})
}

// UpdateGroupname sets the "groupname" field to the value that was provided on create.
func (u *ConfigPropertyUpsertBulk) UpdateGroupname() *ConfigPropertyUpsertBulk {
	return u.Update(func(s *ConfigPropertyUpsert) {
		s.UpdateGroupname()
	})
}

// SetPropertyname sets the "propertyname" field.
func (u *ConfigPropertyUpsertBulk) SetPropertyname(v string) *ConfigPropertyUpsertBulk {
	return u.Update(func(s *ConfigPropertyUpsert) {
		s.SetPropertyname(v)
	})
}

// UpdatePropertyname sets the "propertyname" field to the value that was provided on create.
func (u *ConfigPropertyUpsertBulk) UpdatePropertyname() *ConfigPropertyUpsertBulk {
	return u.Update(func(s *ConfigPropertyUpsert) {
		s.UpdatePropertyname()
	})
}

// SetPropertytype sets the "propertytype" field.
func (u *ConfigPropertyUpsertBulk) SetPropertytype(v string) *ConfigPropertyUpsertBulk {
	return u.Update(func(s *ConfigPropertyUpsert) {
		s.SetPropertytype(v)
	})
}

// UpdatePropertytype sets the "propertytype" field to the value that was provided on create.
func (u *ConfigPropertyUpsertBulk) UpdatePropertytype() *ConfigPropertyUpsertBulk {
	return u.Update(func(s *ConfigPropertyUpsert) {
		s.UpdatePropertytype()
	})
}

// SetPropertyvalue sets the "propertyvalue" field.
func (u *ConfigPropertyUpsertBulk) SetPropertyvalue(v string) *ConfigPropertyUpsertBulk {
	return u.Update(func(s *ConfigPropertyUpsert) {
		s.SetPropertyvalue(v)
	})
}

// UpdatePropertyvalue sets the "propertyvalue" field to the value that was provided on create.
func (u *ConfigPropertyUpsertBulk) UpdatePropertyvalue() *ConfigPropertyUpsertBulk {
	return u.Update(func(s *ConfigPropertyUpsert) {
		s.UpdatePropertyvalue()
	})
}

// ClearPropertyvalue clears the value of the "propertyvalue" field.
func (u *ConfigPropertyUpsertBulk) ClearPropertyvalue() *ConfigPropertyUpsertBulk {
	return u.Update(func(s *ConfigPropertyUpsert) {
		s.ClearPropertyvalue()
	})
}

// Exec executes the query.
func (u *ConfigPropertyUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ConfigPropertyCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ConfigPropertyCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ConfigPropertyUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
