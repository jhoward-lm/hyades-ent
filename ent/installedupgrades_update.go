// Code generated by ent, DO NOT EDIT.
// --------------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2025 The DependencyTrack Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// --------------------------------------------------------------------
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// --------------------------------------------------------------------

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"dependencytrack.io/hyades/ent/installedupgrades"
	"dependencytrack.io/hyades/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// INSTALLEDUPGRADESUpdate is the builder for updating INSTALLEDUPGRADES entities.
type INSTALLEDUPGRADESUpdate struct {
	config
	hooks    []Hook
	mutation *INSTALLEDUPGRADESMutation
}

// Where appends a list predicates to the INSTALLEDUPGRADESUpdate builder.
func (iu *INSTALLEDUPGRADESUpdate) Where(ps ...predicate.INSTALLEDUPGRADES) *INSTALLEDUPGRADESUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetEndtime sets the "endtime" field.
func (iu *INSTALLEDUPGRADESUpdate) SetEndtime(t time.Time) *INSTALLEDUPGRADESUpdate {
	iu.mutation.SetEndtime(t)
	return iu
}

// SetNillableEndtime sets the "endtime" field if the given value is not nil.
func (iu *INSTALLEDUPGRADESUpdate) SetNillableEndtime(t *time.Time) *INSTALLEDUPGRADESUpdate {
	if t != nil {
		iu.SetEndtime(*t)
	}
	return iu
}

// ClearEndtime clears the value of the "endtime" field.
func (iu *INSTALLEDUPGRADESUpdate) ClearEndtime() *INSTALLEDUPGRADESUpdate {
	iu.mutation.ClearEndtime()
	return iu
}

// SetStarttime sets the "starttime" field.
func (iu *INSTALLEDUPGRADESUpdate) SetStarttime(t time.Time) *INSTALLEDUPGRADESUpdate {
	iu.mutation.SetStarttime(t)
	return iu
}

// SetNillableStarttime sets the "starttime" field if the given value is not nil.
func (iu *INSTALLEDUPGRADESUpdate) SetNillableStarttime(t *time.Time) *INSTALLEDUPGRADESUpdate {
	if t != nil {
		iu.SetStarttime(*t)
	}
	return iu
}

// ClearStarttime clears the value of the "starttime" field.
func (iu *INSTALLEDUPGRADESUpdate) ClearStarttime() *INSTALLEDUPGRADESUpdate {
	iu.mutation.ClearStarttime()
	return iu
}

// SetUpgradeclass sets the "upgradeclass" field.
func (iu *INSTALLEDUPGRADESUpdate) SetUpgradeclass(s string) *INSTALLEDUPGRADESUpdate {
	iu.mutation.SetUpgradeclass(s)
	return iu
}

// SetNillableUpgradeclass sets the "upgradeclass" field if the given value is not nil.
func (iu *INSTALLEDUPGRADESUpdate) SetNillableUpgradeclass(s *string) *INSTALLEDUPGRADESUpdate {
	if s != nil {
		iu.SetUpgradeclass(*s)
	}
	return iu
}

// ClearUpgradeclass clears the value of the "upgradeclass" field.
func (iu *INSTALLEDUPGRADESUpdate) ClearUpgradeclass() *INSTALLEDUPGRADESUpdate {
	iu.mutation.ClearUpgradeclass()
	return iu
}

// Mutation returns the INSTALLEDUPGRADESMutation object of the builder.
func (iu *INSTALLEDUPGRADESUpdate) Mutation() *INSTALLEDUPGRADESMutation {
	return iu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *INSTALLEDUPGRADESUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *INSTALLEDUPGRADESUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *INSTALLEDUPGRADESUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *INSTALLEDUPGRADESUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iu *INSTALLEDUPGRADESUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(installedupgrades.Table, installedupgrades.Columns, sqlgraph.NewFieldSpec(installedupgrades.FieldID, field.TypeInt))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.Endtime(); ok {
		_spec.SetField(installedupgrades.FieldEndtime, field.TypeTime, value)
	}
	if iu.mutation.EndtimeCleared() {
		_spec.ClearField(installedupgrades.FieldEndtime, field.TypeTime)
	}
	if value, ok := iu.mutation.Starttime(); ok {
		_spec.SetField(installedupgrades.FieldStarttime, field.TypeTime, value)
	}
	if iu.mutation.StarttimeCleared() {
		_spec.ClearField(installedupgrades.FieldStarttime, field.TypeTime)
	}
	if value, ok := iu.mutation.Upgradeclass(); ok {
		_spec.SetField(installedupgrades.FieldUpgradeclass, field.TypeString, value)
	}
	if iu.mutation.UpgradeclassCleared() {
		_spec.ClearField(installedupgrades.FieldUpgradeclass, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{installedupgrades.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// INSTALLEDUPGRADESUpdateOne is the builder for updating a single INSTALLEDUPGRADES entity.
type INSTALLEDUPGRADESUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *INSTALLEDUPGRADESMutation
}

// SetEndtime sets the "endtime" field.
func (iuo *INSTALLEDUPGRADESUpdateOne) SetEndtime(t time.Time) *INSTALLEDUPGRADESUpdateOne {
	iuo.mutation.SetEndtime(t)
	return iuo
}

// SetNillableEndtime sets the "endtime" field if the given value is not nil.
func (iuo *INSTALLEDUPGRADESUpdateOne) SetNillableEndtime(t *time.Time) *INSTALLEDUPGRADESUpdateOne {
	if t != nil {
		iuo.SetEndtime(*t)
	}
	return iuo
}

// ClearEndtime clears the value of the "endtime" field.
func (iuo *INSTALLEDUPGRADESUpdateOne) ClearEndtime() *INSTALLEDUPGRADESUpdateOne {
	iuo.mutation.ClearEndtime()
	return iuo
}

// SetStarttime sets the "starttime" field.
func (iuo *INSTALLEDUPGRADESUpdateOne) SetStarttime(t time.Time) *INSTALLEDUPGRADESUpdateOne {
	iuo.mutation.SetStarttime(t)
	return iuo
}

// SetNillableStarttime sets the "starttime" field if the given value is not nil.
func (iuo *INSTALLEDUPGRADESUpdateOne) SetNillableStarttime(t *time.Time) *INSTALLEDUPGRADESUpdateOne {
	if t != nil {
		iuo.SetStarttime(*t)
	}
	return iuo
}

// ClearStarttime clears the value of the "starttime" field.
func (iuo *INSTALLEDUPGRADESUpdateOne) ClearStarttime() *INSTALLEDUPGRADESUpdateOne {
	iuo.mutation.ClearStarttime()
	return iuo
}

// SetUpgradeclass sets the "upgradeclass" field.
func (iuo *INSTALLEDUPGRADESUpdateOne) SetUpgradeclass(s string) *INSTALLEDUPGRADESUpdateOne {
	iuo.mutation.SetUpgradeclass(s)
	return iuo
}

// SetNillableUpgradeclass sets the "upgradeclass" field if the given value is not nil.
func (iuo *INSTALLEDUPGRADESUpdateOne) SetNillableUpgradeclass(s *string) *INSTALLEDUPGRADESUpdateOne {
	if s != nil {
		iuo.SetUpgradeclass(*s)
	}
	return iuo
}

// ClearUpgradeclass clears the value of the "upgradeclass" field.
func (iuo *INSTALLEDUPGRADESUpdateOne) ClearUpgradeclass() *INSTALLEDUPGRADESUpdateOne {
	iuo.mutation.ClearUpgradeclass()
	return iuo
}

// Mutation returns the INSTALLEDUPGRADESMutation object of the builder.
func (iuo *INSTALLEDUPGRADESUpdateOne) Mutation() *INSTALLEDUPGRADESMutation {
	return iuo.mutation
}

// Where appends a list predicates to the INSTALLEDUPGRADESUpdate builder.
func (iuo *INSTALLEDUPGRADESUpdateOne) Where(ps ...predicate.INSTALLEDUPGRADES) *INSTALLEDUPGRADESUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *INSTALLEDUPGRADESUpdateOne) Select(field string, fields ...string) *INSTALLEDUPGRADESUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated INSTALLEDUPGRADES entity.
func (iuo *INSTALLEDUPGRADESUpdateOne) Save(ctx context.Context) (*INSTALLEDUPGRADES, error) {
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *INSTALLEDUPGRADESUpdateOne) SaveX(ctx context.Context) *INSTALLEDUPGRADES {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *INSTALLEDUPGRADESUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *INSTALLEDUPGRADESUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iuo *INSTALLEDUPGRADESUpdateOne) sqlSave(ctx context.Context) (_node *INSTALLEDUPGRADES, err error) {
	_spec := sqlgraph.NewUpdateSpec(installedupgrades.Table, installedupgrades.Columns, sqlgraph.NewFieldSpec(installedupgrades.FieldID, field.TypeInt))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "INSTALLEDUPGRADES.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, installedupgrades.FieldID)
		for _, f := range fields {
			if !installedupgrades.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != installedupgrades.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.Endtime(); ok {
		_spec.SetField(installedupgrades.FieldEndtime, field.TypeTime, value)
	}
	if iuo.mutation.EndtimeCleared() {
		_spec.ClearField(installedupgrades.FieldEndtime, field.TypeTime)
	}
	if value, ok := iuo.mutation.Starttime(); ok {
		_spec.SetField(installedupgrades.FieldStarttime, field.TypeTime, value)
	}
	if iuo.mutation.StarttimeCleared() {
		_spec.ClearField(installedupgrades.FieldStarttime, field.TypeTime)
	}
	if value, ok := iuo.mutation.Upgradeclass(); ok {
		_spec.SetField(installedupgrades.FieldUpgradeclass, field.TypeString, value)
	}
	if iuo.mutation.UpgradeclassCleared() {
		_spec.ClearField(installedupgrades.FieldUpgradeclass, field.TypeString)
	}
	_node = &INSTALLEDUPGRADES{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{installedupgrades.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
