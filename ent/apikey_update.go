// Code generated by ent, DO NOT EDIT.
// --------------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2025 The DependencyTrack Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// --------------------------------------------------------------------
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// --------------------------------------------------------------------

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"dependencytrack.io/hyades/ent/apikey"
	"dependencytrack.io/hyades/ent/predicate"
	"dependencytrack.io/hyades/ent/team"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// APIKeyUpdate is the builder for updating APIKey entities.
type APIKeyUpdate struct {
	config
	hooks    []Hook
	mutation *APIKeyMutation
}

// Where appends a list predicates to the APIKeyUpdate builder.
func (aku *APIKeyUpdate) Where(ps ...predicate.APIKey) *APIKeyUpdate {
	aku.mutation.Where(ps...)
	return aku
}

// SetApikey sets the "apikey" field.
func (aku *APIKeyUpdate) SetApikey(s string) *APIKeyUpdate {
	aku.mutation.SetApikey(s)
	return aku
}

// SetNillableApikey sets the "apikey" field if the given value is not nil.
func (aku *APIKeyUpdate) SetNillableApikey(s *string) *APIKeyUpdate {
	if s != nil {
		aku.SetApikey(*s)
	}
	return aku
}

// SetComment sets the "comment" field.
func (aku *APIKeyUpdate) SetComment(s string) *APIKeyUpdate {
	aku.mutation.SetComment(s)
	return aku
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (aku *APIKeyUpdate) SetNillableComment(s *string) *APIKeyUpdate {
	if s != nil {
		aku.SetComment(*s)
	}
	return aku
}

// ClearComment clears the value of the "comment" field.
func (aku *APIKeyUpdate) ClearComment() *APIKeyUpdate {
	aku.mutation.ClearComment()
	return aku
}

// SetCreated sets the "created" field.
func (aku *APIKeyUpdate) SetCreated(t time.Time) *APIKeyUpdate {
	aku.mutation.SetCreated(t)
	return aku
}

// SetNillableCreated sets the "created" field if the given value is not nil.
func (aku *APIKeyUpdate) SetNillableCreated(t *time.Time) *APIKeyUpdate {
	if t != nil {
		aku.SetCreated(*t)
	}
	return aku
}

// ClearCreated clears the value of the "created" field.
func (aku *APIKeyUpdate) ClearCreated() *APIKeyUpdate {
	aku.mutation.ClearCreated()
	return aku
}

// SetLastUsed sets the "last_used" field.
func (aku *APIKeyUpdate) SetLastUsed(t time.Time) *APIKeyUpdate {
	aku.mutation.SetLastUsed(t)
	return aku
}

// SetNillableLastUsed sets the "last_used" field if the given value is not nil.
func (aku *APIKeyUpdate) SetNillableLastUsed(t *time.Time) *APIKeyUpdate {
	if t != nil {
		aku.SetLastUsed(*t)
	}
	return aku
}

// ClearLastUsed clears the value of the "last_used" field.
func (aku *APIKeyUpdate) ClearLastUsed() *APIKeyUpdate {
	aku.mutation.ClearLastUsed()
	return aku
}

// SetIsLegacy sets the "is_legacy" field.
func (aku *APIKeyUpdate) SetIsLegacy(b bool) *APIKeyUpdate {
	aku.mutation.SetIsLegacy(b)
	return aku
}

// SetNillableIsLegacy sets the "is_legacy" field if the given value is not nil.
func (aku *APIKeyUpdate) SetNillableIsLegacy(b *bool) *APIKeyUpdate {
	if b != nil {
		aku.SetIsLegacy(*b)
	}
	return aku
}

// SetPublicID sets the "public_id" field.
func (aku *APIKeyUpdate) SetPublicID(s string) *APIKeyUpdate {
	aku.mutation.SetPublicID(s)
	return aku
}

// SetNillablePublicID sets the "public_id" field if the given value is not nil.
func (aku *APIKeyUpdate) SetNillablePublicID(s *string) *APIKeyUpdate {
	if s != nil {
		aku.SetPublicID(*s)
	}
	return aku
}

// ClearPublicID clears the value of the "public_id" field.
func (aku *APIKeyUpdate) ClearPublicID() *APIKeyUpdate {
	aku.mutation.ClearPublicID()
	return aku
}

// AddTeamIDs adds the "teams" edge to the Team entity by IDs.
func (aku *APIKeyUpdate) AddTeamIDs(ids ...int) *APIKeyUpdate {
	aku.mutation.AddTeamIDs(ids...)
	return aku
}

// AddTeams adds the "teams" edges to the Team entity.
func (aku *APIKeyUpdate) AddTeams(t ...*Team) *APIKeyUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return aku.AddTeamIDs(ids...)
}

// Mutation returns the APIKeyMutation object of the builder.
func (aku *APIKeyUpdate) Mutation() *APIKeyMutation {
	return aku.mutation
}

// ClearTeams clears all "teams" edges to the Team entity.
func (aku *APIKeyUpdate) ClearTeams() *APIKeyUpdate {
	aku.mutation.ClearTeams()
	return aku
}

// RemoveTeamIDs removes the "teams" edge to Team entities by IDs.
func (aku *APIKeyUpdate) RemoveTeamIDs(ids ...int) *APIKeyUpdate {
	aku.mutation.RemoveTeamIDs(ids...)
	return aku
}

// RemoveTeams removes "teams" edges to Team entities.
func (aku *APIKeyUpdate) RemoveTeams(t ...*Team) *APIKeyUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return aku.RemoveTeamIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aku *APIKeyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, aku.sqlSave, aku.mutation, aku.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aku *APIKeyUpdate) SaveX(ctx context.Context) int {
	affected, err := aku.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aku *APIKeyUpdate) Exec(ctx context.Context) error {
	_, err := aku.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aku *APIKeyUpdate) ExecX(ctx context.Context) {
	if err := aku.Exec(ctx); err != nil {
		panic(err)
	}
}

func (aku *APIKeyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(apikey.Table, apikey.Columns, sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeInt))
	if ps := aku.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aku.mutation.Apikey(); ok {
		_spec.SetField(apikey.FieldApikey, field.TypeString, value)
	}
	if value, ok := aku.mutation.Comment(); ok {
		_spec.SetField(apikey.FieldComment, field.TypeString, value)
	}
	if aku.mutation.CommentCleared() {
		_spec.ClearField(apikey.FieldComment, field.TypeString)
	}
	if value, ok := aku.mutation.Created(); ok {
		_spec.SetField(apikey.FieldCreated, field.TypeTime, value)
	}
	if aku.mutation.CreatedCleared() {
		_spec.ClearField(apikey.FieldCreated, field.TypeTime)
	}
	if value, ok := aku.mutation.LastUsed(); ok {
		_spec.SetField(apikey.FieldLastUsed, field.TypeTime, value)
	}
	if aku.mutation.LastUsedCleared() {
		_spec.ClearField(apikey.FieldLastUsed, field.TypeTime)
	}
	if value, ok := aku.mutation.IsLegacy(); ok {
		_spec.SetField(apikey.FieldIsLegacy, field.TypeBool, value)
	}
	if value, ok := aku.mutation.PublicID(); ok {
		_spec.SetField(apikey.FieldPublicID, field.TypeString, value)
	}
	if aku.mutation.PublicIDCleared() {
		_spec.ClearField(apikey.FieldPublicID, field.TypeString)
	}
	if aku.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   apikey.TeamsTable,
			Columns: apikey.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aku.mutation.RemovedTeamsIDs(); len(nodes) > 0 && !aku.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   apikey.TeamsTable,
			Columns: apikey.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aku.mutation.TeamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   apikey.TeamsTable,
			Columns: apikey.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aku.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{apikey.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	aku.mutation.done = true
	return n, nil
}

// APIKeyUpdateOne is the builder for updating a single APIKey entity.
type APIKeyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *APIKeyMutation
}

// SetApikey sets the "apikey" field.
func (akuo *APIKeyUpdateOne) SetApikey(s string) *APIKeyUpdateOne {
	akuo.mutation.SetApikey(s)
	return akuo
}

// SetNillableApikey sets the "apikey" field if the given value is not nil.
func (akuo *APIKeyUpdateOne) SetNillableApikey(s *string) *APIKeyUpdateOne {
	if s != nil {
		akuo.SetApikey(*s)
	}
	return akuo
}

// SetComment sets the "comment" field.
func (akuo *APIKeyUpdateOne) SetComment(s string) *APIKeyUpdateOne {
	akuo.mutation.SetComment(s)
	return akuo
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (akuo *APIKeyUpdateOne) SetNillableComment(s *string) *APIKeyUpdateOne {
	if s != nil {
		akuo.SetComment(*s)
	}
	return akuo
}

// ClearComment clears the value of the "comment" field.
func (akuo *APIKeyUpdateOne) ClearComment() *APIKeyUpdateOne {
	akuo.mutation.ClearComment()
	return akuo
}

// SetCreated sets the "created" field.
func (akuo *APIKeyUpdateOne) SetCreated(t time.Time) *APIKeyUpdateOne {
	akuo.mutation.SetCreated(t)
	return akuo
}

// SetNillableCreated sets the "created" field if the given value is not nil.
func (akuo *APIKeyUpdateOne) SetNillableCreated(t *time.Time) *APIKeyUpdateOne {
	if t != nil {
		akuo.SetCreated(*t)
	}
	return akuo
}

// ClearCreated clears the value of the "created" field.
func (akuo *APIKeyUpdateOne) ClearCreated() *APIKeyUpdateOne {
	akuo.mutation.ClearCreated()
	return akuo
}

// SetLastUsed sets the "last_used" field.
func (akuo *APIKeyUpdateOne) SetLastUsed(t time.Time) *APIKeyUpdateOne {
	akuo.mutation.SetLastUsed(t)
	return akuo
}

// SetNillableLastUsed sets the "last_used" field if the given value is not nil.
func (akuo *APIKeyUpdateOne) SetNillableLastUsed(t *time.Time) *APIKeyUpdateOne {
	if t != nil {
		akuo.SetLastUsed(*t)
	}
	return akuo
}

// ClearLastUsed clears the value of the "last_used" field.
func (akuo *APIKeyUpdateOne) ClearLastUsed() *APIKeyUpdateOne {
	akuo.mutation.ClearLastUsed()
	return akuo
}

// SetIsLegacy sets the "is_legacy" field.
func (akuo *APIKeyUpdateOne) SetIsLegacy(b bool) *APIKeyUpdateOne {
	akuo.mutation.SetIsLegacy(b)
	return akuo
}

// SetNillableIsLegacy sets the "is_legacy" field if the given value is not nil.
func (akuo *APIKeyUpdateOne) SetNillableIsLegacy(b *bool) *APIKeyUpdateOne {
	if b != nil {
		akuo.SetIsLegacy(*b)
	}
	return akuo
}

// SetPublicID sets the "public_id" field.
func (akuo *APIKeyUpdateOne) SetPublicID(s string) *APIKeyUpdateOne {
	akuo.mutation.SetPublicID(s)
	return akuo
}

// SetNillablePublicID sets the "public_id" field if the given value is not nil.
func (akuo *APIKeyUpdateOne) SetNillablePublicID(s *string) *APIKeyUpdateOne {
	if s != nil {
		akuo.SetPublicID(*s)
	}
	return akuo
}

// ClearPublicID clears the value of the "public_id" field.
func (akuo *APIKeyUpdateOne) ClearPublicID() *APIKeyUpdateOne {
	akuo.mutation.ClearPublicID()
	return akuo
}

// AddTeamIDs adds the "teams" edge to the Team entity by IDs.
func (akuo *APIKeyUpdateOne) AddTeamIDs(ids ...int) *APIKeyUpdateOne {
	akuo.mutation.AddTeamIDs(ids...)
	return akuo
}

// AddTeams adds the "teams" edges to the Team entity.
func (akuo *APIKeyUpdateOne) AddTeams(t ...*Team) *APIKeyUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return akuo.AddTeamIDs(ids...)
}

// Mutation returns the APIKeyMutation object of the builder.
func (akuo *APIKeyUpdateOne) Mutation() *APIKeyMutation {
	return akuo.mutation
}

// ClearTeams clears all "teams" edges to the Team entity.
func (akuo *APIKeyUpdateOne) ClearTeams() *APIKeyUpdateOne {
	akuo.mutation.ClearTeams()
	return akuo
}

// RemoveTeamIDs removes the "teams" edge to Team entities by IDs.
func (akuo *APIKeyUpdateOne) RemoveTeamIDs(ids ...int) *APIKeyUpdateOne {
	akuo.mutation.RemoveTeamIDs(ids...)
	return akuo
}

// RemoveTeams removes "teams" edges to Team entities.
func (akuo *APIKeyUpdateOne) RemoveTeams(t ...*Team) *APIKeyUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return akuo.RemoveTeamIDs(ids...)
}

// Where appends a list predicates to the APIKeyUpdate builder.
func (akuo *APIKeyUpdateOne) Where(ps ...predicate.APIKey) *APIKeyUpdateOne {
	akuo.mutation.Where(ps...)
	return akuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (akuo *APIKeyUpdateOne) Select(field string, fields ...string) *APIKeyUpdateOne {
	akuo.fields = append([]string{field}, fields...)
	return akuo
}

// Save executes the query and returns the updated APIKey entity.
func (akuo *APIKeyUpdateOne) Save(ctx context.Context) (*APIKey, error) {
	return withHooks(ctx, akuo.sqlSave, akuo.mutation, akuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (akuo *APIKeyUpdateOne) SaveX(ctx context.Context) *APIKey {
	node, err := akuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (akuo *APIKeyUpdateOne) Exec(ctx context.Context) error {
	_, err := akuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (akuo *APIKeyUpdateOne) ExecX(ctx context.Context) {
	if err := akuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (akuo *APIKeyUpdateOne) sqlSave(ctx context.Context) (_node *APIKey, err error) {
	_spec := sqlgraph.NewUpdateSpec(apikey.Table, apikey.Columns, sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeInt))
	id, ok := akuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "APIKey.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := akuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, apikey.FieldID)
		for _, f := range fields {
			if !apikey.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != apikey.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := akuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := akuo.mutation.Apikey(); ok {
		_spec.SetField(apikey.FieldApikey, field.TypeString, value)
	}
	if value, ok := akuo.mutation.Comment(); ok {
		_spec.SetField(apikey.FieldComment, field.TypeString, value)
	}
	if akuo.mutation.CommentCleared() {
		_spec.ClearField(apikey.FieldComment, field.TypeString)
	}
	if value, ok := akuo.mutation.Created(); ok {
		_spec.SetField(apikey.FieldCreated, field.TypeTime, value)
	}
	if akuo.mutation.CreatedCleared() {
		_spec.ClearField(apikey.FieldCreated, field.TypeTime)
	}
	if value, ok := akuo.mutation.LastUsed(); ok {
		_spec.SetField(apikey.FieldLastUsed, field.TypeTime, value)
	}
	if akuo.mutation.LastUsedCleared() {
		_spec.ClearField(apikey.FieldLastUsed, field.TypeTime)
	}
	if value, ok := akuo.mutation.IsLegacy(); ok {
		_spec.SetField(apikey.FieldIsLegacy, field.TypeBool, value)
	}
	if value, ok := akuo.mutation.PublicID(); ok {
		_spec.SetField(apikey.FieldPublicID, field.TypeString, value)
	}
	if akuo.mutation.PublicIDCleared() {
		_spec.ClearField(apikey.FieldPublicID, field.TypeString)
	}
	if akuo.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   apikey.TeamsTable,
			Columns: apikey.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := akuo.mutation.RemovedTeamsIDs(); len(nodes) > 0 && !akuo.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   apikey.TeamsTable,
			Columns: apikey.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := akuo.mutation.TeamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   apikey.TeamsTable,
			Columns: apikey.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &APIKey{config: akuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, akuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{apikey.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	akuo.mutation.done = true
	return _node, nil
}
