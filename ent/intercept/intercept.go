// Code generated by ent, DO NOT EDIT.
// --------------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2025 The DependencyTrack Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// --------------------------------------------------------------------
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// --------------------------------------------------------------------

package intercept

import (
	"context"
	"fmt"

	"dependencytrack.io/hyades/ent"
	"dependencytrack.io/hyades/ent/apikey"
	"dependencytrack.io/hyades/ent/configproperty"
	"dependencytrack.io/hyades/ent/eventservicelog"
	"dependencytrack.io/hyades/ent/installedupgrades"
	"dependencytrack.io/hyades/ent/ldapuser"
	"dependencytrack.io/hyades/ent/manageduser"
	"dependencytrack.io/hyades/ent/mappedldapgroup"
	"dependencytrack.io/hyades/ent/mappedoidcgroup"
	"dependencytrack.io/hyades/ent/oidcgroup"
	"dependencytrack.io/hyades/ent/oidcuser"
	"dependencytrack.io/hyades/ent/permission"
	"dependencytrack.io/hyades/ent/predicate"
	"dependencytrack.io/hyades/ent/schemaversion"
	"dependencytrack.io/hyades/ent/team"
	"entgo.io/ent/dialect/sql"
)

// The Query interface represents an operation that queries a graph.
// By using this interface, users can write generic code that manipulates
// query builders of different types.
type Query interface {
	// Type returns the string representation of the query type.
	Type() string
	// Limit the number of records to be returned by this query.
	Limit(int)
	// Offset to start from.
	Offset(int)
	// Unique configures the query builder to filter duplicate records.
	Unique(bool)
	// Order specifies how the records should be ordered.
	Order(...func(*sql.Selector))
	// WhereP appends storage-level predicates to the query builder. Using this method, users
	// can use type-assertion to append predicates that do not depend on any generated package.
	WhereP(...func(*sql.Selector))
}

// The Func type is an adapter that allows ordinary functions to be used as interceptors.
// Unlike traversal functions, interceptors are skipped during graph traversals. Note that the
// implementation of Func is different from the one defined in entgo.io/ent.InterceptFunc.
type Func func(context.Context, Query) error

// Intercept calls f(ctx, q) and then applied the next Querier.
func (f Func) Intercept(next ent.Querier) ent.Querier {
	return ent.QuerierFunc(func(ctx context.Context, q ent.Query) (ent.Value, error) {
		query, err := NewQuery(q)
		if err != nil {
			return nil, err
		}
		if err := f(ctx, query); err != nil {
			return nil, err
		}
		return next.Query(ctx, q)
	})
}

// The TraverseFunc type is an adapter to allow the use of ordinary function as Traverser.
// If f is a function with the appropriate signature, TraverseFunc(f) is a Traverser that calls f.
type TraverseFunc func(context.Context, Query) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseFunc) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseFunc) Traverse(ctx context.Context, q ent.Query) error {
	query, err := NewQuery(q)
	if err != nil {
		return err
	}
	return f(ctx, query)
}

// The APIKeyFunc type is an adapter to allow the use of ordinary function as a Querier.
type APIKeyFunc func(context.Context, *ent.APIKeyQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f APIKeyFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.APIKeyQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.APIKeyQuery", q)
}

// The TraverseAPIKey type is an adapter to allow the use of ordinary function as Traverser.
type TraverseAPIKey func(context.Context, *ent.APIKeyQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseAPIKey) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseAPIKey) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.APIKeyQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.APIKeyQuery", q)
}

// The ConfigPropertyFunc type is an adapter to allow the use of ordinary function as a Querier.
type ConfigPropertyFunc func(context.Context, *ent.ConfigPropertyQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ConfigPropertyFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ConfigPropertyQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ConfigPropertyQuery", q)
}

// The TraverseConfigProperty type is an adapter to allow the use of ordinary function as Traverser.
type TraverseConfigProperty func(context.Context, *ent.ConfigPropertyQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseConfigProperty) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseConfigProperty) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ConfigPropertyQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ConfigPropertyQuery", q)
}

// The EventServiceLogFunc type is an adapter to allow the use of ordinary function as a Querier.
type EventServiceLogFunc func(context.Context, *ent.EventServiceLogQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f EventServiceLogFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.EventServiceLogQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.EventServiceLogQuery", q)
}

// The TraverseEventServiceLog type is an adapter to allow the use of ordinary function as Traverser.
type TraverseEventServiceLog func(context.Context, *ent.EventServiceLogQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseEventServiceLog) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseEventServiceLog) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.EventServiceLogQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.EventServiceLogQuery", q)
}

// The INSTALLEDUPGRADESFunc type is an adapter to allow the use of ordinary function as a Querier.
type INSTALLEDUPGRADESFunc func(context.Context, *ent.INSTALLEDUPGRADESQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f INSTALLEDUPGRADESFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.INSTALLEDUPGRADESQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.INSTALLEDUPGRADESQuery", q)
}

// The TraverseINSTALLEDUPGRADES type is an adapter to allow the use of ordinary function as Traverser.
type TraverseINSTALLEDUPGRADES func(context.Context, *ent.INSTALLEDUPGRADESQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseINSTALLEDUPGRADES) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseINSTALLEDUPGRADES) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.INSTALLEDUPGRADESQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.INSTALLEDUPGRADESQuery", q)
}

// The LDAPUserFunc type is an adapter to allow the use of ordinary function as a Querier.
type LDAPUserFunc func(context.Context, *ent.LDAPUserQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f LDAPUserFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.LDAPUserQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.LDAPUserQuery", q)
}

// The TraverseLDAPUser type is an adapter to allow the use of ordinary function as Traverser.
type TraverseLDAPUser func(context.Context, *ent.LDAPUserQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseLDAPUser) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseLDAPUser) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.LDAPUserQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.LDAPUserQuery", q)
}

// The ManagedUserFunc type is an adapter to allow the use of ordinary function as a Querier.
type ManagedUserFunc func(context.Context, *ent.ManagedUserQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ManagedUserFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ManagedUserQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ManagedUserQuery", q)
}

// The TraverseManagedUser type is an adapter to allow the use of ordinary function as Traverser.
type TraverseManagedUser func(context.Context, *ent.ManagedUserQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseManagedUser) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseManagedUser) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ManagedUserQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ManagedUserQuery", q)
}

// The MappedLDAPGroupFunc type is an adapter to allow the use of ordinary function as a Querier.
type MappedLDAPGroupFunc func(context.Context, *ent.MappedLDAPGroupQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f MappedLDAPGroupFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.MappedLDAPGroupQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.MappedLDAPGroupQuery", q)
}

// The TraverseMappedLDAPGroup type is an adapter to allow the use of ordinary function as Traverser.
type TraverseMappedLDAPGroup func(context.Context, *ent.MappedLDAPGroupQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseMappedLDAPGroup) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseMappedLDAPGroup) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.MappedLDAPGroupQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.MappedLDAPGroupQuery", q)
}

// The MappedOIDCGroupFunc type is an adapter to allow the use of ordinary function as a Querier.
type MappedOIDCGroupFunc func(context.Context, *ent.MappedOIDCGroupQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f MappedOIDCGroupFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.MappedOIDCGroupQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.MappedOIDCGroupQuery", q)
}

// The TraverseMappedOIDCGroup type is an adapter to allow the use of ordinary function as Traverser.
type TraverseMappedOIDCGroup func(context.Context, *ent.MappedOIDCGroupQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseMappedOIDCGroup) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseMappedOIDCGroup) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.MappedOIDCGroupQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.MappedOIDCGroupQuery", q)
}

// The OIDCGroupFunc type is an adapter to allow the use of ordinary function as a Querier.
type OIDCGroupFunc func(context.Context, *ent.OIDCGroupQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f OIDCGroupFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.OIDCGroupQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.OIDCGroupQuery", q)
}

// The TraverseOIDCGroup type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOIDCGroup func(context.Context, *ent.OIDCGroupQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOIDCGroup) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOIDCGroup) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OIDCGroupQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.OIDCGroupQuery", q)
}

// The OIDCUserFunc type is an adapter to allow the use of ordinary function as a Querier.
type OIDCUserFunc func(context.Context, *ent.OIDCUserQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f OIDCUserFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.OIDCUserQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.OIDCUserQuery", q)
}

// The TraverseOIDCUser type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOIDCUser func(context.Context, *ent.OIDCUserQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOIDCUser) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOIDCUser) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OIDCUserQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.OIDCUserQuery", q)
}

// The PermissionFunc type is an adapter to allow the use of ordinary function as a Querier.
type PermissionFunc func(context.Context, *ent.PermissionQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f PermissionFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.PermissionQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.PermissionQuery", q)
}

// The TraversePermission type is an adapter to allow the use of ordinary function as Traverser.
type TraversePermission func(context.Context, *ent.PermissionQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraversePermission) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraversePermission) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PermissionQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.PermissionQuery", q)
}

// The SchemaVersionFunc type is an adapter to allow the use of ordinary function as a Querier.
type SchemaVersionFunc func(context.Context, *ent.SchemaVersionQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f SchemaVersionFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.SchemaVersionQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.SchemaVersionQuery", q)
}

// The TraverseSchemaVersion type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSchemaVersion func(context.Context, *ent.SchemaVersionQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSchemaVersion) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSchemaVersion) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SchemaVersionQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.SchemaVersionQuery", q)
}

// The TeamFunc type is an adapter to allow the use of ordinary function as a Querier.
type TeamFunc func(context.Context, *ent.TeamQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f TeamFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.TeamQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.TeamQuery", q)
}

// The TraverseTeam type is an adapter to allow the use of ordinary function as Traverser.
type TraverseTeam func(context.Context, *ent.TeamQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseTeam) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseTeam) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.TeamQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.TeamQuery", q)
}

// NewQuery returns the generic Query interface for the given typed query.
func NewQuery(q ent.Query) (Query, error) {
	switch q := q.(type) {
	case *ent.APIKeyQuery:
		return &query[*ent.APIKeyQuery, predicate.APIKey, apikey.OrderOption]{typ: ent.TypeAPIKey, tq: q}, nil
	case *ent.ConfigPropertyQuery:
		return &query[*ent.ConfigPropertyQuery, predicate.ConfigProperty, configproperty.OrderOption]{typ: ent.TypeConfigProperty, tq: q}, nil
	case *ent.EventServiceLogQuery:
		return &query[*ent.EventServiceLogQuery, predicate.EventServiceLog, eventservicelog.OrderOption]{typ: ent.TypeEventServiceLog, tq: q}, nil
	case *ent.INSTALLEDUPGRADESQuery:
		return &query[*ent.INSTALLEDUPGRADESQuery, predicate.INSTALLEDUPGRADES, installedupgrades.OrderOption]{typ: ent.TypeINSTALLEDUPGRADES, tq: q}, nil
	case *ent.LDAPUserQuery:
		return &query[*ent.LDAPUserQuery, predicate.LDAPUser, ldapuser.OrderOption]{typ: ent.TypeLDAPUser, tq: q}, nil
	case *ent.ManagedUserQuery:
		return &query[*ent.ManagedUserQuery, predicate.ManagedUser, manageduser.OrderOption]{typ: ent.TypeManagedUser, tq: q}, nil
	case *ent.MappedLDAPGroupQuery:
		return &query[*ent.MappedLDAPGroupQuery, predicate.MappedLDAPGroup, mappedldapgroup.OrderOption]{typ: ent.TypeMappedLDAPGroup, tq: q}, nil
	case *ent.MappedOIDCGroupQuery:
		return &query[*ent.MappedOIDCGroupQuery, predicate.MappedOIDCGroup, mappedoidcgroup.OrderOption]{typ: ent.TypeMappedOIDCGroup, tq: q}, nil
	case *ent.OIDCGroupQuery:
		return &query[*ent.OIDCGroupQuery, predicate.OIDCGroup, oidcgroup.OrderOption]{typ: ent.TypeOIDCGroup, tq: q}, nil
	case *ent.OIDCUserQuery:
		return &query[*ent.OIDCUserQuery, predicate.OIDCUser, oidcuser.OrderOption]{typ: ent.TypeOIDCUser, tq: q}, nil
	case *ent.PermissionQuery:
		return &query[*ent.PermissionQuery, predicate.Permission, permission.OrderOption]{typ: ent.TypePermission, tq: q}, nil
	case *ent.SchemaVersionQuery:
		return &query[*ent.SchemaVersionQuery, predicate.SchemaVersion, schemaversion.OrderOption]{typ: ent.TypeSchemaVersion, tq: q}, nil
	case *ent.TeamQuery:
		return &query[*ent.TeamQuery, predicate.Team, team.OrderOption]{typ: ent.TypeTeam, tq: q}, nil
	default:
		return nil, fmt.Errorf("unknown query type %T", q)
	}
}

type query[T any, P ~func(*sql.Selector), R ~func(*sql.Selector)] struct {
	typ string
	tq  interface {
		Limit(int) T
		Offset(int) T
		Unique(bool) T
		Order(...R) T
		Where(...P) T
	}
}

func (q query[T, P, R]) Type() string {
	return q.typ
}

func (q query[T, P, R]) Limit(limit int) {
	q.tq.Limit(limit)
}

func (q query[T, P, R]) Offset(offset int) {
	q.tq.Offset(offset)
}

func (q query[T, P, R]) Unique(unique bool) {
	q.tq.Unique(unique)
}

func (q query[T, P, R]) Order(orders ...func(*sql.Selector)) {
	rs := make([]R, len(orders))
	for i := range orders {
		rs[i] = orders[i]
	}
	q.tq.Order(rs...)
}

func (q query[T, P, R]) WhereP(ps ...func(*sql.Selector)) {
	p := make([]P, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	q.tq.Where(p...)
}
