// Code generated by ent, DO NOT EDIT.
// --------------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2025 The DependencyTrack Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// --------------------------------------------------------------------
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// --------------------------------------------------------------------

package ent

import (
	"fmt"
	"strings"
	"time"

	"dependencytrack.io/hyades/ent/eventservicelog"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// EventServiceLog is the model entity for the EventServiceLog schema.
type EventServiceLog struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Subscriberclass holds the value of the "subscriberclass" field.
	Subscriberclass string `json:"subscriberclass,omitempty"`
	// Started holds the value of the "started" field.
	Started time.Time `json:"started,omitempty"`
	// Completed holds the value of the "completed" field.
	Completed    time.Time `json:"completed,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EventServiceLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case eventservicelog.FieldID:
			values[i] = new(sql.NullInt64)
		case eventservicelog.FieldSubscriberclass:
			values[i] = new(sql.NullString)
		case eventservicelog.FieldStarted, eventservicelog.FieldCompleted:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EventServiceLog fields.
func (esl *EventServiceLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case eventservicelog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			esl.ID = int(value.Int64)
		case eventservicelog.FieldSubscriberclass:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subscriberclass", values[i])
			} else if value.Valid {
				esl.Subscriberclass = value.String
			}
		case eventservicelog.FieldStarted:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field started", values[i])
			} else if value.Valid {
				esl.Started = value.Time
			}
		case eventservicelog.FieldCompleted:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field completed", values[i])
			} else if value.Valid {
				esl.Completed = value.Time
			}
		default:
			esl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EventServiceLog.
// This includes values selected through modifiers, order, etc.
func (esl *EventServiceLog) Value(name string) (ent.Value, error) {
	return esl.selectValues.Get(name)
}

// Update returns a builder for updating this EventServiceLog.
// Note that you need to call EventServiceLog.Unwrap() before calling this method if this EventServiceLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (esl *EventServiceLog) Update() *EventServiceLogUpdateOne {
	return NewEventServiceLogClient(esl.config).UpdateOne(esl)
}

// Unwrap unwraps the EventServiceLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (esl *EventServiceLog) Unwrap() *EventServiceLog {
	_tx, ok := esl.config.driver.(*txDriver)
	if !ok {
		panic("ent: EventServiceLog is not a transactional entity")
	}
	esl.config.driver = _tx.drv
	return esl
}

// String implements the fmt.Stringer.
func (esl *EventServiceLog) String() string {
	var builder strings.Builder
	builder.WriteString("EventServiceLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", esl.ID))
	builder.WriteString("subscriberclass=")
	builder.WriteString(esl.Subscriberclass)
	builder.WriteString(", ")
	builder.WriteString("started=")
	builder.WriteString(esl.Started.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("completed=")
	builder.WriteString(esl.Completed.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// EventServiceLogs is a parsable slice of EventServiceLog.
type EventServiceLogs []*EventServiceLog
