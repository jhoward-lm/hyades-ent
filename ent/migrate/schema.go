// Code generated by ent, DO NOT EDIT.
// --------------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2025 The DependencyTrack Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// --------------------------------------------------------------------
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// --------------------------------------------------------------------

package migrate

import (
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// APIKEYColumns holds the columns for the "APIKEY" table.
	APIKEYColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "apikey", Type: field.TypeString, Unique: true},
		{Name: "comment", Type: field.TypeString, Nullable: true},
		{Name: "created", Type: field.TypeTime, Nullable: true},
		{Name: "last_used", Type: field.TypeTime, Nullable: true},
		{Name: "is_legacy", Type: field.TypeBool},
		{Name: "public_id", Type: field.TypeString, Unique: true, Nullable: true},
	}
	// APIKEYTable holds the schema information for the "APIKEY" table.
	APIKEYTable = &schema.Table{
		Name:       "APIKEY",
		Columns:    APIKEYColumns,
		PrimaryKey: []*schema.Column{APIKEYColumns[0]},
	}
	// CONFIGPROPERTYColumns holds the columns for the "CONFIGPROPERTY" table.
	CONFIGPROPERTYColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "groupname", Type: field.TypeString},
		{Name: "propertyname", Type: field.TypeString},
		{Name: "propertytype", Type: field.TypeString},
		{Name: "propertyvalue", Type: field.TypeString, Nullable: true},
	}
	// CONFIGPROPERTYTable holds the schema information for the "CONFIGPROPERTY" table.
	CONFIGPROPERTYTable = &schema.Table{
		Name:       "CONFIGPROPERTY",
		Columns:    CONFIGPROPERTYColumns,
		PrimaryKey: []*schema.Column{CONFIGPROPERTYColumns[0]},
	}
	// EVENTSERVICELOGColumns holds the columns for the "EVENTSERVICELOG" table.
	EVENTSERVICELOGColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "subscriberclass", Type: field.TypeString},
		{Name: "started", Type: field.TypeTime, Nullable: true},
		{Name: "completed", Type: field.TypeTime, Nullable: true},
	}
	// EVENTSERVICELOGTable holds the schema information for the "EVENTSERVICELOG" table.
	EVENTSERVICELOGTable = &schema.Table{
		Name:       "EVENTSERVICELOG",
		Columns:    EVENTSERVICELOGColumns,
		PrimaryKey: []*schema.Column{EVENTSERVICELOGColumns[0]},
	}
	// INSTALLEDUPGRADESColumns holds the columns for the "INSTALLEDUPGRADES" table.
	INSTALLEDUPGRADESColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "endtime", Type: field.TypeTime, Nullable: true},
		{Name: "starttime", Type: field.TypeTime, Nullable: true},
		{Name: "upgradeclass", Type: field.TypeString, Nullable: true},
	}
	// INSTALLEDUPGRADESTable holds the schema information for the "INSTALLEDUPGRADES" table.
	INSTALLEDUPGRADESTable = &schema.Table{
		Name:       "INSTALLEDUPGRADES",
		Columns:    INSTALLEDUPGRADESColumns,
		PrimaryKey: []*schema.Column{INSTALLEDUPGRADESColumns[0]},
	}
	// LDAPUSERColumns holds the columns for the "LDAPUSER" table.
	LDAPUSERColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "dn", Type: field.TypeString},
		{Name: "email", Type: field.TypeString, Nullable: true},
		{Name: "username", Type: field.TypeString, Unique: true, Nullable: true},
	}
	// LDAPUSERTable holds the schema information for the "LDAPUSER" table.
	LDAPUSERTable = &schema.Table{
		Name:       "LDAPUSER",
		Columns:    LDAPUSERColumns,
		PrimaryKey: []*schema.Column{LDAPUSERColumns[0]},
	}
	// MANAGEDUSERColumns holds the columns for the "MANAGEDUSER" table.
	MANAGEDUSERColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "email", Type: field.TypeString, Nullable: true},
		{Name: "force_password_change", Type: field.TypeBool},
		{Name: "fullname", Type: field.TypeString, Nullable: true},
		{Name: "last_password_change", Type: field.TypeTime},
		{Name: "non_expiry_password", Type: field.TypeBool},
		{Name: "password", Type: field.TypeString},
		{Name: "suspended", Type: field.TypeBool},
		{Name: "username", Type: field.TypeString, Unique: true, Nullable: true},
	}
	// MANAGEDUSERTable holds the schema information for the "MANAGEDUSER" table.
	MANAGEDUSERTable = &schema.Table{
		Name:       "MANAGEDUSER",
		Columns:    MANAGEDUSERColumns,
		PrimaryKey: []*schema.Column{MANAGEDUSERColumns[0]},
	}
	// MAPPEDLDAPGROUPColumns holds the columns for the "MAPPEDLDAPGROUP" table.
	MAPPEDLDAPGROUPColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "uuid", Type: field.TypeUUID, Unique: true},
		{Name: "dn", Type: field.TypeString},
		{Name: "team_id", Type: field.TypeInt, Nullable: true},
	}
	// MAPPEDLDAPGROUPTable holds the schema information for the "MAPPEDLDAPGROUP" table.
	MAPPEDLDAPGROUPTable = &schema.Table{
		Name:       "MAPPEDLDAPGROUP",
		Columns:    MAPPEDLDAPGROUPColumns,
		PrimaryKey: []*schema.Column{MAPPEDLDAPGROUPColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "MAPPEDLDAPGROUP_TEAM_mapped_ldap_groups",
				Columns:    []*schema.Column{MAPPEDLDAPGROUPColumns[3]},
				RefColumns: []*schema.Column{TEAMColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// MAPPEDOIDCGROUPColumns holds the columns for the "MAPPEDOIDCGROUP" table.
	MAPPEDOIDCGROUPColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "uuid", Type: field.TypeUUID, Unique: true},
		{Name: "group_id", Type: field.TypeInt, Nullable: true},
		{Name: "team_id", Type: field.TypeInt, Nullable: true},
	}
	// MAPPEDOIDCGROUPTable holds the schema information for the "MAPPEDOIDCGROUP" table.
	MAPPEDOIDCGROUPTable = &schema.Table{
		Name:       "MAPPEDOIDCGROUP",
		Columns:    MAPPEDOIDCGROUPColumns,
		PrimaryKey: []*schema.Column{MAPPEDOIDCGROUPColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "MAPPEDOIDCGROUP_OIDCGROUP_mapped_oidc_groups",
				Columns:    []*schema.Column{MAPPEDOIDCGROUPColumns[2]},
				RefColumns: []*schema.Column{OIDCGROUPColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "MAPPEDOIDCGROUP_TEAM_mapped_oidc_groups",
				Columns:    []*schema.Column{MAPPEDOIDCGROUPColumns[3]},
				RefColumns: []*schema.Column{TEAMColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// OIDCGROUPColumns holds the columns for the "OIDCGROUP" table.
	OIDCGROUPColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "uuid", Type: field.TypeUUID, Unique: true},
		{Name: "name", Type: field.TypeString},
	}
	// OIDCGROUPTable holds the schema information for the "OIDCGROUP" table.
	OIDCGROUPTable = &schema.Table{
		Name:       "OIDCGROUP",
		Columns:    OIDCGROUPColumns,
		PrimaryKey: []*schema.Column{OIDCGROUPColumns[0]},
	}
	// OIDCUSERColumns holds the columns for the "OIDCUSER" table.
	OIDCUSERColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "email", Type: field.TypeString, Nullable: true},
		{Name: "subject_identifier", Type: field.TypeString, Nullable: true},
		{Name: "username", Type: field.TypeString, Unique: true},
	}
	// OIDCUSERTable holds the schema information for the "OIDCUSER" table.
	OIDCUSERTable = &schema.Table{
		Name:       "OIDCUSER",
		Columns:    OIDCUSERColumns,
		PrimaryKey: []*schema.Column{OIDCUSERColumns[0]},
	}
	// PERMISSIONColumns holds the columns for the "PERMISSION" table.
	PERMISSIONColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "name", Type: field.TypeString, Unique: true},
	}
	// PERMISSIONTable holds the schema information for the "PERMISSION" table.
	PERMISSIONTable = &schema.Table{
		Name:       "PERMISSION",
		Columns:    PERMISSIONColumns,
		PrimaryKey: []*schema.Column{PERMISSIONColumns[0]},
	}
	// SCHEMAVERSIONColumns holds the columns for the "SCHEMAVERSION" table.
	SCHEMAVERSIONColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "version", Type: field.TypeString, Nullable: true},
	}
	// SCHEMAVERSIONTable holds the schema information for the "SCHEMAVERSION" table.
	SCHEMAVERSIONTable = &schema.Table{
		Name:       "SCHEMAVERSION",
		Columns:    SCHEMAVERSIONColumns,
		PrimaryKey: []*schema.Column{SCHEMAVERSIONColumns[0]},
	}
	// TEAMColumns holds the columns for the "TEAM" table.
	TEAMColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "uuid", Type: field.TypeUUID, Unique: true},
		{Name: "name", Type: field.TypeString},
	}
	// TEAMTable holds the schema information for the "TEAM" table.
	TEAMTable = &schema.Table{
		Name:       "TEAM",
		Columns:    TEAMColumns,
		PrimaryKey: []*schema.Column{TEAMColumns[0]},
	}
	// LdapUserPermissionsColumns holds the columns for the "ldap_user_permissions" table.
	LdapUserPermissionsColumns = []*schema.Column{
		{Name: "ldap_user_id", Type: field.TypeInt},
		{Name: "permission_id", Type: field.TypeInt},
	}
	// LdapUserPermissionsTable holds the schema information for the "ldap_user_permissions" table.
	LdapUserPermissionsTable = &schema.Table{
		Name:       "ldap_user_permissions",
		Columns:    LdapUserPermissionsColumns,
		PrimaryKey: []*schema.Column{LdapUserPermissionsColumns[0], LdapUserPermissionsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "ldap_user_permissions_ldap_user_id",
				Columns:    []*schema.Column{LdapUserPermissionsColumns[0]},
				RefColumns: []*schema.Column{LDAPUSERColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "ldap_user_permissions_permission_id",
				Columns:    []*schema.Column{LdapUserPermissionsColumns[1]},
				RefColumns: []*schema.Column{PERMISSIONColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// LdapUserTeamsColumns holds the columns for the "ldap_user_teams" table.
	LdapUserTeamsColumns = []*schema.Column{
		{Name: "ldap_user_id", Type: field.TypeInt},
		{Name: "team_id", Type: field.TypeInt},
	}
	// LdapUserTeamsTable holds the schema information for the "ldap_user_teams" table.
	LdapUserTeamsTable = &schema.Table{
		Name:       "ldap_user_teams",
		Columns:    LdapUserTeamsColumns,
		PrimaryKey: []*schema.Column{LdapUserTeamsColumns[0], LdapUserTeamsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "ldap_user_teams_ldap_user_id",
				Columns:    []*schema.Column{LdapUserTeamsColumns[0]},
				RefColumns: []*schema.Column{LDAPUSERColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "ldap_user_teams_team_id",
				Columns:    []*schema.Column{LdapUserTeamsColumns[1]},
				RefColumns: []*schema.Column{TEAMColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ManagedUserPermissionsColumns holds the columns for the "managed_user_permissions" table.
	ManagedUserPermissionsColumns = []*schema.Column{
		{Name: "managed_user_id", Type: field.TypeInt},
		{Name: "permission_id", Type: field.TypeInt},
	}
	// ManagedUserPermissionsTable holds the schema information for the "managed_user_permissions" table.
	ManagedUserPermissionsTable = &schema.Table{
		Name:       "managed_user_permissions",
		Columns:    ManagedUserPermissionsColumns,
		PrimaryKey: []*schema.Column{ManagedUserPermissionsColumns[0], ManagedUserPermissionsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "managed_user_permissions_managed_user_id",
				Columns:    []*schema.Column{ManagedUserPermissionsColumns[0]},
				RefColumns: []*schema.Column{MANAGEDUSERColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "managed_user_permissions_permission_id",
				Columns:    []*schema.Column{ManagedUserPermissionsColumns[1]},
				RefColumns: []*schema.Column{PERMISSIONColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ManagedUserTeamsColumns holds the columns for the "managed_user_teams" table.
	ManagedUserTeamsColumns = []*schema.Column{
		{Name: "managed_user_id", Type: field.TypeInt},
		{Name: "team_id", Type: field.TypeInt},
	}
	// ManagedUserTeamsTable holds the schema information for the "managed_user_teams" table.
	ManagedUserTeamsTable = &schema.Table{
		Name:       "managed_user_teams",
		Columns:    ManagedUserTeamsColumns,
		PrimaryKey: []*schema.Column{ManagedUserTeamsColumns[0], ManagedUserTeamsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "managed_user_teams_managed_user_id",
				Columns:    []*schema.Column{ManagedUserTeamsColumns[0]},
				RefColumns: []*schema.Column{MANAGEDUSERColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "managed_user_teams_team_id",
				Columns:    []*schema.Column{ManagedUserTeamsColumns[1]},
				RefColumns: []*schema.Column{TEAMColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// OidcUserPermissionsColumns holds the columns for the "oidc_user_permissions" table.
	OidcUserPermissionsColumns = []*schema.Column{
		{Name: "oidc_user_id", Type: field.TypeInt},
		{Name: "permission_id", Type: field.TypeInt},
	}
	// OidcUserPermissionsTable holds the schema information for the "oidc_user_permissions" table.
	OidcUserPermissionsTable = &schema.Table{
		Name:       "oidc_user_permissions",
		Columns:    OidcUserPermissionsColumns,
		PrimaryKey: []*schema.Column{OidcUserPermissionsColumns[0], OidcUserPermissionsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "oidc_user_permissions_oidc_user_id",
				Columns:    []*schema.Column{OidcUserPermissionsColumns[0]},
				RefColumns: []*schema.Column{OIDCUSERColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "oidc_user_permissions_permission_id",
				Columns:    []*schema.Column{OidcUserPermissionsColumns[1]},
				RefColumns: []*schema.Column{PERMISSIONColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// OidcUserTeamsColumns holds the columns for the "oidc_user_teams" table.
	OidcUserTeamsColumns = []*schema.Column{
		{Name: "oidc_user_id", Type: field.TypeInt},
		{Name: "team_id", Type: field.TypeInt},
	}
	// OidcUserTeamsTable holds the schema information for the "oidc_user_teams" table.
	OidcUserTeamsTable = &schema.Table{
		Name:       "oidc_user_teams",
		Columns:    OidcUserTeamsColumns,
		PrimaryKey: []*schema.Column{OidcUserTeamsColumns[0], OidcUserTeamsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "oidc_user_teams_oidc_user_id",
				Columns:    []*schema.Column{OidcUserTeamsColumns[0]},
				RefColumns: []*schema.Column{OIDCUSERColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "oidc_user_teams_team_id",
				Columns:    []*schema.Column{OidcUserTeamsColumns[1]},
				RefColumns: []*schema.Column{TEAMColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// TeamAPIKeysColumns holds the columns for the "team_api_keys" table.
	TeamAPIKeysColumns = []*schema.Column{
		{Name: "team_id", Type: field.TypeInt},
		{Name: "api_key_id", Type: field.TypeInt},
	}
	// TeamAPIKeysTable holds the schema information for the "team_api_keys" table.
	TeamAPIKeysTable = &schema.Table{
		Name:       "team_api_keys",
		Columns:    TeamAPIKeysColumns,
		PrimaryKey: []*schema.Column{TeamAPIKeysColumns[0], TeamAPIKeysColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "team_api_keys_team_id",
				Columns:    []*schema.Column{TeamAPIKeysColumns[0]},
				RefColumns: []*schema.Column{TEAMColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "team_api_keys_api_key_id",
				Columns:    []*schema.Column{TeamAPIKeysColumns[1]},
				RefColumns: []*schema.Column{APIKEYColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// TeamPermissionsColumns holds the columns for the "team_permissions" table.
	TeamPermissionsColumns = []*schema.Column{
		{Name: "team_id", Type: field.TypeInt},
		{Name: "permission_id", Type: field.TypeInt},
	}
	// TeamPermissionsTable holds the schema information for the "team_permissions" table.
	TeamPermissionsTable = &schema.Table{
		Name:       "team_permissions",
		Columns:    TeamPermissionsColumns,
		PrimaryKey: []*schema.Column{TeamPermissionsColumns[0], TeamPermissionsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "team_permissions_team_id",
				Columns:    []*schema.Column{TeamPermissionsColumns[0]},
				RefColumns: []*schema.Column{TEAMColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "team_permissions_permission_id",
				Columns:    []*schema.Column{TeamPermissionsColumns[1]},
				RefColumns: []*schema.Column{PERMISSIONColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// TeamOidcGroupsColumns holds the columns for the "team_oidc_groups" table.
	TeamOidcGroupsColumns = []*schema.Column{
		{Name: "team_id", Type: field.TypeInt},
		{Name: "oidc_group_id", Type: field.TypeInt},
	}
	// TeamOidcGroupsTable holds the schema information for the "team_oidc_groups" table.
	TeamOidcGroupsTable = &schema.Table{
		Name:       "team_oidc_groups",
		Columns:    TeamOidcGroupsColumns,
		PrimaryKey: []*schema.Column{TeamOidcGroupsColumns[0], TeamOidcGroupsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "team_oidc_groups_team_id",
				Columns:    []*schema.Column{TeamOidcGroupsColumns[0]},
				RefColumns: []*schema.Column{TEAMColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "team_oidc_groups_oidc_group_id",
				Columns:    []*schema.Column{TeamOidcGroupsColumns[1]},
				RefColumns: []*schema.Column{OIDCGROUPColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		APIKEYTable,
		CONFIGPROPERTYTable,
		EVENTSERVICELOGTable,
		INSTALLEDUPGRADESTable,
		LDAPUSERTable,
		MANAGEDUSERTable,
		MAPPEDLDAPGROUPTable,
		MAPPEDOIDCGROUPTable,
		OIDCGROUPTable,
		OIDCUSERTable,
		PERMISSIONTable,
		SCHEMAVERSIONTable,
		TEAMTable,
		LdapUserPermissionsTable,
		LdapUserTeamsTable,
		ManagedUserPermissionsTable,
		ManagedUserTeamsTable,
		OidcUserPermissionsTable,
		OidcUserTeamsTable,
		TeamAPIKeysTable,
		TeamPermissionsTable,
		TeamOidcGroupsTable,
	}
)

func init() {
	APIKEYTable.Annotation = &entsql.Annotation{
		Table: "APIKEY",
	}
	CONFIGPROPERTYTable.Annotation = &entsql.Annotation{
		Table: "CONFIGPROPERTY",
	}
	EVENTSERVICELOGTable.Annotation = &entsql.Annotation{
		Table: "EVENTSERVICELOG",
	}
	INSTALLEDUPGRADESTable.Annotation = &entsql.Annotation{
		Table: "INSTALLEDUPGRADES",
	}
	LDAPUSERTable.Annotation = &entsql.Annotation{
		Table: "LDAPUSER",
	}
	MANAGEDUSERTable.Annotation = &entsql.Annotation{
		Table: "MANAGEDUSER",
	}
	MAPPEDLDAPGROUPTable.ForeignKeys[0].RefTable = TEAMTable
	MAPPEDLDAPGROUPTable.Annotation = &entsql.Annotation{
		Table: "MAPPEDLDAPGROUP",
	}
	MAPPEDOIDCGROUPTable.ForeignKeys[0].RefTable = OIDCGROUPTable
	MAPPEDOIDCGROUPTable.ForeignKeys[1].RefTable = TEAMTable
	MAPPEDOIDCGROUPTable.Annotation = &entsql.Annotation{
		Table: "MAPPEDOIDCGROUP",
	}
	OIDCGROUPTable.Annotation = &entsql.Annotation{
		Table: "OIDCGROUP",
	}
	OIDCUSERTable.Annotation = &entsql.Annotation{
		Table: "OIDCUSER",
	}
	PERMISSIONTable.Annotation = &entsql.Annotation{
		Table: "PERMISSION",
	}
	SCHEMAVERSIONTable.Annotation = &entsql.Annotation{
		Table: "SCHEMAVERSION",
	}
	TEAMTable.Annotation = &entsql.Annotation{
		Table: "TEAM",
	}
	LdapUserPermissionsTable.ForeignKeys[0].RefTable = LDAPUSERTable
	LdapUserPermissionsTable.ForeignKeys[1].RefTable = PERMISSIONTable
	LdapUserPermissionsTable.Annotation = &entsql.Annotation{}
	LdapUserTeamsTable.ForeignKeys[0].RefTable = LDAPUSERTable
	LdapUserTeamsTable.ForeignKeys[1].RefTable = TEAMTable
	LdapUserTeamsTable.Annotation = &entsql.Annotation{}
	ManagedUserPermissionsTable.ForeignKeys[0].RefTable = MANAGEDUSERTable
	ManagedUserPermissionsTable.ForeignKeys[1].RefTable = PERMISSIONTable
	ManagedUserPermissionsTable.Annotation = &entsql.Annotation{}
	ManagedUserTeamsTable.ForeignKeys[0].RefTable = MANAGEDUSERTable
	ManagedUserTeamsTable.ForeignKeys[1].RefTable = TEAMTable
	ManagedUserTeamsTable.Annotation = &entsql.Annotation{}
	OidcUserPermissionsTable.ForeignKeys[0].RefTable = OIDCUSERTable
	OidcUserPermissionsTable.ForeignKeys[1].RefTable = PERMISSIONTable
	OidcUserPermissionsTable.Annotation = &entsql.Annotation{}
	OidcUserTeamsTable.ForeignKeys[0].RefTable = OIDCUSERTable
	OidcUserTeamsTable.ForeignKeys[1].RefTable = TEAMTable
	OidcUserTeamsTable.Annotation = &entsql.Annotation{}
	TeamAPIKeysTable.ForeignKeys[0].RefTable = TEAMTable
	TeamAPIKeysTable.ForeignKeys[1].RefTable = APIKEYTable
	TeamAPIKeysTable.Annotation = &entsql.Annotation{}
	TeamPermissionsTable.ForeignKeys[0].RefTable = TEAMTable
	TeamPermissionsTable.ForeignKeys[1].RefTable = PERMISSIONTable
	TeamPermissionsTable.Annotation = &entsql.Annotation{}
	TeamOidcGroupsTable.ForeignKeys[0].RefTable = TEAMTable
	TeamOidcGroupsTable.ForeignKeys[1].RefTable = OIDCGROUPTable
	TeamOidcGroupsTable.Annotation = &entsql.Annotation{}
}
