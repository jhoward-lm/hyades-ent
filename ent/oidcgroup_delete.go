// Code generated by ent, DO NOT EDIT.
// --------------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2025 The DependencyTrack Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// --------------------------------------------------------------------
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// --------------------------------------------------------------------

package ent

import (
	"context"

	"dependencytrack.io/hyades/ent/oidcgroup"
	"dependencytrack.io/hyades/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OIDCGroupDelete is the builder for deleting a OIDCGroup entity.
type OIDCGroupDelete struct {
	config
	hooks    []Hook
	mutation *OIDCGroupMutation
}

// Where appends a list predicates to the OIDCGroupDelete builder.
func (ogd *OIDCGroupDelete) Where(ps ...predicate.OIDCGroup) *OIDCGroupDelete {
	ogd.mutation.Where(ps...)
	return ogd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ogd *OIDCGroupDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ogd.sqlExec, ogd.mutation, ogd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ogd *OIDCGroupDelete) ExecX(ctx context.Context) int {
	n, err := ogd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ogd *OIDCGroupDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(oidcgroup.Table, sqlgraph.NewFieldSpec(oidcgroup.FieldID, field.TypeInt))
	if ps := ogd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ogd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ogd.mutation.done = true
	return affected, err
}

// OIDCGroupDeleteOne is the builder for deleting a single OIDCGroup entity.
type OIDCGroupDeleteOne struct {
	ogd *OIDCGroupDelete
}

// Where appends a list predicates to the OIDCGroupDelete builder.
func (ogdo *OIDCGroupDeleteOne) Where(ps ...predicate.OIDCGroup) *OIDCGroupDeleteOne {
	ogdo.ogd.mutation.Where(ps...)
	return ogdo
}

// Exec executes the deletion query.
func (ogdo *OIDCGroupDeleteOne) Exec(ctx context.Context) error {
	n, err := ogdo.ogd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{oidcgroup.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ogdo *OIDCGroupDeleteOne) ExecX(ctx context.Context) {
	if err := ogdo.Exec(ctx); err != nil {
		panic(err)
	}
}
