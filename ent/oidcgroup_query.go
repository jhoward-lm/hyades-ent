// Code generated by ent, DO NOT EDIT.
// --------------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2025 The DependencyTrack Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// --------------------------------------------------------------------
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// --------------------------------------------------------------------

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"dependencytrack.io/hyades/ent/mappedoidcgroup"
	"dependencytrack.io/hyades/ent/oidcgroup"
	"dependencytrack.io/hyades/ent/predicate"
	"dependencytrack.io/hyades/ent/team"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OIDCGroupQuery is the builder for querying OIDCGroup entities.
type OIDCGroupQuery struct {
	config
	ctx                  *QueryContext
	order                []oidcgroup.OrderOption
	inters               []Interceptor
	predicates           []predicate.OIDCGroup
	withMappedOidcGroups *MappedOIDCGroupQuery
	withTeam             *TeamQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the OIDCGroupQuery builder.
func (ogq *OIDCGroupQuery) Where(ps ...predicate.OIDCGroup) *OIDCGroupQuery {
	ogq.predicates = append(ogq.predicates, ps...)
	return ogq
}

// Limit the number of records to be returned by this query.
func (ogq *OIDCGroupQuery) Limit(limit int) *OIDCGroupQuery {
	ogq.ctx.Limit = &limit
	return ogq
}

// Offset to start from.
func (ogq *OIDCGroupQuery) Offset(offset int) *OIDCGroupQuery {
	ogq.ctx.Offset = &offset
	return ogq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ogq *OIDCGroupQuery) Unique(unique bool) *OIDCGroupQuery {
	ogq.ctx.Unique = &unique
	return ogq
}

// Order specifies how the records should be ordered.
func (ogq *OIDCGroupQuery) Order(o ...oidcgroup.OrderOption) *OIDCGroupQuery {
	ogq.order = append(ogq.order, o...)
	return ogq
}

// QueryMappedOidcGroups chains the current query on the "mapped_oidc_groups" edge.
func (ogq *OIDCGroupQuery) QueryMappedOidcGroups() *MappedOIDCGroupQuery {
	query := (&MappedOIDCGroupClient{config: ogq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ogq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ogq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(oidcgroup.Table, oidcgroup.FieldID, selector),
			sqlgraph.To(mappedoidcgroup.Table, mappedoidcgroup.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, oidcgroup.MappedOidcGroupsTable, oidcgroup.MappedOidcGroupsColumn),
		)
		fromU = sqlgraph.SetNeighbors(ogq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTeam chains the current query on the "team" edge.
func (ogq *OIDCGroupQuery) QueryTeam() *TeamQuery {
	query := (&TeamClient{config: ogq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ogq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ogq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(oidcgroup.Table, oidcgroup.FieldID, selector),
			sqlgraph.To(team.Table, team.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, oidcgroup.TeamTable, oidcgroup.TeamPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(ogq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first OIDCGroup entity from the query.
// Returns a *NotFoundError when no OIDCGroup was found.
func (ogq *OIDCGroupQuery) First(ctx context.Context) (*OIDCGroup, error) {
	nodes, err := ogq.Limit(1).All(setContextOp(ctx, ogq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{oidcgroup.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ogq *OIDCGroupQuery) FirstX(ctx context.Context) *OIDCGroup {
	node, err := ogq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first OIDCGroup ID from the query.
// Returns a *NotFoundError when no OIDCGroup ID was found.
func (ogq *OIDCGroupQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ogq.Limit(1).IDs(setContextOp(ctx, ogq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{oidcgroup.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ogq *OIDCGroupQuery) FirstIDX(ctx context.Context) int {
	id, err := ogq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single OIDCGroup entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one OIDCGroup entity is found.
// Returns a *NotFoundError when no OIDCGroup entities are found.
func (ogq *OIDCGroupQuery) Only(ctx context.Context) (*OIDCGroup, error) {
	nodes, err := ogq.Limit(2).All(setContextOp(ctx, ogq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{oidcgroup.Label}
	default:
		return nil, &NotSingularError{oidcgroup.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ogq *OIDCGroupQuery) OnlyX(ctx context.Context) *OIDCGroup {
	node, err := ogq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only OIDCGroup ID in the query.
// Returns a *NotSingularError when more than one OIDCGroup ID is found.
// Returns a *NotFoundError when no entities are found.
func (ogq *OIDCGroupQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ogq.Limit(2).IDs(setContextOp(ctx, ogq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{oidcgroup.Label}
	default:
		err = &NotSingularError{oidcgroup.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ogq *OIDCGroupQuery) OnlyIDX(ctx context.Context) int {
	id, err := ogq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of OIDCGroups.
func (ogq *OIDCGroupQuery) All(ctx context.Context) ([]*OIDCGroup, error) {
	ctx = setContextOp(ctx, ogq.ctx, ent.OpQueryAll)
	if err := ogq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*OIDCGroup, *OIDCGroupQuery]()
	return withInterceptors[[]*OIDCGroup](ctx, ogq, qr, ogq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ogq *OIDCGroupQuery) AllX(ctx context.Context) []*OIDCGroup {
	nodes, err := ogq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of OIDCGroup IDs.
func (ogq *OIDCGroupQuery) IDs(ctx context.Context) (ids []int, err error) {
	if ogq.ctx.Unique == nil && ogq.path != nil {
		ogq.Unique(true)
	}
	ctx = setContextOp(ctx, ogq.ctx, ent.OpQueryIDs)
	if err = ogq.Select(oidcgroup.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ogq *OIDCGroupQuery) IDsX(ctx context.Context) []int {
	ids, err := ogq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ogq *OIDCGroupQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ogq.ctx, ent.OpQueryCount)
	if err := ogq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ogq, querierCount[*OIDCGroupQuery](), ogq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ogq *OIDCGroupQuery) CountX(ctx context.Context) int {
	count, err := ogq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ogq *OIDCGroupQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ogq.ctx, ent.OpQueryExist)
	switch _, err := ogq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ogq *OIDCGroupQuery) ExistX(ctx context.Context) bool {
	exist, err := ogq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the OIDCGroupQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ogq *OIDCGroupQuery) Clone() *OIDCGroupQuery {
	if ogq == nil {
		return nil
	}
	return &OIDCGroupQuery{
		config:               ogq.config,
		ctx:                  ogq.ctx.Clone(),
		order:                append([]oidcgroup.OrderOption{}, ogq.order...),
		inters:               append([]Interceptor{}, ogq.inters...),
		predicates:           append([]predicate.OIDCGroup{}, ogq.predicates...),
		withMappedOidcGroups: ogq.withMappedOidcGroups.Clone(),
		withTeam:             ogq.withTeam.Clone(),
		// clone intermediate query.
		sql:  ogq.sql.Clone(),
		path: ogq.path,
	}
}

// WithMappedOidcGroups tells the query-builder to eager-load the nodes that are connected to
// the "mapped_oidc_groups" edge. The optional arguments are used to configure the query builder of the edge.
func (ogq *OIDCGroupQuery) WithMappedOidcGroups(opts ...func(*MappedOIDCGroupQuery)) *OIDCGroupQuery {
	query := (&MappedOIDCGroupClient{config: ogq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ogq.withMappedOidcGroups = query
	return ogq
}

// WithTeam tells the query-builder to eager-load the nodes that are connected to
// the "team" edge. The optional arguments are used to configure the query builder of the edge.
func (ogq *OIDCGroupQuery) WithTeam(opts ...func(*TeamQuery)) *OIDCGroupQuery {
	query := (&TeamClient{config: ogq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ogq.withTeam = query
	return ogq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UUID uuid.UUID `json:"uuid,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.OIDCGroup.Query().
//		GroupBy(oidcgroup.FieldUUID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ogq *OIDCGroupQuery) GroupBy(field string, fields ...string) *OIDCGroupGroupBy {
	ogq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &OIDCGroupGroupBy{build: ogq}
	grbuild.flds = &ogq.ctx.Fields
	grbuild.label = oidcgroup.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		UUID uuid.UUID `json:"uuid,omitempty"`
//	}
//
//	client.OIDCGroup.Query().
//		Select(oidcgroup.FieldUUID).
//		Scan(ctx, &v)
func (ogq *OIDCGroupQuery) Select(fields ...string) *OIDCGroupSelect {
	ogq.ctx.Fields = append(ogq.ctx.Fields, fields...)
	sbuild := &OIDCGroupSelect{OIDCGroupQuery: ogq}
	sbuild.label = oidcgroup.Label
	sbuild.flds, sbuild.scan = &ogq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a OIDCGroupSelect configured with the given aggregations.
func (ogq *OIDCGroupQuery) Aggregate(fns ...AggregateFunc) *OIDCGroupSelect {
	return ogq.Select().Aggregate(fns...)
}

func (ogq *OIDCGroupQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ogq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ogq); err != nil {
				return err
			}
		}
	}
	for _, f := range ogq.ctx.Fields {
		if !oidcgroup.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ogq.path != nil {
		prev, err := ogq.path(ctx)
		if err != nil {
			return err
		}
		ogq.sql = prev
	}
	return nil
}

func (ogq *OIDCGroupQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*OIDCGroup, error) {
	var (
		nodes       = []*OIDCGroup{}
		_spec       = ogq.querySpec()
		loadedTypes = [2]bool{
			ogq.withMappedOidcGroups != nil,
			ogq.withTeam != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*OIDCGroup).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &OIDCGroup{config: ogq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ogq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ogq.withMappedOidcGroups; query != nil {
		if err := ogq.loadMappedOidcGroups(ctx, query, nodes,
			func(n *OIDCGroup) { n.Edges.MappedOidcGroups = []*MappedOIDCGroup{} },
			func(n *OIDCGroup, e *MappedOIDCGroup) { n.Edges.MappedOidcGroups = append(n.Edges.MappedOidcGroups, e) }); err != nil {
			return nil, err
		}
	}
	if query := ogq.withTeam; query != nil {
		if err := ogq.loadTeam(ctx, query, nodes,
			func(n *OIDCGroup) { n.Edges.Team = []*Team{} },
			func(n *OIDCGroup, e *Team) { n.Edges.Team = append(n.Edges.Team, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ogq *OIDCGroupQuery) loadMappedOidcGroups(ctx context.Context, query *MappedOIDCGroupQuery, nodes []*OIDCGroup, init func(*OIDCGroup), assign func(*OIDCGroup, *MappedOIDCGroup)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*OIDCGroup)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(mappedoidcgroup.FieldGroupID)
	}
	query.Where(predicate.MappedOIDCGroup(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(oidcgroup.MappedOidcGroupsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.GroupID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "group_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (ogq *OIDCGroupQuery) loadTeam(ctx context.Context, query *TeamQuery, nodes []*OIDCGroup, init func(*OIDCGroup), assign func(*OIDCGroup, *Team)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*OIDCGroup)
	nids := make(map[int]map[*OIDCGroup]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(oidcgroup.TeamTable)
		s.Join(joinT).On(s.C(team.FieldID), joinT.C(oidcgroup.TeamPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(oidcgroup.TeamPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(oidcgroup.TeamPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*OIDCGroup]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Team](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "team" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (ogq *OIDCGroupQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ogq.querySpec()
	_spec.Node.Columns = ogq.ctx.Fields
	if len(ogq.ctx.Fields) > 0 {
		_spec.Unique = ogq.ctx.Unique != nil && *ogq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ogq.driver, _spec)
}

func (ogq *OIDCGroupQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(oidcgroup.Table, oidcgroup.Columns, sqlgraph.NewFieldSpec(oidcgroup.FieldID, field.TypeInt))
	_spec.From = ogq.sql
	if unique := ogq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ogq.path != nil {
		_spec.Unique = true
	}
	if fields := ogq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oidcgroup.FieldID)
		for i := range fields {
			if fields[i] != oidcgroup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ogq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ogq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ogq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ogq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ogq *OIDCGroupQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ogq.driver.Dialect())
	t1 := builder.Table(oidcgroup.Table)
	columns := ogq.ctx.Fields
	if len(columns) == 0 {
		columns = oidcgroup.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ogq.sql != nil {
		selector = ogq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ogq.ctx.Unique != nil && *ogq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ogq.predicates {
		p(selector)
	}
	for _, p := range ogq.order {
		p(selector)
	}
	if offset := ogq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ogq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// OIDCGroupGroupBy is the group-by builder for OIDCGroup entities.
type OIDCGroupGroupBy struct {
	selector
	build *OIDCGroupQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (oggb *OIDCGroupGroupBy) Aggregate(fns ...AggregateFunc) *OIDCGroupGroupBy {
	oggb.fns = append(oggb.fns, fns...)
	return oggb
}

// Scan applies the selector query and scans the result into the given value.
func (oggb *OIDCGroupGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, oggb.build.ctx, ent.OpQueryGroupBy)
	if err := oggb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OIDCGroupQuery, *OIDCGroupGroupBy](ctx, oggb.build, oggb, oggb.build.inters, v)
}

func (oggb *OIDCGroupGroupBy) sqlScan(ctx context.Context, root *OIDCGroupQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(oggb.fns))
	for _, fn := range oggb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*oggb.flds)+len(oggb.fns))
		for _, f := range *oggb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*oggb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := oggb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// OIDCGroupSelect is the builder for selecting fields of OIDCGroup entities.
type OIDCGroupSelect struct {
	*OIDCGroupQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ogs *OIDCGroupSelect) Aggregate(fns ...AggregateFunc) *OIDCGroupSelect {
	ogs.fns = append(ogs.fns, fns...)
	return ogs
}

// Scan applies the selector query and scans the result into the given value.
func (ogs *OIDCGroupSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ogs.ctx, ent.OpQuerySelect)
	if err := ogs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OIDCGroupQuery, *OIDCGroupSelect](ctx, ogs.OIDCGroupQuery, ogs, ogs.inters, v)
}

func (ogs *OIDCGroupSelect) sqlScan(ctx context.Context, root *OIDCGroupQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ogs.fns))
	for _, fn := range ogs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ogs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ogs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
