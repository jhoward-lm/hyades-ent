// Code generated by ent, DO NOT EDIT.
// --------------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2025 The DependencyTrack Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// --------------------------------------------------------------------
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// --------------------------------------------------------------------

package installedupgrades

import (
	"time"

	"dependencytrack.io/hyades/ent/predicate"
	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.INSTALLEDUPGRADES {
	return predicate.INSTALLEDUPGRADES(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.INSTALLEDUPGRADES {
	return predicate.INSTALLEDUPGRADES(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.INSTALLEDUPGRADES {
	return predicate.INSTALLEDUPGRADES(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.INSTALLEDUPGRADES {
	return predicate.INSTALLEDUPGRADES(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.INSTALLEDUPGRADES {
	return predicate.INSTALLEDUPGRADES(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.INSTALLEDUPGRADES {
	return predicate.INSTALLEDUPGRADES(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.INSTALLEDUPGRADES {
	return predicate.INSTALLEDUPGRADES(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.INSTALLEDUPGRADES {
	return predicate.INSTALLEDUPGRADES(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.INSTALLEDUPGRADES {
	return predicate.INSTALLEDUPGRADES(sql.FieldLTE(FieldID, id))
}

// Endtime applies equality check predicate on the "endtime" field. It's identical to EndtimeEQ.
func Endtime(v time.Time) predicate.INSTALLEDUPGRADES {
	return predicate.INSTALLEDUPGRADES(sql.FieldEQ(FieldEndtime, v))
}

// Starttime applies equality check predicate on the "starttime" field. It's identical to StarttimeEQ.
func Starttime(v time.Time) predicate.INSTALLEDUPGRADES {
	return predicate.INSTALLEDUPGRADES(sql.FieldEQ(FieldStarttime, v))
}

// Upgradeclass applies equality check predicate on the "upgradeclass" field. It's identical to UpgradeclassEQ.
func Upgradeclass(v string) predicate.INSTALLEDUPGRADES {
	return predicate.INSTALLEDUPGRADES(sql.FieldEQ(FieldUpgradeclass, v))
}

// EndtimeEQ applies the EQ predicate on the "endtime" field.
func EndtimeEQ(v time.Time) predicate.INSTALLEDUPGRADES {
	return predicate.INSTALLEDUPGRADES(sql.FieldEQ(FieldEndtime, v))
}

// EndtimeNEQ applies the NEQ predicate on the "endtime" field.
func EndtimeNEQ(v time.Time) predicate.INSTALLEDUPGRADES {
	return predicate.INSTALLEDUPGRADES(sql.FieldNEQ(FieldEndtime, v))
}

// EndtimeIn applies the In predicate on the "endtime" field.
func EndtimeIn(vs ...time.Time) predicate.INSTALLEDUPGRADES {
	return predicate.INSTALLEDUPGRADES(sql.FieldIn(FieldEndtime, vs...))
}

// EndtimeNotIn applies the NotIn predicate on the "endtime" field.
func EndtimeNotIn(vs ...time.Time) predicate.INSTALLEDUPGRADES {
	return predicate.INSTALLEDUPGRADES(sql.FieldNotIn(FieldEndtime, vs...))
}

// EndtimeGT applies the GT predicate on the "endtime" field.
func EndtimeGT(v time.Time) predicate.INSTALLEDUPGRADES {
	return predicate.INSTALLEDUPGRADES(sql.FieldGT(FieldEndtime, v))
}

// EndtimeGTE applies the GTE predicate on the "endtime" field.
func EndtimeGTE(v time.Time) predicate.INSTALLEDUPGRADES {
	return predicate.INSTALLEDUPGRADES(sql.FieldGTE(FieldEndtime, v))
}

// EndtimeLT applies the LT predicate on the "endtime" field.
func EndtimeLT(v time.Time) predicate.INSTALLEDUPGRADES {
	return predicate.INSTALLEDUPGRADES(sql.FieldLT(FieldEndtime, v))
}

// EndtimeLTE applies the LTE predicate on the "endtime" field.
func EndtimeLTE(v time.Time) predicate.INSTALLEDUPGRADES {
	return predicate.INSTALLEDUPGRADES(sql.FieldLTE(FieldEndtime, v))
}

// EndtimeIsNil applies the IsNil predicate on the "endtime" field.
func EndtimeIsNil() predicate.INSTALLEDUPGRADES {
	return predicate.INSTALLEDUPGRADES(sql.FieldIsNull(FieldEndtime))
}

// EndtimeNotNil applies the NotNil predicate on the "endtime" field.
func EndtimeNotNil() predicate.INSTALLEDUPGRADES {
	return predicate.INSTALLEDUPGRADES(sql.FieldNotNull(FieldEndtime))
}

// StarttimeEQ applies the EQ predicate on the "starttime" field.
func StarttimeEQ(v time.Time) predicate.INSTALLEDUPGRADES {
	return predicate.INSTALLEDUPGRADES(sql.FieldEQ(FieldStarttime, v))
}

// StarttimeNEQ applies the NEQ predicate on the "starttime" field.
func StarttimeNEQ(v time.Time) predicate.INSTALLEDUPGRADES {
	return predicate.INSTALLEDUPGRADES(sql.FieldNEQ(FieldStarttime, v))
}

// StarttimeIn applies the In predicate on the "starttime" field.
func StarttimeIn(vs ...time.Time) predicate.INSTALLEDUPGRADES {
	return predicate.INSTALLEDUPGRADES(sql.FieldIn(FieldStarttime, vs...))
}

// StarttimeNotIn applies the NotIn predicate on the "starttime" field.
func StarttimeNotIn(vs ...time.Time) predicate.INSTALLEDUPGRADES {
	return predicate.INSTALLEDUPGRADES(sql.FieldNotIn(FieldStarttime, vs...))
}

// StarttimeGT applies the GT predicate on the "starttime" field.
func StarttimeGT(v time.Time) predicate.INSTALLEDUPGRADES {
	return predicate.INSTALLEDUPGRADES(sql.FieldGT(FieldStarttime, v))
}

// StarttimeGTE applies the GTE predicate on the "starttime" field.
func StarttimeGTE(v time.Time) predicate.INSTALLEDUPGRADES {
	return predicate.INSTALLEDUPGRADES(sql.FieldGTE(FieldStarttime, v))
}

// StarttimeLT applies the LT predicate on the "starttime" field.
func StarttimeLT(v time.Time) predicate.INSTALLEDUPGRADES {
	return predicate.INSTALLEDUPGRADES(sql.FieldLT(FieldStarttime, v))
}

// StarttimeLTE applies the LTE predicate on the "starttime" field.
func StarttimeLTE(v time.Time) predicate.INSTALLEDUPGRADES {
	return predicate.INSTALLEDUPGRADES(sql.FieldLTE(FieldStarttime, v))
}

// StarttimeIsNil applies the IsNil predicate on the "starttime" field.
func StarttimeIsNil() predicate.INSTALLEDUPGRADES {
	return predicate.INSTALLEDUPGRADES(sql.FieldIsNull(FieldStarttime))
}

// StarttimeNotNil applies the NotNil predicate on the "starttime" field.
func StarttimeNotNil() predicate.INSTALLEDUPGRADES {
	return predicate.INSTALLEDUPGRADES(sql.FieldNotNull(FieldStarttime))
}

// UpgradeclassEQ applies the EQ predicate on the "upgradeclass" field.
func UpgradeclassEQ(v string) predicate.INSTALLEDUPGRADES {
	return predicate.INSTALLEDUPGRADES(sql.FieldEQ(FieldUpgradeclass, v))
}

// UpgradeclassNEQ applies the NEQ predicate on the "upgradeclass" field.
func UpgradeclassNEQ(v string) predicate.INSTALLEDUPGRADES {
	return predicate.INSTALLEDUPGRADES(sql.FieldNEQ(FieldUpgradeclass, v))
}

// UpgradeclassIn applies the In predicate on the "upgradeclass" field.
func UpgradeclassIn(vs ...string) predicate.INSTALLEDUPGRADES {
	return predicate.INSTALLEDUPGRADES(sql.FieldIn(FieldUpgradeclass, vs...))
}

// UpgradeclassNotIn applies the NotIn predicate on the "upgradeclass" field.
func UpgradeclassNotIn(vs ...string) predicate.INSTALLEDUPGRADES {
	return predicate.INSTALLEDUPGRADES(sql.FieldNotIn(FieldUpgradeclass, vs...))
}

// UpgradeclassGT applies the GT predicate on the "upgradeclass" field.
func UpgradeclassGT(v string) predicate.INSTALLEDUPGRADES {
	return predicate.INSTALLEDUPGRADES(sql.FieldGT(FieldUpgradeclass, v))
}

// UpgradeclassGTE applies the GTE predicate on the "upgradeclass" field.
func UpgradeclassGTE(v string) predicate.INSTALLEDUPGRADES {
	return predicate.INSTALLEDUPGRADES(sql.FieldGTE(FieldUpgradeclass, v))
}

// UpgradeclassLT applies the LT predicate on the "upgradeclass" field.
func UpgradeclassLT(v string) predicate.INSTALLEDUPGRADES {
	return predicate.INSTALLEDUPGRADES(sql.FieldLT(FieldUpgradeclass, v))
}

// UpgradeclassLTE applies the LTE predicate on the "upgradeclass" field.
func UpgradeclassLTE(v string) predicate.INSTALLEDUPGRADES {
	return predicate.INSTALLEDUPGRADES(sql.FieldLTE(FieldUpgradeclass, v))
}

// UpgradeclassContains applies the Contains predicate on the "upgradeclass" field.
func UpgradeclassContains(v string) predicate.INSTALLEDUPGRADES {
	return predicate.INSTALLEDUPGRADES(sql.FieldContains(FieldUpgradeclass, v))
}

// UpgradeclassHasPrefix applies the HasPrefix predicate on the "upgradeclass" field.
func UpgradeclassHasPrefix(v string) predicate.INSTALLEDUPGRADES {
	return predicate.INSTALLEDUPGRADES(sql.FieldHasPrefix(FieldUpgradeclass, v))
}

// UpgradeclassHasSuffix applies the HasSuffix predicate on the "upgradeclass" field.
func UpgradeclassHasSuffix(v string) predicate.INSTALLEDUPGRADES {
	return predicate.INSTALLEDUPGRADES(sql.FieldHasSuffix(FieldUpgradeclass, v))
}

// UpgradeclassIsNil applies the IsNil predicate on the "upgradeclass" field.
func UpgradeclassIsNil() predicate.INSTALLEDUPGRADES {
	return predicate.INSTALLEDUPGRADES(sql.FieldIsNull(FieldUpgradeclass))
}

// UpgradeclassNotNil applies the NotNil predicate on the "upgradeclass" field.
func UpgradeclassNotNil() predicate.INSTALLEDUPGRADES {
	return predicate.INSTALLEDUPGRADES(sql.FieldNotNull(FieldUpgradeclass))
}

// UpgradeclassEqualFold applies the EqualFold predicate on the "upgradeclass" field.
func UpgradeclassEqualFold(v string) predicate.INSTALLEDUPGRADES {
	return predicate.INSTALLEDUPGRADES(sql.FieldEqualFold(FieldUpgradeclass, v))
}

// UpgradeclassContainsFold applies the ContainsFold predicate on the "upgradeclass" field.
func UpgradeclassContainsFold(v string) predicate.INSTALLEDUPGRADES {
	return predicate.INSTALLEDUPGRADES(sql.FieldContainsFold(FieldUpgradeclass, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.INSTALLEDUPGRADES) predicate.INSTALLEDUPGRADES {
	return predicate.INSTALLEDUPGRADES(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.INSTALLEDUPGRADES) predicate.INSTALLEDUPGRADES {
	return predicate.INSTALLEDUPGRADES(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.INSTALLEDUPGRADES) predicate.INSTALLEDUPGRADES {
	return predicate.INSTALLEDUPGRADES(sql.NotPredicates(p))
}
