// Code generated by ent, DO NOT EDIT.
// --------------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2025 The DependencyTrack Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// --------------------------------------------------------------------
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// --------------------------------------------------------------------

package ent

import (
	"context"
	"errors"
	"fmt"

	"dependencytrack.io/hyades/ent/oidcuser"
	"dependencytrack.io/hyades/ent/permission"
	"dependencytrack.io/hyades/ent/team"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OIDCUserCreate is the builder for creating a OIDCUser entity.
type OIDCUserCreate struct {
	config
	mutation *OIDCUserMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEmail sets the "email" field.
func (ouc *OIDCUserCreate) SetEmail(s string) *OIDCUserCreate {
	ouc.mutation.SetEmail(s)
	return ouc
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (ouc *OIDCUserCreate) SetNillableEmail(s *string) *OIDCUserCreate {
	if s != nil {
		ouc.SetEmail(*s)
	}
	return ouc
}

// SetSubjectIdentifier sets the "subject_identifier" field.
func (ouc *OIDCUserCreate) SetSubjectIdentifier(s string) *OIDCUserCreate {
	ouc.mutation.SetSubjectIdentifier(s)
	return ouc
}

// SetNillableSubjectIdentifier sets the "subject_identifier" field if the given value is not nil.
func (ouc *OIDCUserCreate) SetNillableSubjectIdentifier(s *string) *OIDCUserCreate {
	if s != nil {
		ouc.SetSubjectIdentifier(*s)
	}
	return ouc
}

// SetUsername sets the "username" field.
func (ouc *OIDCUserCreate) SetUsername(s string) *OIDCUserCreate {
	ouc.mutation.SetUsername(s)
	return ouc
}

// AddPermissionIDs adds the "permissions" edge to the Permission entity by IDs.
func (ouc *OIDCUserCreate) AddPermissionIDs(ids ...int) *OIDCUserCreate {
	ouc.mutation.AddPermissionIDs(ids...)
	return ouc
}

// AddPermissions adds the "permissions" edges to the Permission entity.
func (ouc *OIDCUserCreate) AddPermissions(p ...*Permission) *OIDCUserCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ouc.AddPermissionIDs(ids...)
}

// AddTeamIDs adds the "teams" edge to the Team entity by IDs.
func (ouc *OIDCUserCreate) AddTeamIDs(ids ...int) *OIDCUserCreate {
	ouc.mutation.AddTeamIDs(ids...)
	return ouc
}

// AddTeams adds the "teams" edges to the Team entity.
func (ouc *OIDCUserCreate) AddTeams(t ...*Team) *OIDCUserCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ouc.AddTeamIDs(ids...)
}

// Mutation returns the OIDCUserMutation object of the builder.
func (ouc *OIDCUserCreate) Mutation() *OIDCUserMutation {
	return ouc.mutation
}

// Save creates the OIDCUser in the database.
func (ouc *OIDCUserCreate) Save(ctx context.Context) (*OIDCUser, error) {
	return withHooks(ctx, ouc.sqlSave, ouc.mutation, ouc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ouc *OIDCUserCreate) SaveX(ctx context.Context) *OIDCUser {
	v, err := ouc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ouc *OIDCUserCreate) Exec(ctx context.Context) error {
	_, err := ouc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouc *OIDCUserCreate) ExecX(ctx context.Context) {
	if err := ouc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouc *OIDCUserCreate) check() error {
	if _, ok := ouc.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "OIDCUser.username"`)}
	}
	return nil
}

func (ouc *OIDCUserCreate) sqlSave(ctx context.Context) (*OIDCUser, error) {
	if err := ouc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ouc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ouc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ouc.mutation.id = &_node.ID
	ouc.mutation.done = true
	return _node, nil
}

func (ouc *OIDCUserCreate) createSpec() (*OIDCUser, *sqlgraph.CreateSpec) {
	var (
		_node = &OIDCUser{config: ouc.config}
		_spec = sqlgraph.NewCreateSpec(oidcuser.Table, sqlgraph.NewFieldSpec(oidcuser.FieldID, field.TypeInt))
	)
	_spec.OnConflict = ouc.conflict
	if value, ok := ouc.mutation.Email(); ok {
		_spec.SetField(oidcuser.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := ouc.mutation.SubjectIdentifier(); ok {
		_spec.SetField(oidcuser.FieldSubjectIdentifier, field.TypeString, value)
		_node.SubjectIdentifier = value
	}
	if value, ok := ouc.mutation.Username(); ok {
		_spec.SetField(oidcuser.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if nodes := ouc.mutation.PermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   oidcuser.PermissionsTable,
			Columns: oidcuser.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ouc.mutation.TeamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   oidcuser.TeamsTable,
			Columns: oidcuser.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OIDCUser.Create().
//		SetEmail(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OIDCUserUpsert) {
//			SetEmail(v+v).
//		}).
//		Exec(ctx)
func (ouc *OIDCUserCreate) OnConflict(opts ...sql.ConflictOption) *OIDCUserUpsertOne {
	ouc.conflict = opts
	return &OIDCUserUpsertOne{
		create: ouc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OIDCUser.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ouc *OIDCUserCreate) OnConflictColumns(columns ...string) *OIDCUserUpsertOne {
	ouc.conflict = append(ouc.conflict, sql.ConflictColumns(columns...))
	return &OIDCUserUpsertOne{
		create: ouc,
	}
}

type (
	// OIDCUserUpsertOne is the builder for "upsert"-ing
	//  one OIDCUser node.
	OIDCUserUpsertOne struct {
		create *OIDCUserCreate
	}

	// OIDCUserUpsert is the "OnConflict" setter.
	OIDCUserUpsert struct {
		*sql.UpdateSet
	}
)

// SetEmail sets the "email" field.
func (u *OIDCUserUpsert) SetEmail(v string) *OIDCUserUpsert {
	u.Set(oidcuser.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *OIDCUserUpsert) UpdateEmail() *OIDCUserUpsert {
	u.SetExcluded(oidcuser.FieldEmail)
	return u
}

// ClearEmail clears the value of the "email" field.
func (u *OIDCUserUpsert) ClearEmail() *OIDCUserUpsert {
	u.SetNull(oidcuser.FieldEmail)
	return u
}

// SetSubjectIdentifier sets the "subject_identifier" field.
func (u *OIDCUserUpsert) SetSubjectIdentifier(v string) *OIDCUserUpsert {
	u.Set(oidcuser.FieldSubjectIdentifier, v)
	return u
}

// UpdateSubjectIdentifier sets the "subject_identifier" field to the value that was provided on create.
func (u *OIDCUserUpsert) UpdateSubjectIdentifier() *OIDCUserUpsert {
	u.SetExcluded(oidcuser.FieldSubjectIdentifier)
	return u
}

// ClearSubjectIdentifier clears the value of the "subject_identifier" field.
func (u *OIDCUserUpsert) ClearSubjectIdentifier() *OIDCUserUpsert {
	u.SetNull(oidcuser.FieldSubjectIdentifier)
	return u
}

// SetUsername sets the "username" field.
func (u *OIDCUserUpsert) SetUsername(v string) *OIDCUserUpsert {
	u.Set(oidcuser.FieldUsername, v)
	return u
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *OIDCUserUpsert) UpdateUsername() *OIDCUserUpsert {
	u.SetExcluded(oidcuser.FieldUsername)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.OIDCUser.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *OIDCUserUpsertOne) UpdateNewValues() *OIDCUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OIDCUser.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OIDCUserUpsertOne) Ignore() *OIDCUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OIDCUserUpsertOne) DoNothing() *OIDCUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OIDCUserCreate.OnConflict
// documentation for more info.
func (u *OIDCUserUpsertOne) Update(set func(*OIDCUserUpsert)) *OIDCUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OIDCUserUpsert{UpdateSet: update})
	}))
	return u
}

// SetEmail sets the "email" field.
func (u *OIDCUserUpsertOne) SetEmail(v string) *OIDCUserUpsertOne {
	return u.Update(func(s *OIDCUserUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *OIDCUserUpsertOne) UpdateEmail() *OIDCUserUpsertOne {
	return u.Update(func(s *OIDCUserUpsert) {
		s.UpdateEmail()
	})
}

// ClearEmail clears the value of the "email" field.
func (u *OIDCUserUpsertOne) ClearEmail() *OIDCUserUpsertOne {
	return u.Update(func(s *OIDCUserUpsert) {
		s.ClearEmail()
	})
}

// SetSubjectIdentifier sets the "subject_identifier" field.
func (u *OIDCUserUpsertOne) SetSubjectIdentifier(v string) *OIDCUserUpsertOne {
	return u.Update(func(s *OIDCUserUpsert) {
		s.SetSubjectIdentifier(v)
	})
}

// UpdateSubjectIdentifier sets the "subject_identifier" field to the value that was provided on create.
func (u *OIDCUserUpsertOne) UpdateSubjectIdentifier() *OIDCUserUpsertOne {
	return u.Update(func(s *OIDCUserUpsert) {
		s.UpdateSubjectIdentifier()
	})
}

// ClearSubjectIdentifier clears the value of the "subject_identifier" field.
func (u *OIDCUserUpsertOne) ClearSubjectIdentifier() *OIDCUserUpsertOne {
	return u.Update(func(s *OIDCUserUpsert) {
		s.ClearSubjectIdentifier()
	})
}

// SetUsername sets the "username" field.
func (u *OIDCUserUpsertOne) SetUsername(v string) *OIDCUserUpsertOne {
	return u.Update(func(s *OIDCUserUpsert) {
		s.SetUsername(v)
	})
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *OIDCUserUpsertOne) UpdateUsername() *OIDCUserUpsertOne {
	return u.Update(func(s *OIDCUserUpsert) {
		s.UpdateUsername()
	})
}

// Exec executes the query.
func (u *OIDCUserUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OIDCUserCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OIDCUserUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OIDCUserUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OIDCUserUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OIDCUserCreateBulk is the builder for creating many OIDCUser entities in bulk.
type OIDCUserCreateBulk struct {
	config
	err      error
	builders []*OIDCUserCreate
	conflict []sql.ConflictOption
}

// Save creates the OIDCUser entities in the database.
func (oucb *OIDCUserCreateBulk) Save(ctx context.Context) ([]*OIDCUser, error) {
	if oucb.err != nil {
		return nil, oucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(oucb.builders))
	nodes := make([]*OIDCUser, len(oucb.builders))
	mutators := make([]Mutator, len(oucb.builders))
	for i := range oucb.builders {
		func(i int, root context.Context) {
			builder := oucb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OIDCUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = oucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oucb *OIDCUserCreateBulk) SaveX(ctx context.Context) []*OIDCUser {
	v, err := oucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oucb *OIDCUserCreateBulk) Exec(ctx context.Context) error {
	_, err := oucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oucb *OIDCUserCreateBulk) ExecX(ctx context.Context) {
	if err := oucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OIDCUser.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OIDCUserUpsert) {
//			SetEmail(v+v).
//		}).
//		Exec(ctx)
func (oucb *OIDCUserCreateBulk) OnConflict(opts ...sql.ConflictOption) *OIDCUserUpsertBulk {
	oucb.conflict = opts
	return &OIDCUserUpsertBulk{
		create: oucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OIDCUser.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (oucb *OIDCUserCreateBulk) OnConflictColumns(columns ...string) *OIDCUserUpsertBulk {
	oucb.conflict = append(oucb.conflict, sql.ConflictColumns(columns...))
	return &OIDCUserUpsertBulk{
		create: oucb,
	}
}

// OIDCUserUpsertBulk is the builder for "upsert"-ing
// a bulk of OIDCUser nodes.
type OIDCUserUpsertBulk struct {
	create *OIDCUserCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OIDCUser.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *OIDCUserUpsertBulk) UpdateNewValues() *OIDCUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OIDCUser.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OIDCUserUpsertBulk) Ignore() *OIDCUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OIDCUserUpsertBulk) DoNothing() *OIDCUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OIDCUserCreateBulk.OnConflict
// documentation for more info.
func (u *OIDCUserUpsertBulk) Update(set func(*OIDCUserUpsert)) *OIDCUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OIDCUserUpsert{UpdateSet: update})
	}))
	return u
}

// SetEmail sets the "email" field.
func (u *OIDCUserUpsertBulk) SetEmail(v string) *OIDCUserUpsertBulk {
	return u.Update(func(s *OIDCUserUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *OIDCUserUpsertBulk) UpdateEmail() *OIDCUserUpsertBulk {
	return u.Update(func(s *OIDCUserUpsert) {
		s.UpdateEmail()
	})
}

// ClearEmail clears the value of the "email" field.
func (u *OIDCUserUpsertBulk) ClearEmail() *OIDCUserUpsertBulk {
	return u.Update(func(s *OIDCUserUpsert) {
		s.ClearEmail()
	})
}

// SetSubjectIdentifier sets the "subject_identifier" field.
func (u *OIDCUserUpsertBulk) SetSubjectIdentifier(v string) *OIDCUserUpsertBulk {
	return u.Update(func(s *OIDCUserUpsert) {
		s.SetSubjectIdentifier(v)
	})
}

// UpdateSubjectIdentifier sets the "subject_identifier" field to the value that was provided on create.
func (u *OIDCUserUpsertBulk) UpdateSubjectIdentifier() *OIDCUserUpsertBulk {
	return u.Update(func(s *OIDCUserUpsert) {
		s.UpdateSubjectIdentifier()
	})
}

// ClearSubjectIdentifier clears the value of the "subject_identifier" field.
func (u *OIDCUserUpsertBulk) ClearSubjectIdentifier() *OIDCUserUpsertBulk {
	return u.Update(func(s *OIDCUserUpsert) {
		s.ClearSubjectIdentifier()
	})
}

// SetUsername sets the "username" field.
func (u *OIDCUserUpsertBulk) SetUsername(v string) *OIDCUserUpsertBulk {
	return u.Update(func(s *OIDCUserUpsert) {
		s.SetUsername(v)
	})
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *OIDCUserUpsertBulk) UpdateUsername() *OIDCUserUpsertBulk {
	return u.Update(func(s *OIDCUserUpsert) {
		s.UpdateUsername()
	})
}

// Exec executes the query.
func (u *OIDCUserUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OIDCUserCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OIDCUserCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OIDCUserUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
