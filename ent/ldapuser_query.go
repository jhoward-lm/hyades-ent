// Code generated by ent, DO NOT EDIT.
// --------------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2025 The DependencyTrack Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// --------------------------------------------------------------------
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// --------------------------------------------------------------------

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"dependencytrack.io/hyades/ent/ldapuser"
	"dependencytrack.io/hyades/ent/permission"
	"dependencytrack.io/hyades/ent/predicate"
	"dependencytrack.io/hyades/ent/team"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LDAPUserQuery is the builder for querying LDAPUser entities.
type LDAPUserQuery struct {
	config
	ctx             *QueryContext
	order           []ldapuser.OrderOption
	inters          []Interceptor
	predicates      []predicate.LDAPUser
	withPermissions *PermissionQuery
	withTeams       *TeamQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the LDAPUserQuery builder.
func (luq *LDAPUserQuery) Where(ps ...predicate.LDAPUser) *LDAPUserQuery {
	luq.predicates = append(luq.predicates, ps...)
	return luq
}

// Limit the number of records to be returned by this query.
func (luq *LDAPUserQuery) Limit(limit int) *LDAPUserQuery {
	luq.ctx.Limit = &limit
	return luq
}

// Offset to start from.
func (luq *LDAPUserQuery) Offset(offset int) *LDAPUserQuery {
	luq.ctx.Offset = &offset
	return luq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (luq *LDAPUserQuery) Unique(unique bool) *LDAPUserQuery {
	luq.ctx.Unique = &unique
	return luq
}

// Order specifies how the records should be ordered.
func (luq *LDAPUserQuery) Order(o ...ldapuser.OrderOption) *LDAPUserQuery {
	luq.order = append(luq.order, o...)
	return luq
}

// QueryPermissions chains the current query on the "permissions" edge.
func (luq *LDAPUserQuery) QueryPermissions() *PermissionQuery {
	query := (&PermissionClient{config: luq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := luq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := luq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(ldapuser.Table, ldapuser.FieldID, selector),
			sqlgraph.To(permission.Table, permission.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ldapuser.PermissionsTable, ldapuser.PermissionsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(luq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTeams chains the current query on the "teams" edge.
func (luq *LDAPUserQuery) QueryTeams() *TeamQuery {
	query := (&TeamClient{config: luq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := luq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := luq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(ldapuser.Table, ldapuser.FieldID, selector),
			sqlgraph.To(team.Table, team.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ldapuser.TeamsTable, ldapuser.TeamsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(luq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first LDAPUser entity from the query.
// Returns a *NotFoundError when no LDAPUser was found.
func (luq *LDAPUserQuery) First(ctx context.Context) (*LDAPUser, error) {
	nodes, err := luq.Limit(1).All(setContextOp(ctx, luq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{ldapuser.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (luq *LDAPUserQuery) FirstX(ctx context.Context) *LDAPUser {
	node, err := luq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first LDAPUser ID from the query.
// Returns a *NotFoundError when no LDAPUser ID was found.
func (luq *LDAPUserQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = luq.Limit(1).IDs(setContextOp(ctx, luq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{ldapuser.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (luq *LDAPUserQuery) FirstIDX(ctx context.Context) int {
	id, err := luq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single LDAPUser entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one LDAPUser entity is found.
// Returns a *NotFoundError when no LDAPUser entities are found.
func (luq *LDAPUserQuery) Only(ctx context.Context) (*LDAPUser, error) {
	nodes, err := luq.Limit(2).All(setContextOp(ctx, luq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{ldapuser.Label}
	default:
		return nil, &NotSingularError{ldapuser.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (luq *LDAPUserQuery) OnlyX(ctx context.Context) *LDAPUser {
	node, err := luq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only LDAPUser ID in the query.
// Returns a *NotSingularError when more than one LDAPUser ID is found.
// Returns a *NotFoundError when no entities are found.
func (luq *LDAPUserQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = luq.Limit(2).IDs(setContextOp(ctx, luq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{ldapuser.Label}
	default:
		err = &NotSingularError{ldapuser.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (luq *LDAPUserQuery) OnlyIDX(ctx context.Context) int {
	id, err := luq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of LDAPUsers.
func (luq *LDAPUserQuery) All(ctx context.Context) ([]*LDAPUser, error) {
	ctx = setContextOp(ctx, luq.ctx, ent.OpQueryAll)
	if err := luq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*LDAPUser, *LDAPUserQuery]()
	return withInterceptors[[]*LDAPUser](ctx, luq, qr, luq.inters)
}

// AllX is like All, but panics if an error occurs.
func (luq *LDAPUserQuery) AllX(ctx context.Context) []*LDAPUser {
	nodes, err := luq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of LDAPUser IDs.
func (luq *LDAPUserQuery) IDs(ctx context.Context) (ids []int, err error) {
	if luq.ctx.Unique == nil && luq.path != nil {
		luq.Unique(true)
	}
	ctx = setContextOp(ctx, luq.ctx, ent.OpQueryIDs)
	if err = luq.Select(ldapuser.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (luq *LDAPUserQuery) IDsX(ctx context.Context) []int {
	ids, err := luq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (luq *LDAPUserQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, luq.ctx, ent.OpQueryCount)
	if err := luq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, luq, querierCount[*LDAPUserQuery](), luq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (luq *LDAPUserQuery) CountX(ctx context.Context) int {
	count, err := luq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (luq *LDAPUserQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, luq.ctx, ent.OpQueryExist)
	switch _, err := luq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (luq *LDAPUserQuery) ExistX(ctx context.Context) bool {
	exist, err := luq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the LDAPUserQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (luq *LDAPUserQuery) Clone() *LDAPUserQuery {
	if luq == nil {
		return nil
	}
	return &LDAPUserQuery{
		config:          luq.config,
		ctx:             luq.ctx.Clone(),
		order:           append([]ldapuser.OrderOption{}, luq.order...),
		inters:          append([]Interceptor{}, luq.inters...),
		predicates:      append([]predicate.LDAPUser{}, luq.predicates...),
		withPermissions: luq.withPermissions.Clone(),
		withTeams:       luq.withTeams.Clone(),
		// clone intermediate query.
		sql:  luq.sql.Clone(),
		path: luq.path,
	}
}

// WithPermissions tells the query-builder to eager-load the nodes that are connected to
// the "permissions" edge. The optional arguments are used to configure the query builder of the edge.
func (luq *LDAPUserQuery) WithPermissions(opts ...func(*PermissionQuery)) *LDAPUserQuery {
	query := (&PermissionClient{config: luq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	luq.withPermissions = query
	return luq
}

// WithTeams tells the query-builder to eager-load the nodes that are connected to
// the "teams" edge. The optional arguments are used to configure the query builder of the edge.
func (luq *LDAPUserQuery) WithTeams(opts ...func(*TeamQuery)) *LDAPUserQuery {
	query := (&TeamClient{config: luq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	luq.withTeams = query
	return luq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Dn string `json:"dn,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.LDAPUser.Query().
//		GroupBy(ldapuser.FieldDn).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (luq *LDAPUserQuery) GroupBy(field string, fields ...string) *LDAPUserGroupBy {
	luq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &LDAPUserGroupBy{build: luq}
	grbuild.flds = &luq.ctx.Fields
	grbuild.label = ldapuser.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Dn string `json:"dn,omitempty"`
//	}
//
//	client.LDAPUser.Query().
//		Select(ldapuser.FieldDn).
//		Scan(ctx, &v)
func (luq *LDAPUserQuery) Select(fields ...string) *LDAPUserSelect {
	luq.ctx.Fields = append(luq.ctx.Fields, fields...)
	sbuild := &LDAPUserSelect{LDAPUserQuery: luq}
	sbuild.label = ldapuser.Label
	sbuild.flds, sbuild.scan = &luq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a LDAPUserSelect configured with the given aggregations.
func (luq *LDAPUserQuery) Aggregate(fns ...AggregateFunc) *LDAPUserSelect {
	return luq.Select().Aggregate(fns...)
}

func (luq *LDAPUserQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range luq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, luq); err != nil {
				return err
			}
		}
	}
	for _, f := range luq.ctx.Fields {
		if !ldapuser.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if luq.path != nil {
		prev, err := luq.path(ctx)
		if err != nil {
			return err
		}
		luq.sql = prev
	}
	return nil
}

func (luq *LDAPUserQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*LDAPUser, error) {
	var (
		nodes       = []*LDAPUser{}
		_spec       = luq.querySpec()
		loadedTypes = [2]bool{
			luq.withPermissions != nil,
			luq.withTeams != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*LDAPUser).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &LDAPUser{config: luq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, luq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := luq.withPermissions; query != nil {
		if err := luq.loadPermissions(ctx, query, nodes,
			func(n *LDAPUser) { n.Edges.Permissions = []*Permission{} },
			func(n *LDAPUser, e *Permission) { n.Edges.Permissions = append(n.Edges.Permissions, e) }); err != nil {
			return nil, err
		}
	}
	if query := luq.withTeams; query != nil {
		if err := luq.loadTeams(ctx, query, nodes,
			func(n *LDAPUser) { n.Edges.Teams = []*Team{} },
			func(n *LDAPUser, e *Team) { n.Edges.Teams = append(n.Edges.Teams, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (luq *LDAPUserQuery) loadPermissions(ctx context.Context, query *PermissionQuery, nodes []*LDAPUser, init func(*LDAPUser), assign func(*LDAPUser, *Permission)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*LDAPUser)
	nids := make(map[int]map[*LDAPUser]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(ldapuser.PermissionsTable)
		s.Join(joinT).On(s.C(permission.FieldID), joinT.C(ldapuser.PermissionsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(ldapuser.PermissionsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(ldapuser.PermissionsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*LDAPUser]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Permission](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "permissions" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (luq *LDAPUserQuery) loadTeams(ctx context.Context, query *TeamQuery, nodes []*LDAPUser, init func(*LDAPUser), assign func(*LDAPUser, *Team)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*LDAPUser)
	nids := make(map[int]map[*LDAPUser]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(ldapuser.TeamsTable)
		s.Join(joinT).On(s.C(team.FieldID), joinT.C(ldapuser.TeamsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(ldapuser.TeamsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(ldapuser.TeamsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*LDAPUser]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Team](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "teams" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (luq *LDAPUserQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := luq.querySpec()
	_spec.Node.Columns = luq.ctx.Fields
	if len(luq.ctx.Fields) > 0 {
		_spec.Unique = luq.ctx.Unique != nil && *luq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, luq.driver, _spec)
}

func (luq *LDAPUserQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(ldapuser.Table, ldapuser.Columns, sqlgraph.NewFieldSpec(ldapuser.FieldID, field.TypeInt))
	_spec.From = luq.sql
	if unique := luq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if luq.path != nil {
		_spec.Unique = true
	}
	if fields := luq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ldapuser.FieldID)
		for i := range fields {
			if fields[i] != ldapuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := luq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := luq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := luq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := luq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (luq *LDAPUserQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(luq.driver.Dialect())
	t1 := builder.Table(ldapuser.Table)
	columns := luq.ctx.Fields
	if len(columns) == 0 {
		columns = ldapuser.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if luq.sql != nil {
		selector = luq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if luq.ctx.Unique != nil && *luq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range luq.predicates {
		p(selector)
	}
	for _, p := range luq.order {
		p(selector)
	}
	if offset := luq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := luq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// LDAPUserGroupBy is the group-by builder for LDAPUser entities.
type LDAPUserGroupBy struct {
	selector
	build *LDAPUserQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (lugb *LDAPUserGroupBy) Aggregate(fns ...AggregateFunc) *LDAPUserGroupBy {
	lugb.fns = append(lugb.fns, fns...)
	return lugb
}

// Scan applies the selector query and scans the result into the given value.
func (lugb *LDAPUserGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, lugb.build.ctx, ent.OpQueryGroupBy)
	if err := lugb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*LDAPUserQuery, *LDAPUserGroupBy](ctx, lugb.build, lugb, lugb.build.inters, v)
}

func (lugb *LDAPUserGroupBy) sqlScan(ctx context.Context, root *LDAPUserQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(lugb.fns))
	for _, fn := range lugb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*lugb.flds)+len(lugb.fns))
		for _, f := range *lugb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*lugb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := lugb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// LDAPUserSelect is the builder for selecting fields of LDAPUser entities.
type LDAPUserSelect struct {
	*LDAPUserQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (lus *LDAPUserSelect) Aggregate(fns ...AggregateFunc) *LDAPUserSelect {
	lus.fns = append(lus.fns, fns...)
	return lus
}

// Scan applies the selector query and scans the result into the given value.
func (lus *LDAPUserSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, lus.ctx, ent.OpQuerySelect)
	if err := lus.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*LDAPUserQuery, *LDAPUserSelect](ctx, lus.LDAPUserQuery, lus, lus.inters, v)
}

func (lus *LDAPUserSelect) sqlScan(ctx context.Context, root *LDAPUserQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(lus.fns))
	for _, fn := range lus.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*lus.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := lus.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
