// Code generated by ent, DO NOT EDIT.
// --------------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2025 The DependencyTrack Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// --------------------------------------------------------------------
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// --------------------------------------------------------------------

package ent

import (
	"fmt"
	"strings"
	"time"

	"dependencytrack.io/hyades/ent/installedupgrades"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// INSTALLEDUPGRADES is the model entity for the INSTALLEDUPGRADES schema.
type INSTALLEDUPGRADES struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Endtime holds the value of the "endtime" field.
	Endtime time.Time `json:"endtime,omitempty"`
	// Starttime holds the value of the "starttime" field.
	Starttime time.Time `json:"starttime,omitempty"`
	// Upgradeclass holds the value of the "upgradeclass" field.
	Upgradeclass string `json:"upgradeclass,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*INSTALLEDUPGRADES) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case installedupgrades.FieldID:
			values[i] = new(sql.NullInt64)
		case installedupgrades.FieldUpgradeclass:
			values[i] = new(sql.NullString)
		case installedupgrades.FieldEndtime, installedupgrades.FieldStarttime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the INSTALLEDUPGRADES fields.
func (i *INSTALLEDUPGRADES) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case installedupgrades.FieldID:
			value, ok := values[j].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			i.ID = int(value.Int64)
		case installedupgrades.FieldEndtime:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field endtime", values[j])
			} else if value.Valid {
				i.Endtime = value.Time
			}
		case installedupgrades.FieldStarttime:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field starttime", values[j])
			} else if value.Valid {
				i.Starttime = value.Time
			}
		case installedupgrades.FieldUpgradeclass:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field upgradeclass", values[j])
			} else if value.Valid {
				i.Upgradeclass = value.String
			}
		default:
			i.selectValues.Set(columns[j], values[j])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the INSTALLEDUPGRADES.
// This includes values selected through modifiers, order, etc.
func (i *INSTALLEDUPGRADES) Value(name string) (ent.Value, error) {
	return i.selectValues.Get(name)
}

// Update returns a builder for updating this INSTALLEDUPGRADES.
// Note that you need to call INSTALLEDUPGRADES.Unwrap() before calling this method if this INSTALLEDUPGRADES
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *INSTALLEDUPGRADES) Update() *INSTALLEDUPGRADESUpdateOne {
	return NewINSTALLEDUPGRADESClient(i.config).UpdateOne(i)
}

// Unwrap unwraps the INSTALLEDUPGRADES entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *INSTALLEDUPGRADES) Unwrap() *INSTALLEDUPGRADES {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: INSTALLEDUPGRADES is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *INSTALLEDUPGRADES) String() string {
	var builder strings.Builder
	builder.WriteString("INSTALLEDUPGRADES(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("endtime=")
	builder.WriteString(i.Endtime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("starttime=")
	builder.WriteString(i.Starttime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("upgradeclass=")
	builder.WriteString(i.Upgradeclass)
	builder.WriteByte(')')
	return builder.String()
}

// INSTALLEDUPGRADESs is a parsable slice of INSTALLEDUPGRADES.
type INSTALLEDUPGRADESs []*INSTALLEDUPGRADES
