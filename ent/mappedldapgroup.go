// Code generated by ent, DO NOT EDIT.
// --------------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2025 The DependencyTrack Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// --------------------------------------------------------------------
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// --------------------------------------------------------------------

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"dependencytrack.io/hyades/ent/mappedldapgroup"
	"dependencytrack.io/hyades/ent/team"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// MappedLDAPGroup is the model entity for the MappedLDAPGroup schema.
type MappedLDAPGroup struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID uuid.UUID `json:"uuid,omitempty"`
	// Dn holds the value of the "dn" field.
	Dn string `json:"dn,omitempty"`
	// TeamID holds the value of the "team_id" field.
	TeamID int `json:"-"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MappedLDAPGroupQuery when eager-loading is set.
	Edges        MappedLDAPGroupEdges `json:"-"`
	selectValues sql.SelectValues
}

// MappedLDAPGroupEdges holds the relations/edges for other nodes in the graph.
type MappedLDAPGroupEdges struct {
	// Team holds the value of the team edge.
	Team *Team `json:"-"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TeamOrErr returns the Team value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MappedLDAPGroupEdges) TeamOrErr() (*Team, error) {
	if e.Team != nil {
		return e.Team, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: team.Label}
	}
	return nil, &NotLoadedError{edge: "team"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MappedLDAPGroup) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case mappedldapgroup.FieldID, mappedldapgroup.FieldTeamID:
			values[i] = new(sql.NullInt64)
		case mappedldapgroup.FieldDn:
			values[i] = new(sql.NullString)
		case mappedldapgroup.FieldUUID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MappedLDAPGroup fields.
func (mlg *MappedLDAPGroup) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case mappedldapgroup.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mlg.ID = int(value.Int64)
		case mappedldapgroup.FieldUUID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value != nil {
				mlg.UUID = *value
			}
		case mappedldapgroup.FieldDn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dn", values[i])
			} else if value.Valid {
				mlg.Dn = value.String
			}
		case mappedldapgroup.FieldTeamID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field team_id", values[i])
			} else if value.Valid {
				mlg.TeamID = int(value.Int64)
			}
		default:
			mlg.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MappedLDAPGroup.
// This includes values selected through modifiers, order, etc.
func (mlg *MappedLDAPGroup) Value(name string) (ent.Value, error) {
	return mlg.selectValues.Get(name)
}

// QueryTeam queries the "team" edge of the MappedLDAPGroup entity.
func (mlg *MappedLDAPGroup) QueryTeam() *TeamQuery {
	return NewMappedLDAPGroupClient(mlg.config).QueryTeam(mlg)
}

// Update returns a builder for updating this MappedLDAPGroup.
// Note that you need to call MappedLDAPGroup.Unwrap() before calling this method if this MappedLDAPGroup
// was returned from a transaction, and the transaction was committed or rolled back.
func (mlg *MappedLDAPGroup) Update() *MappedLDAPGroupUpdateOne {
	return NewMappedLDAPGroupClient(mlg.config).UpdateOne(mlg)
}

// Unwrap unwraps the MappedLDAPGroup entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mlg *MappedLDAPGroup) Unwrap() *MappedLDAPGroup {
	_tx, ok := mlg.config.driver.(*txDriver)
	if !ok {
		panic("ent: MappedLDAPGroup is not a transactional entity")
	}
	mlg.config.driver = _tx.drv
	return mlg
}

// String implements the fmt.Stringer.
func (mlg *MappedLDAPGroup) String() string {
	var builder strings.Builder
	builder.WriteString("MappedLDAPGroup(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mlg.ID))
	builder.WriteString("uuid=")
	builder.WriteString(fmt.Sprintf("%v", mlg.UUID))
	builder.WriteString(", ")
	builder.WriteString("dn=")
	builder.WriteString(mlg.Dn)
	builder.WriteString(", ")
	builder.WriteString("team_id=")
	builder.WriteString(fmt.Sprintf("%v", mlg.TeamID))
	builder.WriteByte(')')
	return builder.String()
}

// MarshalJSON implements the json.Marshaler interface.
func (mlg *MappedLDAPGroup) MarshalJSON() ([]byte, error) {
	type Alias MappedLDAPGroup
	return json.Marshal(&struct {
		*Alias
		MappedLDAPGroupEdges
	}{
		Alias:                (*Alias)(mlg),
		MappedLDAPGroupEdges: mlg.Edges,
	})
}

// MappedLDAPGroups is a parsable slice of MappedLDAPGroup.
type MappedLDAPGroups []*MappedLDAPGroup
