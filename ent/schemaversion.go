// Code generated by ent, DO NOT EDIT.
// --------------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2025 The DependencyTrack Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// --------------------------------------------------------------------
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// --------------------------------------------------------------------

package ent

import (
	"fmt"
	"strings"

	"dependencytrack.io/hyades/ent/schemaversion"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// SchemaVersion is the model entity for the SchemaVersion schema.
type SchemaVersion struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Version holds the value of the "version" field.
	Version      string `json:"version,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SchemaVersion) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case schemaversion.FieldID:
			values[i] = new(sql.NullInt64)
		case schemaversion.FieldVersion:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SchemaVersion fields.
func (sv *SchemaVersion) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case schemaversion.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sv.ID = int(value.Int64)
		case schemaversion.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				sv.Version = value.String
			}
		default:
			sv.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SchemaVersion.
// This includes values selected through modifiers, order, etc.
func (sv *SchemaVersion) Value(name string) (ent.Value, error) {
	return sv.selectValues.Get(name)
}

// Update returns a builder for updating this SchemaVersion.
// Note that you need to call SchemaVersion.Unwrap() before calling this method if this SchemaVersion
// was returned from a transaction, and the transaction was committed or rolled back.
func (sv *SchemaVersion) Update() *SchemaVersionUpdateOne {
	return NewSchemaVersionClient(sv.config).UpdateOne(sv)
}

// Unwrap unwraps the SchemaVersion entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sv *SchemaVersion) Unwrap() *SchemaVersion {
	_tx, ok := sv.config.driver.(*txDriver)
	if !ok {
		panic("ent: SchemaVersion is not a transactional entity")
	}
	sv.config.driver = _tx.drv
	return sv
}

// String implements the fmt.Stringer.
func (sv *SchemaVersion) String() string {
	var builder strings.Builder
	builder.WriteString("SchemaVersion(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sv.ID))
	builder.WriteString("version=")
	builder.WriteString(sv.Version)
	builder.WriteByte(')')
	return builder.String()
}

// SchemaVersions is a parsable slice of SchemaVersion.
type SchemaVersions []*SchemaVersion
