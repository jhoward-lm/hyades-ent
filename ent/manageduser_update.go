// Code generated by ent, DO NOT EDIT.
// --------------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2025 The DependencyTrack Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// --------------------------------------------------------------------
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// --------------------------------------------------------------------

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"dependencytrack.io/hyades/ent/manageduser"
	"dependencytrack.io/hyades/ent/permission"
	"dependencytrack.io/hyades/ent/predicate"
	"dependencytrack.io/hyades/ent/team"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ManagedUserUpdate is the builder for updating ManagedUser entities.
type ManagedUserUpdate struct {
	config
	hooks    []Hook
	mutation *ManagedUserMutation
}

// Where appends a list predicates to the ManagedUserUpdate builder.
func (muu *ManagedUserUpdate) Where(ps ...predicate.ManagedUser) *ManagedUserUpdate {
	muu.mutation.Where(ps...)
	return muu
}

// SetEmail sets the "email" field.
func (muu *ManagedUserUpdate) SetEmail(s string) *ManagedUserUpdate {
	muu.mutation.SetEmail(s)
	return muu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (muu *ManagedUserUpdate) SetNillableEmail(s *string) *ManagedUserUpdate {
	if s != nil {
		muu.SetEmail(*s)
	}
	return muu
}

// ClearEmail clears the value of the "email" field.
func (muu *ManagedUserUpdate) ClearEmail() *ManagedUserUpdate {
	muu.mutation.ClearEmail()
	return muu
}

// SetForcePasswordChange sets the "force_password_change" field.
func (muu *ManagedUserUpdate) SetForcePasswordChange(b bool) *ManagedUserUpdate {
	muu.mutation.SetForcePasswordChange(b)
	return muu
}

// SetNillableForcePasswordChange sets the "force_password_change" field if the given value is not nil.
func (muu *ManagedUserUpdate) SetNillableForcePasswordChange(b *bool) *ManagedUserUpdate {
	if b != nil {
		muu.SetForcePasswordChange(*b)
	}
	return muu
}

// SetFullname sets the "fullname" field.
func (muu *ManagedUserUpdate) SetFullname(s string) *ManagedUserUpdate {
	muu.mutation.SetFullname(s)
	return muu
}

// SetNillableFullname sets the "fullname" field if the given value is not nil.
func (muu *ManagedUserUpdate) SetNillableFullname(s *string) *ManagedUserUpdate {
	if s != nil {
		muu.SetFullname(*s)
	}
	return muu
}

// ClearFullname clears the value of the "fullname" field.
func (muu *ManagedUserUpdate) ClearFullname() *ManagedUserUpdate {
	muu.mutation.ClearFullname()
	return muu
}

// SetLastPasswordChange sets the "last_password_change" field.
func (muu *ManagedUserUpdate) SetLastPasswordChange(t time.Time) *ManagedUserUpdate {
	muu.mutation.SetLastPasswordChange(t)
	return muu
}

// SetNillableLastPasswordChange sets the "last_password_change" field if the given value is not nil.
func (muu *ManagedUserUpdate) SetNillableLastPasswordChange(t *time.Time) *ManagedUserUpdate {
	if t != nil {
		muu.SetLastPasswordChange(*t)
	}
	return muu
}

// SetNonExpiryPassword sets the "non_expiry_password" field.
func (muu *ManagedUserUpdate) SetNonExpiryPassword(b bool) *ManagedUserUpdate {
	muu.mutation.SetNonExpiryPassword(b)
	return muu
}

// SetNillableNonExpiryPassword sets the "non_expiry_password" field if the given value is not nil.
func (muu *ManagedUserUpdate) SetNillableNonExpiryPassword(b *bool) *ManagedUserUpdate {
	if b != nil {
		muu.SetNonExpiryPassword(*b)
	}
	return muu
}

// SetPassword sets the "password" field.
func (muu *ManagedUserUpdate) SetPassword(s string) *ManagedUserUpdate {
	muu.mutation.SetPassword(s)
	return muu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (muu *ManagedUserUpdate) SetNillablePassword(s *string) *ManagedUserUpdate {
	if s != nil {
		muu.SetPassword(*s)
	}
	return muu
}

// SetSuspended sets the "suspended" field.
func (muu *ManagedUserUpdate) SetSuspended(b bool) *ManagedUserUpdate {
	muu.mutation.SetSuspended(b)
	return muu
}

// SetNillableSuspended sets the "suspended" field if the given value is not nil.
func (muu *ManagedUserUpdate) SetNillableSuspended(b *bool) *ManagedUserUpdate {
	if b != nil {
		muu.SetSuspended(*b)
	}
	return muu
}

// SetUsername sets the "username" field.
func (muu *ManagedUserUpdate) SetUsername(s string) *ManagedUserUpdate {
	muu.mutation.SetUsername(s)
	return muu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (muu *ManagedUserUpdate) SetNillableUsername(s *string) *ManagedUserUpdate {
	if s != nil {
		muu.SetUsername(*s)
	}
	return muu
}

// ClearUsername clears the value of the "username" field.
func (muu *ManagedUserUpdate) ClearUsername() *ManagedUserUpdate {
	muu.mutation.ClearUsername()
	return muu
}

// AddPermissionIDs adds the "permissions" edge to the Permission entity by IDs.
func (muu *ManagedUserUpdate) AddPermissionIDs(ids ...int) *ManagedUserUpdate {
	muu.mutation.AddPermissionIDs(ids...)
	return muu
}

// AddPermissions adds the "permissions" edges to the Permission entity.
func (muu *ManagedUserUpdate) AddPermissions(p ...*Permission) *ManagedUserUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return muu.AddPermissionIDs(ids...)
}

// AddTeamIDs adds the "teams" edge to the Team entity by IDs.
func (muu *ManagedUserUpdate) AddTeamIDs(ids ...int) *ManagedUserUpdate {
	muu.mutation.AddTeamIDs(ids...)
	return muu
}

// AddTeams adds the "teams" edges to the Team entity.
func (muu *ManagedUserUpdate) AddTeams(t ...*Team) *ManagedUserUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return muu.AddTeamIDs(ids...)
}

// Mutation returns the ManagedUserMutation object of the builder.
func (muu *ManagedUserUpdate) Mutation() *ManagedUserMutation {
	return muu.mutation
}

// ClearPermissions clears all "permissions" edges to the Permission entity.
func (muu *ManagedUserUpdate) ClearPermissions() *ManagedUserUpdate {
	muu.mutation.ClearPermissions()
	return muu
}

// RemovePermissionIDs removes the "permissions" edge to Permission entities by IDs.
func (muu *ManagedUserUpdate) RemovePermissionIDs(ids ...int) *ManagedUserUpdate {
	muu.mutation.RemovePermissionIDs(ids...)
	return muu
}

// RemovePermissions removes "permissions" edges to Permission entities.
func (muu *ManagedUserUpdate) RemovePermissions(p ...*Permission) *ManagedUserUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return muu.RemovePermissionIDs(ids...)
}

// ClearTeams clears all "teams" edges to the Team entity.
func (muu *ManagedUserUpdate) ClearTeams() *ManagedUserUpdate {
	muu.mutation.ClearTeams()
	return muu
}

// RemoveTeamIDs removes the "teams" edge to Team entities by IDs.
func (muu *ManagedUserUpdate) RemoveTeamIDs(ids ...int) *ManagedUserUpdate {
	muu.mutation.RemoveTeamIDs(ids...)
	return muu
}

// RemoveTeams removes "teams" edges to Team entities.
func (muu *ManagedUserUpdate) RemoveTeams(t ...*Team) *ManagedUserUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return muu.RemoveTeamIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (muu *ManagedUserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, muu.sqlSave, muu.mutation, muu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muu *ManagedUserUpdate) SaveX(ctx context.Context) int {
	affected, err := muu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (muu *ManagedUserUpdate) Exec(ctx context.Context) error {
	_, err := muu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muu *ManagedUserUpdate) ExecX(ctx context.Context) {
	if err := muu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (muu *ManagedUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(manageduser.Table, manageduser.Columns, sqlgraph.NewFieldSpec(manageduser.FieldID, field.TypeInt))
	if ps := muu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muu.mutation.Email(); ok {
		_spec.SetField(manageduser.FieldEmail, field.TypeString, value)
	}
	if muu.mutation.EmailCleared() {
		_spec.ClearField(manageduser.FieldEmail, field.TypeString)
	}
	if value, ok := muu.mutation.ForcePasswordChange(); ok {
		_spec.SetField(manageduser.FieldForcePasswordChange, field.TypeBool, value)
	}
	if value, ok := muu.mutation.Fullname(); ok {
		_spec.SetField(manageduser.FieldFullname, field.TypeString, value)
	}
	if muu.mutation.FullnameCleared() {
		_spec.ClearField(manageduser.FieldFullname, field.TypeString)
	}
	if value, ok := muu.mutation.LastPasswordChange(); ok {
		_spec.SetField(manageduser.FieldLastPasswordChange, field.TypeTime, value)
	}
	if value, ok := muu.mutation.NonExpiryPassword(); ok {
		_spec.SetField(manageduser.FieldNonExpiryPassword, field.TypeBool, value)
	}
	if value, ok := muu.mutation.Password(); ok {
		_spec.SetField(manageduser.FieldPassword, field.TypeString, value)
	}
	if value, ok := muu.mutation.Suspended(); ok {
		_spec.SetField(manageduser.FieldSuspended, field.TypeBool, value)
	}
	if value, ok := muu.mutation.Username(); ok {
		_spec.SetField(manageduser.FieldUsername, field.TypeString, value)
	}
	if muu.mutation.UsernameCleared() {
		_spec.ClearField(manageduser.FieldUsername, field.TypeString)
	}
	if muu.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   manageduser.PermissionsTable,
			Columns: manageduser.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muu.mutation.RemovedPermissionsIDs(); len(nodes) > 0 && !muu.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   manageduser.PermissionsTable,
			Columns: manageduser.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muu.mutation.PermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   manageduser.PermissionsTable,
			Columns: manageduser.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muu.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   manageduser.TeamsTable,
			Columns: manageduser.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muu.mutation.RemovedTeamsIDs(); len(nodes) > 0 && !muu.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   manageduser.TeamsTable,
			Columns: manageduser.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muu.mutation.TeamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   manageduser.TeamsTable,
			Columns: manageduser.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, muu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{manageduser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	muu.mutation.done = true
	return n, nil
}

// ManagedUserUpdateOne is the builder for updating a single ManagedUser entity.
type ManagedUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ManagedUserMutation
}

// SetEmail sets the "email" field.
func (muuo *ManagedUserUpdateOne) SetEmail(s string) *ManagedUserUpdateOne {
	muuo.mutation.SetEmail(s)
	return muuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (muuo *ManagedUserUpdateOne) SetNillableEmail(s *string) *ManagedUserUpdateOne {
	if s != nil {
		muuo.SetEmail(*s)
	}
	return muuo
}

// ClearEmail clears the value of the "email" field.
func (muuo *ManagedUserUpdateOne) ClearEmail() *ManagedUserUpdateOne {
	muuo.mutation.ClearEmail()
	return muuo
}

// SetForcePasswordChange sets the "force_password_change" field.
func (muuo *ManagedUserUpdateOne) SetForcePasswordChange(b bool) *ManagedUserUpdateOne {
	muuo.mutation.SetForcePasswordChange(b)
	return muuo
}

// SetNillableForcePasswordChange sets the "force_password_change" field if the given value is not nil.
func (muuo *ManagedUserUpdateOne) SetNillableForcePasswordChange(b *bool) *ManagedUserUpdateOne {
	if b != nil {
		muuo.SetForcePasswordChange(*b)
	}
	return muuo
}

// SetFullname sets the "fullname" field.
func (muuo *ManagedUserUpdateOne) SetFullname(s string) *ManagedUserUpdateOne {
	muuo.mutation.SetFullname(s)
	return muuo
}

// SetNillableFullname sets the "fullname" field if the given value is not nil.
func (muuo *ManagedUserUpdateOne) SetNillableFullname(s *string) *ManagedUserUpdateOne {
	if s != nil {
		muuo.SetFullname(*s)
	}
	return muuo
}

// ClearFullname clears the value of the "fullname" field.
func (muuo *ManagedUserUpdateOne) ClearFullname() *ManagedUserUpdateOne {
	muuo.mutation.ClearFullname()
	return muuo
}

// SetLastPasswordChange sets the "last_password_change" field.
func (muuo *ManagedUserUpdateOne) SetLastPasswordChange(t time.Time) *ManagedUserUpdateOne {
	muuo.mutation.SetLastPasswordChange(t)
	return muuo
}

// SetNillableLastPasswordChange sets the "last_password_change" field if the given value is not nil.
func (muuo *ManagedUserUpdateOne) SetNillableLastPasswordChange(t *time.Time) *ManagedUserUpdateOne {
	if t != nil {
		muuo.SetLastPasswordChange(*t)
	}
	return muuo
}

// SetNonExpiryPassword sets the "non_expiry_password" field.
func (muuo *ManagedUserUpdateOne) SetNonExpiryPassword(b bool) *ManagedUserUpdateOne {
	muuo.mutation.SetNonExpiryPassword(b)
	return muuo
}

// SetNillableNonExpiryPassword sets the "non_expiry_password" field if the given value is not nil.
func (muuo *ManagedUserUpdateOne) SetNillableNonExpiryPassword(b *bool) *ManagedUserUpdateOne {
	if b != nil {
		muuo.SetNonExpiryPassword(*b)
	}
	return muuo
}

// SetPassword sets the "password" field.
func (muuo *ManagedUserUpdateOne) SetPassword(s string) *ManagedUserUpdateOne {
	muuo.mutation.SetPassword(s)
	return muuo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (muuo *ManagedUserUpdateOne) SetNillablePassword(s *string) *ManagedUserUpdateOne {
	if s != nil {
		muuo.SetPassword(*s)
	}
	return muuo
}

// SetSuspended sets the "suspended" field.
func (muuo *ManagedUserUpdateOne) SetSuspended(b bool) *ManagedUserUpdateOne {
	muuo.mutation.SetSuspended(b)
	return muuo
}

// SetNillableSuspended sets the "suspended" field if the given value is not nil.
func (muuo *ManagedUserUpdateOne) SetNillableSuspended(b *bool) *ManagedUserUpdateOne {
	if b != nil {
		muuo.SetSuspended(*b)
	}
	return muuo
}

// SetUsername sets the "username" field.
func (muuo *ManagedUserUpdateOne) SetUsername(s string) *ManagedUserUpdateOne {
	muuo.mutation.SetUsername(s)
	return muuo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (muuo *ManagedUserUpdateOne) SetNillableUsername(s *string) *ManagedUserUpdateOne {
	if s != nil {
		muuo.SetUsername(*s)
	}
	return muuo
}

// ClearUsername clears the value of the "username" field.
func (muuo *ManagedUserUpdateOne) ClearUsername() *ManagedUserUpdateOne {
	muuo.mutation.ClearUsername()
	return muuo
}

// AddPermissionIDs adds the "permissions" edge to the Permission entity by IDs.
func (muuo *ManagedUserUpdateOne) AddPermissionIDs(ids ...int) *ManagedUserUpdateOne {
	muuo.mutation.AddPermissionIDs(ids...)
	return muuo
}

// AddPermissions adds the "permissions" edges to the Permission entity.
func (muuo *ManagedUserUpdateOne) AddPermissions(p ...*Permission) *ManagedUserUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return muuo.AddPermissionIDs(ids...)
}

// AddTeamIDs adds the "teams" edge to the Team entity by IDs.
func (muuo *ManagedUserUpdateOne) AddTeamIDs(ids ...int) *ManagedUserUpdateOne {
	muuo.mutation.AddTeamIDs(ids...)
	return muuo
}

// AddTeams adds the "teams" edges to the Team entity.
func (muuo *ManagedUserUpdateOne) AddTeams(t ...*Team) *ManagedUserUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return muuo.AddTeamIDs(ids...)
}

// Mutation returns the ManagedUserMutation object of the builder.
func (muuo *ManagedUserUpdateOne) Mutation() *ManagedUserMutation {
	return muuo.mutation
}

// ClearPermissions clears all "permissions" edges to the Permission entity.
func (muuo *ManagedUserUpdateOne) ClearPermissions() *ManagedUserUpdateOne {
	muuo.mutation.ClearPermissions()
	return muuo
}

// RemovePermissionIDs removes the "permissions" edge to Permission entities by IDs.
func (muuo *ManagedUserUpdateOne) RemovePermissionIDs(ids ...int) *ManagedUserUpdateOne {
	muuo.mutation.RemovePermissionIDs(ids...)
	return muuo
}

// RemovePermissions removes "permissions" edges to Permission entities.
func (muuo *ManagedUserUpdateOne) RemovePermissions(p ...*Permission) *ManagedUserUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return muuo.RemovePermissionIDs(ids...)
}

// ClearTeams clears all "teams" edges to the Team entity.
func (muuo *ManagedUserUpdateOne) ClearTeams() *ManagedUserUpdateOne {
	muuo.mutation.ClearTeams()
	return muuo
}

// RemoveTeamIDs removes the "teams" edge to Team entities by IDs.
func (muuo *ManagedUserUpdateOne) RemoveTeamIDs(ids ...int) *ManagedUserUpdateOne {
	muuo.mutation.RemoveTeamIDs(ids...)
	return muuo
}

// RemoveTeams removes "teams" edges to Team entities.
func (muuo *ManagedUserUpdateOne) RemoveTeams(t ...*Team) *ManagedUserUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return muuo.RemoveTeamIDs(ids...)
}

// Where appends a list predicates to the ManagedUserUpdate builder.
func (muuo *ManagedUserUpdateOne) Where(ps ...predicate.ManagedUser) *ManagedUserUpdateOne {
	muuo.mutation.Where(ps...)
	return muuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muuo *ManagedUserUpdateOne) Select(field string, fields ...string) *ManagedUserUpdateOne {
	muuo.fields = append([]string{field}, fields...)
	return muuo
}

// Save executes the query and returns the updated ManagedUser entity.
func (muuo *ManagedUserUpdateOne) Save(ctx context.Context) (*ManagedUser, error) {
	return withHooks(ctx, muuo.sqlSave, muuo.mutation, muuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muuo *ManagedUserUpdateOne) SaveX(ctx context.Context) *ManagedUser {
	node, err := muuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muuo *ManagedUserUpdateOne) Exec(ctx context.Context) error {
	_, err := muuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muuo *ManagedUserUpdateOne) ExecX(ctx context.Context) {
	if err := muuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (muuo *ManagedUserUpdateOne) sqlSave(ctx context.Context) (_node *ManagedUser, err error) {
	_spec := sqlgraph.NewUpdateSpec(manageduser.Table, manageduser.Columns, sqlgraph.NewFieldSpec(manageduser.FieldID, field.TypeInt))
	id, ok := muuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ManagedUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, manageduser.FieldID)
		for _, f := range fields {
			if !manageduser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != manageduser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muuo.mutation.Email(); ok {
		_spec.SetField(manageduser.FieldEmail, field.TypeString, value)
	}
	if muuo.mutation.EmailCleared() {
		_spec.ClearField(manageduser.FieldEmail, field.TypeString)
	}
	if value, ok := muuo.mutation.ForcePasswordChange(); ok {
		_spec.SetField(manageduser.FieldForcePasswordChange, field.TypeBool, value)
	}
	if value, ok := muuo.mutation.Fullname(); ok {
		_spec.SetField(manageduser.FieldFullname, field.TypeString, value)
	}
	if muuo.mutation.FullnameCleared() {
		_spec.ClearField(manageduser.FieldFullname, field.TypeString)
	}
	if value, ok := muuo.mutation.LastPasswordChange(); ok {
		_spec.SetField(manageduser.FieldLastPasswordChange, field.TypeTime, value)
	}
	if value, ok := muuo.mutation.NonExpiryPassword(); ok {
		_spec.SetField(manageduser.FieldNonExpiryPassword, field.TypeBool, value)
	}
	if value, ok := muuo.mutation.Password(); ok {
		_spec.SetField(manageduser.FieldPassword, field.TypeString, value)
	}
	if value, ok := muuo.mutation.Suspended(); ok {
		_spec.SetField(manageduser.FieldSuspended, field.TypeBool, value)
	}
	if value, ok := muuo.mutation.Username(); ok {
		_spec.SetField(manageduser.FieldUsername, field.TypeString, value)
	}
	if muuo.mutation.UsernameCleared() {
		_spec.ClearField(manageduser.FieldUsername, field.TypeString)
	}
	if muuo.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   manageduser.PermissionsTable,
			Columns: manageduser.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muuo.mutation.RemovedPermissionsIDs(); len(nodes) > 0 && !muuo.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   manageduser.PermissionsTable,
			Columns: manageduser.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muuo.mutation.PermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   manageduser.PermissionsTable,
			Columns: manageduser.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muuo.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   manageduser.TeamsTable,
			Columns: manageduser.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muuo.mutation.RemovedTeamsIDs(); len(nodes) > 0 && !muuo.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   manageduser.TeamsTable,
			Columns: manageduser.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muuo.mutation.TeamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   manageduser.TeamsTable,
			Columns: manageduser.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ManagedUser{config: muuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{manageduser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muuo.mutation.done = true
	return _node, nil
}
