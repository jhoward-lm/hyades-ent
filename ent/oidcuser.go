// Code generated by ent, DO NOT EDIT.
// --------------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2025 The DependencyTrack Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// --------------------------------------------------------------------
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// --------------------------------------------------------------------

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"dependencytrack.io/hyades/ent/oidcuser"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// OIDCUser is the model entity for the OIDCUser schema.
type OIDCUser struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// SubjectIdentifier holds the value of the "subject_identifier" field.
	SubjectIdentifier string `json:"subject_identifier,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OIDCUserQuery when eager-loading is set.
	Edges        OIDCUserEdges `json:"-"`
	selectValues sql.SelectValues
}

// OIDCUserEdges holds the relations/edges for other nodes in the graph.
type OIDCUserEdges struct {
	// Permissions holds the value of the permissions edge.
	Permissions []*Permission `json:"permissions,omitempty"`
	// Teams holds the value of the teams edge.
	Teams []*Team `json:"teams,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// PermissionsOrErr returns the Permissions value or an error if the edge
// was not loaded in eager-loading.
func (e OIDCUserEdges) PermissionsOrErr() ([]*Permission, error) {
	if e.loadedTypes[0] {
		return e.Permissions, nil
	}
	return nil, &NotLoadedError{edge: "permissions"}
}

// TeamsOrErr returns the Teams value or an error if the edge
// was not loaded in eager-loading.
func (e OIDCUserEdges) TeamsOrErr() ([]*Team, error) {
	if e.loadedTypes[1] {
		return e.Teams, nil
	}
	return nil, &NotLoadedError{edge: "teams"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OIDCUser) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case oidcuser.FieldID:
			values[i] = new(sql.NullInt64)
		case oidcuser.FieldEmail, oidcuser.FieldSubjectIdentifier, oidcuser.FieldUsername:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OIDCUser fields.
func (ou *OIDCUser) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case oidcuser.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ou.ID = int(value.Int64)
		case oidcuser.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				ou.Email = value.String
			}
		case oidcuser.FieldSubjectIdentifier:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subject_identifier", values[i])
			} else if value.Valid {
				ou.SubjectIdentifier = value.String
			}
		case oidcuser.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				ou.Username = value.String
			}
		default:
			ou.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OIDCUser.
// This includes values selected through modifiers, order, etc.
func (ou *OIDCUser) Value(name string) (ent.Value, error) {
	return ou.selectValues.Get(name)
}

// QueryPermissions queries the "permissions" edge of the OIDCUser entity.
func (ou *OIDCUser) QueryPermissions() *PermissionQuery {
	return NewOIDCUserClient(ou.config).QueryPermissions(ou)
}

// QueryTeams queries the "teams" edge of the OIDCUser entity.
func (ou *OIDCUser) QueryTeams() *TeamQuery {
	return NewOIDCUserClient(ou.config).QueryTeams(ou)
}

// Update returns a builder for updating this OIDCUser.
// Note that you need to call OIDCUser.Unwrap() before calling this method if this OIDCUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (ou *OIDCUser) Update() *OIDCUserUpdateOne {
	return NewOIDCUserClient(ou.config).UpdateOne(ou)
}

// Unwrap unwraps the OIDCUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ou *OIDCUser) Unwrap() *OIDCUser {
	_tx, ok := ou.config.driver.(*txDriver)
	if !ok {
		panic("ent: OIDCUser is not a transactional entity")
	}
	ou.config.driver = _tx.drv
	return ou
}

// String implements the fmt.Stringer.
func (ou *OIDCUser) String() string {
	var builder strings.Builder
	builder.WriteString("OIDCUser(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ou.ID))
	builder.WriteString("email=")
	builder.WriteString(ou.Email)
	builder.WriteString(", ")
	builder.WriteString("subject_identifier=")
	builder.WriteString(ou.SubjectIdentifier)
	builder.WriteString(", ")
	builder.WriteString("username=")
	builder.WriteString(ou.Username)
	builder.WriteByte(')')
	return builder.String()
}

// MarshalJSON implements the json.Marshaler interface.
func (ou *OIDCUser) MarshalJSON() ([]byte, error) {
	type Alias OIDCUser
	return json.Marshal(&struct {
		*Alias
		OIDCUserEdges
	}{
		Alias:         (*Alias)(ou),
		OIDCUserEdges: ou.Edges,
	})
}

// OIDCUsers is a parsable slice of OIDCUser.
type OIDCUsers []*OIDCUser
